'Exact cover Sudoku solver⍞000D-------------------------⍞000DA Sudoku puzzle may be expressed and solved as an exact cover problem:⍞000D⍞000D    sudokuX←{⎕ML ⎕IO←1      ⍝ Exact cover Sudoku solver.⍞000D        n n←⍴⍵              ⍝ n×n puzzle.⍞000D        ⍺←smat n            ⍝ generic ⍵×⍵ constraint matrix.⍞000D        r←∊(⍵≠0)>(⊂⍳n)∊¨⍵   ⍝ already placed rows.⍞000D        m←(~r)⌿⍺            ⍝ reduced matrix.⍞000D        f←X m               ⍝ exact cover.⍞000D        z←(~r)\f            ⍝ merge of placements.⍞000D        n n⍴z/(⍴z)⍴⍳n       ⍝ solution matrix.⍞000D    }⍞000D⍞000D    smat←{                              ⍝ Matrix for ⍵ ⍵-Sudoku puzzle.⍞000D        z←,[⍳6],[6+⍳4]⍳10⍴⍵*÷2          ⍝ cell coordinate properties.⍞000D        row←↓1 1 0 0 1 1 1 1 1 1/↑z     ⍝ each row must contain each number.⍞000D        col←↓0 0 1 1 1 1 1 1 1 1/↑z     ⍝   .. col  ..  ..  ..  ..  ..  ..⍞000D        box←↓1 0 1 0 1 1 1 1 1 1/↑z     ⍝   .. box  ..  ..  ..  ..  ..  ..⍞000D        all←↓1 1 1 1 0 0 1 1 1 1/↑z     ⍝ each cell must contain a number.⍞000D        same←≡/∘(1 0 0 0 1 0 0 0∘⊂)     ⍝ matching pairs.⍞000D        same¨row,col,box,all            ⍝ constraints matrix for ⍵ ⍵-puzzle.⍞000D    }⍞000D⍞000D    s99             ⍝ puzzle⍞000D0 0 1 6 9 0 5 0 0⍞000D4 0 0 2 7 0 0 0 1⍞000D0 7 0 0 0 0 0 9 0⍞000D0 0 0 0 0 0 0 3 0⍞000D0 0 0 4 3 0 0 0 7⍞000D0 0 0 7 8 0 6 0 0⍞000D0 0 6 0 0 0 8 0 5⍞000D0 2 0 1 4 0 0 6 0⍞000D0 1 0 3 5 0 0 4 0⍞000D⍞000D    sudokuX s99     ⍝ solution.⍞000D2 8 1 6 9 3 5 7 4⍞000D4 6 9 2 7 5 3 8 1⍞000D5 7 3 8 1 4 2 9 6⍞000D7 9 2 5 6 1 4 3 8⍞000D6 5 8 4 3 9 1 2 7⍞000D1 3 4 7 8 2 6 5 9⍞000D3 4 6 9 2 7 8 1 5⍞000D9 2 5 1 4 8 7 6 3⍞000D8 1 7 3 5 6 9 4 2⍞000D⍞000DTechnical notes:⍞000D⍞000DEach row in the constraints matrix (smat ⍵) represents the placement of a number⍞000D1..9 in one of the 9×9 cells:⍞000D⍞000D    9×9×9 → 729 rows.⍞000D⍞000DThere  are  four column groups to code for the requirement that each number 1..9⍞000Dbe represented in each of 9 rows (ColsR), 9 columns (ColsC) and 9 boxes (ColsB),⍞000Dtogether with the  rule that every cell be occupied (ColsA).⍞000D⍞000D    4×9×9 → 324 columns.⍞000D⍞000DThis (⍵ 4×⍵*2) boolean constraint matrix is invariant for a square sudoku puzzle⍞000Dof size ⍵ ⍵ and may be pre-fabricated and used for any number of  specific inst-⍞000Dances of puzzles of this size.⍞000D⍞000DLabelling the Rows, Cols and Boxes of a shape ⍵ ⍵ Sudoku puzzle: R1..R⍵, C2..C⍵,⍞000DB1..B⍵, and calling the four column groups ColsR, ColsC, ColsB and ColsA:⍞000D⍞000DRows: ⍵×⍵×⍵ possible actions:⍞000D    Place; 1 in R1C1; place 2 in R1C1; ... place ⍵ in R1C1;⍞000D    Place; 1 in R1C2; place 2 in R1C2; ... place ⍵ in R1C2;⍞000D    ...⍞000D    Place; 1 in R⍵C⍵; place 2 in R⍵C⍵; ... place ⍵ in R⍵C⍵.⍞000D⍞000DColsR ⍵×⍵ requirements (all numbers appear in each puzzle Row):⍞000D    R1 contains 1; R1 contains 2; ... R1 contains ⍵;⍞000D    R2 contains 1; R2 contains 2; ... R2 contains ⍵;⍞000D    ...⍞000D    R⍵ contains 1; R⍵ contains 2; ... R⍵ contains ⍵.⍞000D⍞000DColsC ⍵×⍵ requirements (all numbers appear in each puzzle Col):⍞000D    C1 contains 1; C1 contains 2; ... C1 contains ⍵;⍞000D    C2 contains 1; C2 contains 2; ... C2 contains ⍵;⍞000D    ...⍞000D    C⍵ contains 1; C⍵ contains 2; ... C⍵ contains ⍵.⍞000D⍞000DColsB ⍵×⍵ requirements (all numbers appear in each puzzle Box):⍞000D    B1 contains 1; B1 contains 2; ... B1 contains ⍵;⍞000D    B2 contains 1; B2 contains 2; ... B2 contains ⍵;⍞000D    ...⍞000D    B⍵ contains 1; B⍵ contains 2; ... B⍵ contains ⍵.⍞000D⍞000DColsA ⍵×⍵ requirements (each cell is occupied at most once):⍞000D    R1C1 occupied; R1C2 occupied; ... R1C⍵ occupied;⍞000D    R2C1 occupied; R2C2 occupied; ... R2C⍵ occupied;⍞000D    ...⍞000D    R⍵C1 occupied; R⍵C2 occupied; ... R⍵C⍵ occupied;⍞000D⍞000DGiven a specific puzzle to be solved, rows are removed from a copy of this  gen-⍞000Deric matrix to represent numbers that may not be placed in pre-populated  cells.⍞000D⍞000DFor example, given the 4×4 puzzle:⍞000D⍞000D    0 0 0 0⍞000D    0 0 2 1⍞000D    3 0 0 4⍞000D    0 0 0 0⍞000D⍞000Dwe would remove 12 rows corresponding to placements of:⍞000D⍞000D    m[2;3]←2 → remove 3 rows m[2;3] ∊ 1 3 4⍞000D    m[2;4]←1 → remove 3 rows m[2;4] ∊ 2 3 4⍞000D    m[3;1]←3 → remove 3 rows m[3;1] ∊ 1 2 4⍞000D    m[3;4]←4 → remove 3 rows m[3;4] ∊ 1 2 3⍞000D⍞000DCoding details⍞000D--------------⍞000D⍞000DFor the solver:⍞000D⍞000D    sudokuX←{⎕ML ⎕IO←1      ⍝ Exact cover Sudoku solver.⍞000D        n n←⍴⍵              ⍝ n×n puzzle.⍞000D        ⍺←smat n            ⍝ generic ⍵×⍵ constraint matrix.⍞000D        r←∊(⍵≠0)>(⊂⍳n)∊¨⍵   ⍝ already placed rows.⍞000D        m←(~r)⌿⍺            ⍝ reduced matrix.⍞000D        f←X m               ⍝ exact cover.⍞000D        z←(~r)\f            ⍝ merge of placements.⍞000D        n n⍴z/(⍴z)⍴⍳n       ⍝ solution matrix.⍞000D    }⍞000D⍞000DTaking the lines one at a time:⍞000D⍞000D[0] sudokuX←{⎕ML ⎕IO←1      ⍝ Exact cover Sudoku solver.⍞000D⍞000DIndex-origin is set to 1 so that ⍳9 produces numbers 1..9, leaving  0  free  for⍞000Dunoccupied cells.⍞000D⍞000DMigration level is set to 1 for the enlist (∊) function on line[3].⍞000D⍞000D[1]     n n←⍴⍵              ⍝ n×n puzzle.⍞000D⍞000DSets n to the scalar value of the number of rows  (and columns)  of  the  square⍞000Dpuzzle.  The  squareness  =/⍴⍵  is  not enforced by this statement and in fact n⍞000Dwinds up as the number of columns, irrespective of the number of rows.  But  the⍞000Dcode  at  least  hints  that the number of rows and columns is assumed to be the⍞000Dsame.⍞000D⍞000D[2]     ⍺←smat n            ⍝ generic ⍵ ⍵-matrix.⍞000D⍞000DA pre-computed generic contraints matrix may be passed as left argument but,  if⍞000Dnot, this statement computes it.  Doing so takes a second or so, so it is worth-⍞000Dwhile storing the value if many puzzles of a particular size are to  be  solved.⍞000DThe boolean matrix could be bound (composed) with the solver to  derive  a  new⍞000Dmonadic function, thus:⍞000D⍞000D        sx99 ← (smat 9 9)∘sudokuX       ⍝ 9 9-sudoku solver.⍞000D⍞000D[3]     r←∊(⍵≠0)>(⊂⍳n)∊¨⍵   ⍝ already placed rows.⍞000D⍞000DGive the above 4×4 puzzle,⍞000D⍞000D    0 0 0 0⍞000D    0 0 2 1⍞000D    3 0 0 4⍞000D    0 0 0 0⍞000D⍞000Dthe rightmost segment of this line:⍞000D⍞000D        r←∊(⍵≠0)>(⊂⍳n)∊¨⍵   ⍝ already placed rows.⍞000D                 ¯¯¯¯¯¯¯¯⍞000Dproduces a matrix of masks for the already placed numbers.⍞000D⍞000D    ┌→──────┬───────┬───────┬───────┐⍞000D    ↓0 0 0 0│0 0 0 0│0 0 0 0│0 0 0 0│⍞000D    ├~─────→┼~─────→┼~─────→┼~─────→┤⍞000D    │0 0 0 0│0 0 0 0│0 1 0 0│1 0 0 0│⍞000D    ├~─────→┼~─────→┼~─────→┼~─────→┤⍞000D    │0 0 1 0│0 0 0 0│0 0 0 0│0 0 0 1│⍞000D    ├~─────→┼~─────→┼~─────→┼~─────→┤⍞000D    │0 0 0 0│0 0 0 0│0 0 0 0│0 0 0 0│⍞000D    └~─────→┴~─────→┴~─────→┴~─────→┘⍞000D⍞000Dthe second part:⍞000D⍞000D        r←∊(⍵≠0)>(⊂⍳n)∊¨⍵   ⍝ already placed rows.⍞000D           ¯¯¯¯¯¯⍞000Ddelivers a matrix of masks of disallowed numbers per cell:⍞000D⍞000D    ┌→──────┬───────┬───────┬───────┐⍞000D    ↓0 0 0 0│0 0 0 0│0 0 0 0│0 0 0 0│⍞000D    ├~─────→┼~─────→┼~─────→┼~─────→┤⍞000D    │0 0 0 0│0 0 0 0│1 0 1 1│0 1 1 1│⍞000D    ├~─────→┼~─────→┼~─────→┼~─────→┤⍞000D    │1 1 0 1│0 0 0 0│0 0 0 0│1 1 1 0│⍞000D    ├~─────→┼~─────→┼~─────→┼~─────→┤⍞000D    │0 0 0 0│0 0 0 0│0 0 0 0│0 0 0 0│⍞000D    └~─────→┴~─────→┴~─────→┴~─────→┘⍞000D⍞000D... the enlist (∊) of which is a boolean mask vector of which rows are to be re-⍞000Dmoved from the constraint matrix for this puzzle instance, as in  the  following⍞000Dline:⍞000D⍞000D[4]     m←(~r)⌿⍺            ⍝ reduced matrix.⍞000D⍞000Dm is a reduced-rows matrix for this puzzle instance.⍞000D⍞000D[5]     f←X m               ⍝ exact cover.⍞000D⍞000DLine[5] finds the exact cover for the reduced matrix and line[6]:⍞000D⍞000D[6]     z←(~r)\f            ⍝ merge of placements.⍞000D⍞000D... expands this to a row selection for the presented puzzle, including its pre-⍞000Dplaced numbers. Finally, line[7]:⍞000D⍞000D[7]     n n⍴z/(⍴z)⍴⍳n       ⍝ solution matrix.⍞000D⍞000Dpresents this allocation of numbers to cells as a solution in the standard form:⍞000D⍞000D    2 1 4 3⍞000D    4 3 2 1⍞000D    3 2 1 4⍞000D    1 4 3 2⍞000D⍞000DFor the function that generates the generic constraints matrix:⍞000D⍞000D    smat←{                              ⍝ Matrix for ⍵ ⍵-Sudoku puzzle.⍞000D        z←,[⍳6],[6+⍳4]⍳10⍴⍵*÷2          ⍝ cell coordinate properties.⍞000D        row←↓1 1 0 0 1 1 1 1 1 1/↑z     ⍝ each row must contain each number.⍞000D        col←↓0 0 1 1 1 1 1 1 1 1/↑z     ⍝   .. col  ..  ..  ..  ..  ..  ..⍞000D        box←↓1 0 1 0 1 1 1 1 1 1/↑z     ⍝   .. box  ..  ..  ..  ..  ..  ..⍞000D        all←↓1 1 1 1 0 0 1 1 1 1/↑z     ⍝ each cell must contain a number.⍞000D        same←≡/∘(1 0 0 0 1 0 0 0∘⊂)     ⍝ matching pairs.⍞000D        same¨row,col,box,all            ⍝ constraints matrix for ⍵ ⍵-puzzle.⍞000D    }⍞000D⍞000DTaking the lines one at a time:⍞000D⍞000D[1]     z←,[⍳6],[6+⍳4]⍳10⍴⍵*÷2          ⍝ cell coordinate properties.⍞000D⍞000DIt is easier to address the cells at square-within-box resolution. For the above⍞000D4×4 puzzle:⍞000D⍞000D    ┌───┬───┬───┬───┐⍞000D    │ 0 │ 0 │ 0 │ 0 │⍞000D    ├───┼───┼───┼───┤⍞000D    │ 0 │ 0 │ 2 │ 1 │⍞000D    ├───┼───┼───┼───┤⍞000D    │ 3 │ 0 │ 0 │ 4 │⍞000D    ├───┼───┼───┼───┤⍞000D    │ 0 │ 0 │ 0 │ 0 │⍞000D    └───┴───┴───┴───┘⍞000D⍞000DThe cell coordinates would be:⍞000D⍞000D    ┌─────────────────────┬─────────────────────┐⍞000D    │┌─────────┬─────────┐│┌─────────┬─────────┐│⍞000D    ││┌───┬───┐│┌───┬───┐│││┌───┬───┐│┌───┬───┐││⍞000D    │││1 1│1 1│││1 1│1 2│││││1 2│1 1│││1 2│1 2│││⍞000D    ││└───┴───┘│└───┴───┘│││└───┴───┘│└───┴───┘││⍞000D    │├─────────┼─────────┤│├─────────┼─────────┤│⍞000D    ││┌───┬───┐│┌───┬───┐│││┌───┬───┐│┌───┬───┐││⍞000D    │││1 1│2 1│││1 1│2 2│││││1 2│2 1│││1 2│2 2│││⍞000D    ││└───┴───┘│└───┴───┘│││└───┴───┘│└───┴───┘││⍞000D    │└─────────┴─────────┘│└─────────┴─────────┘│⍞000D    ├─────────────────────┼─────────────────────┤⍞000D    │┌─────────┬─────────┐│┌─────────┬─────────┐│⍞000D    ││┌───┬───┐│┌───┬───┐│││┌───┬───┐│┌───┬───┐││⍞000D    │││2 1│1 1│││2 1│1 2│││││2 2│1 1│││2 2│1 2│││⍞000D    ││└───┴───┘│└───┴───┘│││└───┴───┘│└───┴───┘││⍞000D    │├─────────┼─────────┤│├─────────┼─────────┤│⍞000D    ││┌───┬───┐│┌───┬───┐│││┌───┬───┐│┌───┬───┐││⍞000D    │││2 1│2 1│││2 1│2 2│││││2 2│2 1│││2 2│2 2│││⍞000D    ││└───┴───┘│└───┴───┘│││└───┴───┘│└───┴───┘││⍞000D    │└─────────┴─────────┘│└─────────┴─────────┘│⍞000D    └─────────────────────┴─────────────────────┘⍞000D⍞000DFor example, the coordinates of the 4 in the third row, fourth column, are:⍞000D⍞000D    ┌───┬───┐⍞000D    │2 2│1 2│   box:2 2 ; cell:1 2⍞000D    └───┴───┘⍞000D⍞000DIt is convenient also to represent the numbers to be placed as a base ⍵*÷2 pair.⍞000DFor a 9×9 puzzle, numbers 1..9 are represented:⍞000D⍞000D    ┌───┬───┬───┬───┬───┬───┬───┬───┬───┐⍞000D    │1 1│1 2│1 3│2 1│2 2│2 3│3 1│3 2│3 3│⍞000D    └───┴───┴───┴───┴───┴───┴───┴───┴───┘⍞000D⍞000Dso, for example, the number 4 is represented as 2 1.⍞000D⍞000DThis means that the rank-10 array:⍞000D⍞000D        z←,[⍳6],[6+⍳4]⍳10⍴⍵*÷2          ⍝ cell coordinate properties.⍞000D                      ¯¯¯¯¯¯¯¯⍞000Dencodes sufficient information to generate the constraint matrix.  Ravelling the⍞000Dfirst six and last four axes:⍞000D⍞000D        z←,[⍳6],[6+⍳4]⍳10⍴⍵*÷2          ⍝ cell coordinate properties.⍞000D          ¯¯¯¯¯¯¯¯¯¯¯¯⍞000Dproduces  a  rank-2 (⍵ 4×⍵*2)-matrix,  each of whose items is a 10-vector of the⍞000Dproperties of that particular constraint:⍞000D⍞000D    br bc  cr cc  hi lo   xr xc  hi lo⍞000D    └─┬─┘  └─┬─┘  └─┬─┘   └─┬─┘  └─┬─┘⍞000D      │      │      │       │      └─── number: high/low digit.⍞000D      │      │      │       └────────── row/col coordinate.⍞000D      │      │      │⍞000D      │      │      └────────────────── number: high/low digit.⍞000D      │      └───────────────────────── cell-within-box row/col coords.⍞000D      └──────────────────────────────── box row/col coords.⍞000D⍞000DLines[2-5] can then select four coord/number pairs for comparison:⍞000D⍞000D[2]   row←↓1 1 0 0 1 1 1 1 1 1/↑z     ⍝ each row must contain each number.⍞000D[3]   col←↓0 0 1 1 1 1 1 1 1 1/↑z     ⍝   .. col  ..  ..  ..  ..  ..  ..⍞000D[4]   box←↓1 0 1 0 1 1 1 1 1 1/↑z     ⍝   .. box  ..  ..  ..  ..  ..  ..⍞000D[5]   all←↓1 1 1 1 0 0 1 1 1 1/↑z     ⍝ each cell must contain a number.⍞000D⍞000DLine[6] defines a function for separation and comparison of  the  items  of each⍞000Dpair:⍞000D⍞000D[6]   same←≡/∘(1 0 0 0 1 0 0 0∘⊂)     ⍝ matching pairs.⍞000D⍞000Dand  finally, line[7] applies this function to the catenation of the four column⍞000Dgroups:⍞000D⍞000D[7]   same¨row,col,box,all            ⍝ constraints matrix for ⍵ ⍵-puzzle.⍞000D⍞000DBack to →X←⍞000D⍞000DSee also: sudoku X⍞000D⍞000DIndex:diversions|sudoku, game of' 
