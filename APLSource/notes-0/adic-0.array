'digs ← alph ##.adic numb                    ⍝ Bijective base-⍺ numeration.⍞000Dnumb ← alph ##.adic digs                    ⍝ and its inverse.⍞000D⍞000DBijective  base-⍺  numeration is a 1-1 mapping between strings in alphabet ⍺ and⍞000Dthe natural numbers 0 1 2 ...⍞000D⍞000DThe strings are mapped in "shortlex" order so that shorter strings map to small-⍞000Der numbers and same-length strings map in lexicographical order.  In particular,⍞000Dnatural number 0 maps to the null string.⍞000D⍞000DHere are the mappings for the numbers 0..16 using alphabet ''AB'':⍞000D⍞000D        ''AB''∘adic¨ 0 to 16⍞000D    ┌┬─┬─┬──┬──┬──┬──┬───┬───┬───┬───┬───┬───┬───┬───┬────┬────┐⍞000D    ││A│B│AA│AB│BA│BB│AAA│AAB│ABA│ABB│BAA│BAB│BBA│BBB│AAAA│AAAB│⍞000D    └┴─┴─┴──┴──┴──┴──┴───┴───┴───┴───┴───┴───┴───┴───┴────┴────┘⍞000D⍞000DNotice the difference between 2-adic enumeration (with alphabet 0 1):⍞000D⍞000D        0 1∘adic¨ 1 to 10               ⍝ 2-adic  1..10⍞000D    ┌─┬─┬───┬───┬───┬───┬─────┬─────┬─────┬─────┐⍞000D    │0│1│0 0│0 1│1 0│1 1│0 0 0│0 0 1│0 1 0│0 1 1│⍞000D    └─┴─┴───┴───┴───┴───┴─────┴─────┴─────┴─────┘⍞000D⍞000Dand regular binary:⍞000D⍞000D        2 ⊥⍣¯1¨ 1 to 10                 ⍝ binary 1..10⍞000D    ┌─┬───┬───┬─────┬─────┬─────┬─────┬───────┬───────┬───────┐⍞000D    │1│1 0│1 1│1 0 0│1 0 1│1 1 0│1 1 1│1 0 0 0│1 0 0 1│1 0 1 0│⍞000D    └─┴───┴───┴─────┴─────┴─────┴─────┴───────┴───────┴───────┘⍞000D⍞000DRef: http://en.wikipedia.org/wiki/Bijective_numeration⍞000D⍞000DWith coding from Jay Foad,  function [adic] converts between natural numbers and⍞000D⍺-adic digit strings.  The function is a self-inverse:  given a  _scalar_  right⍞000Dargument, it returns a vector of ⍺-digits;  and given a _vector_ right argument,⍞000Dit returns the corresponding natural number:⍞000D⍞000D        ⎕A adic ''DYALOG''                ⍝ ''A..Z''-adic → natural number.⍞000D    58975989⍞000D⍞000D        phrase ← ,¨ ''I'' ''AM'' ''OK'' '''' ''HOW'' ''R'' ''U''⍞000D⍞000D        phrase                          ⍝ vector of word vectors.⍞000D    ┌─┬──┬──┬┬───┬─┬─┐⍞000D    │I│AM│OK││HOW│R│U│⍞000D    └─┴──┴──┴┴───┴─┴─┘⍞000D⍞000D        ⎕A∘adic¨ phrase                 ⍝ ⎕A-adic number of each word.⍞000D    9 39 401 0 5821 18 21⍞000D⍞000D        ''abc'' adic 99                   ⍝ ''abc''-adic representation of number,⍞000D    cabc⍞000D⍞000D        ''abc'' adic ''abc'' adic 99        ⍝ and its inverse.⍞000D    99⍞000D⍞000D        ⎕A (adic⍣2) 1234                ⍝ adic⍣2 is identity.⍞000D    1234⍞000D⍞000D        ⎕A (adic⍣2) ''DYALOG''            ⍝   ..      ..⍞000D    DYALOG⍞000D⍞000DApplications⍞000D------------⍞000DThe function could be used  for a systematic exploration of words that are writ-⍞000Dable in a given alphabet.  For example, given some error-trapping,  it could be⍞000Dused to test arbitrary expressions:⍞000D⍞000D    try←{                       ⍝ execute of ⍵ expressions using tokens from ⍺.⍞000D        join←{↑⍺{⍺,⍺⍺,⍵}/⍵}     ⍝ ⍺-join of vector ⍵.⍞000D        '' ''join''''join ⍺∘adic{   ⍝ ⍺-adic translation from natural number.⍞000D            0::''''               ⍝ error: null.⍞000D            expr←⍺⍺ ⍵           ⍝ expression to try.⍞000D            rslt←⍎expr          ⍝ attempted execution.⍞000D            ⊂expr               ⍝ success: good expression.⍞000D        }¨⍳⍵                    ⍝ ⍵ is number of expressions to try.⍞000D    }⍞000D⍞000D    ''+/''try 500⍞000D+ / +/ // +// /// +/// //// +//// ///// +///// ////// +////// /////// +///////⍞000D⍞000D    ''+/⍬''try 50⍞000D+ / ⍬ +/ +⍬ // ⍬⍬ ++⍬ +// +/⍬ +⍬⍬ /// //⍬ ⍬+⍬ ⍬/⍬ ⍬⍬⍬ +++⍬ ++/⍬ ++⍬⍬⍞000D⍞000D    try''#.[⍬]''try 1e3⍞000D# ⍬ ## #⍬ ⍬# ⍬⍬ ### ##⍬ #.# #⍬# #⍬⍬ ⍬## ⍬#⍬ ⍬[] ⍬⍬# ⍬⍬⍬ #### ###⍬ ##.# ##⍬# ##⍬⍬⍞000D       #.## #.#⍬ #⍬## #⍬#⍬ #⍬[] #⍬⍬# #⍬⍬⍬ ⍬### ⍬##⍬ ⍬#.# ⍬#[] ⍬#⍬# ⍬#⍬⍬ ⍬[⍬] ⍬[]⍞000D      # ⍬[]⍬ ⍬⍬## ⍬⍬#⍬ ⍬⍬[] ⍬⍬⍬# ⍬⍬⍬⍬ ##### ####⍬ ###.# ###[] ###⍬# ###⍬⍬ ##.##⍞000D      ##.#⍬ ##⍬## ##⍬#⍬ ##⍬[] ##⍬⍬# ##⍬⍬⍬ #.### #.##⍬ #.#.# #.#⍬# #.#⍬⍬⍞000D⍞000D    try''+/¨∘⍬''try 1e3⍞000D+ / ⍬ +/ +¨ +⍬ // /¨ ∘¨ ⍬¨ ⍬⍬ ++⍬ +// +/¨ +/⍬ +¨/ +¨¨ +¨⍬ +∘+ +∘/ +∘⍬ +⍬⍬ /// //⍞000D      ¨ //⍬ /¨/ /¨¨ /∘+ /∘/ /∘⍬ ∘¨/ ∘¨¨ ∘∘+ ∘∘/ ∘∘⍬ ⍬+⍬ ⍬/⍬ ⍬¨/ ⍬¨¨ ⍬∘+ ⍬∘/ ⍬∘⍬⍞000D      ⍬⍬¨ ⍬⍬⍬ +++⍬ ++/⍬ ++¨⍬ ++⍬⍬ +/+⍬ +/// +//¨ +/¨/ +/¨¨ +/¨⍬ +/∘+ +/∘/ +/∘⍬ +⍞000D      /⍬⍬ +¨+⍬ +¨// +¨/¨ +¨¨/ +¨¨¨ +¨¨⍬ +¨∘+ +¨∘/ +¨∘⍬ +¨⍬⍬ +∘+/ +∘+¨ +∘+⍬ +∘//⍞000D      +∘/¨ +∘∘¨ +∘⍬/ +∘⍬¨ +∘⍬⍬ +⍬+⍬ +⍬/⍬ +⍬⍬⍬ //+⍬ //// ///¨ //¨/ //¨¨ //¨⍬ //∘+⍞000D       //∘/ //∘⍬ //⍬⍬ /¨// /¨/¨ /¨¨/ /¨¨¨ /¨∘+ /¨∘/ /¨∘⍬ /∘+/ /∘+¨ /∘// /∘/¨ /∘∘⍞000D      ¨ /∘⍬/ /∘⍬¨ /∘⍬⍬ ∘¨// ∘¨/¨ ∘¨¨/ ∘¨¨¨ ∘¨∘+ ∘¨∘/ ∘¨∘⍬ ∘∘+/ ∘∘+¨ ∘∘// ∘∘/¨ ∘∘⍞000D      ∘¨ ∘∘⍬/ ∘∘⍬¨ ∘∘⍬⍬ ⍬++⍬ ⍬+¨⍬ ⍬/+⍬ ⍬/¨⍬ ⍬¨// ⍬¨/¨ ⍬¨¨/ ⍬¨¨¨ ⍬¨∘+ ⍬¨∘/ ⍬¨∘⍬ ⍬⍞000D      ∘+/ ⍬∘+¨ ⍬∘+⍬ ⍬∘// ⍬∘/¨ ⍬∘/⍬ ⍬∘∘¨ ⍬∘⍬/ ⍬∘⍬¨ ⍬∘⍬⍬ ⍬⍬¨/ ⍬⍬¨¨ ⍬⍬∘+ ⍬⍬∘/ ⍬⍬∘⍬⍞000D      ⍬⍬⍬¨ ⍬⍬⍬⍬ ++++⍬ +++/⍬ +++¨⍬ +++⍬⍬ ++/+⍬ ++/¨⍬ ++/⍬⍬ ++¨+⍬ ++¨¨⍬ ++¨⍬⍬ ++∘+⍞000D      ⍬ ++∘/⍬ ++⍬+⍬ ++⍬/⍬ ++⍬⍬⍬ +/++⍬ +/+/⍬ +/+¨⍬ +/+⍬⍬ +//// +///¨ +//¨/ +//¨¨⍞000D      +//¨⍬ +//∘+ +//∘/ +//∘⍬ +/¨+⍬ +/¨// +/¨/¨ +/¨¨/ +/¨¨¨ +/¨¨⍬ +/¨∘+ +/¨∘/ +/⍞000D      ¨∘⍬ +/¨⍬⍬ +/∘+/ +/∘+¨ +/∘+⍬ +/∘// +/∘/¨ +/∘∘¨⍞000D⍞000DNotice that the last test found some errors in Dyalog''s parser.  For example, ∘¨⍞000Dand ∘∘+ should  generate syntax errors but seem not to.  In contrast, ⍬¨ and ⍬∘⍬⍞000Dare syntactically correct derived functions, though they have yet to be assigned⍞000Da meaning in Dyalog. See the "muse" in →ncpath← for a suggestion for ⍬¨.⍞000D⍞000DSee also →parse←.⍞000D⍞000D[adic] could also be used to stress-test a symbol table:⍞000D⍞000D    (⎕ns'''') ⍎¨ time ,∘''←0''¨ ⎕a∘adic¨ ⍳1e5       ⍝ create 100K symbols.⍞000D36.58⍞000D⍞000D(muse:⍞000D⍞000D    Function ⎕A∘adic defines 1-1 mapping between the natural numbers and the set⍞000D    of single words that can be written using the upper-case alphabet.  Here are⍞000D    the "words" that correspond to: 1 10 100 1000 ...⍞000D⍞000D        ⎕a∘adic¨ 10* 0 to 10⍞000D     A  J  CV  ALL  NTP  EQXD  BDWGN  UVXWJ  HJUNYV  CFDGSXL  AFIPYQJP⍞000D⍞000D    Given enough time, this expression:⍞000D⍞000D          {⍞235E←'' '',⎕a adic ⍵ ⋄ ∇ ⍵+1} 1       ⍝ display all words.            [⍵]⍞000D⍞000D    will display all possible words that can be written using upper-case letters⍞000D    A-Z.⍞000D⍞000D    This includes all possible names and some of these names will refer to meta-⍞000D    physical deities.⍞000D⍞000D    It is generally understood  that  uttering  all of the names of the Almighty⍞000D    brings  the  universe  to an abrupt end.  The fate of the cosmos, therefore,⍞000D    hinges on whether displaying a name in the session constitutes an utterance.⍞000D⍞000D    Computer-assisted devotion  certainly has a precedent in the form of digital⍞000D    prayer-wheels: http://en.wikipedia.org/wiki/Prayer_wheel.⍞000D⍞000D    More worrying, from a mathematical point of view, an expression is deemed to⍞000D    be _equivalent_  to its evaluation.  This  means  that the mere existence of⍞000D    expression [⍵] above, should be enough to trigger the apocalypse. Though the⍞000D    fact that (you believe) you are reading this must raise some doubts.⍞000D)⍞000D⍞000DExamples:⍞000D⍞000D    1 2∘adic¨ 0 to 15           ⍝ 2-adic numbers⍞000D┌┬─┬─┬───┬───┬───┬───┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬───────┐⍞000D││1│2│1 1│1 2│2 1│2 2│1 1 1│1 1 2│1 2 1│1 2 2│2 1 1│2 1 2│2 2 1│2 2 2│1 1 1 1│⍞000D└┴─┴─┴───┴───┴───┴───┴─────┴─────┴─────┴─────┴─────┴─────┴─────┴─────┴───────┘⍞000D⍞000D    ''abc''∘adic¨0 to 23          ⍝ 3-adic numbers⍞000D┌┬─┬─┬─┬──┬──┬──┬──┬──┬──┬──┬──┬──┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┐⍞000D││a│b│c│aa│ab│ac│ba│bb│bc│ca│cb│cc│aaa│aab│aac│aba│abb│abc│aca│acb│acc│baa│bab│⍞000D└┴─┴─┴─┴──┴──┴──┴──┴──┴──┴──┴──┴──┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┘⍞000D⍞000D    ⎕A∘adic¨⍳35                 ⍝ bijective base-26 numbers.⍞000D┌─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬──┬──┬──┬──┬──┬──┬──┬──┬──┐⍞000D│A│B│C│D│E│F│G│H│I│J│K│L│M│N│O│P│Q│R│S│T│U│V│W│X│Y│Z│AA│AB│AC│AD│AE│AF│AG│AH│AI│⍞000D└─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴──┴──┴──┴──┴──┴──┴──┴──┴──┘⍞000D⍞000D    1 adic¨ 0 to 8              ⍝ 1-adic: unary numbers⍞000D┌┬─┬───┬─────┬───────┬─────────┬───────────┬─────────────┬───────────────┐⍞000D││1│1 1│1 1 1│1 1 1 1│1 1 1 1 1│1 1 1 1 1 1│1 1 1 1 1 1 1│1 1 1 1 1 1 1 1│⍞000D└┴─┴───┴─────┴───────┴─────────┴───────────┴─────────────┴───────────────┘⍞000D⍞000DSee also:ary nats words⍞000D⍞000DIndex:k-adic numbers|shortlex|bijective numeration|unary⍞000DIndex;Foad J.' 
