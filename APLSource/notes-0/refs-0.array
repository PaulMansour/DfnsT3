'rvec ← {exclude←⍬} ##.refs ref              ⍝ Vector of sub-space references.⍞000D⍞000DProduces  a  vector  of namespace references to [ref] and each of its subspaces.⍞000DThe optional left argument is a list of sub-spaces to be excluded from the trav-⍞000Dersal.⍞000D⍞000DTechnical notes:⍞000D⍞000DThe  coding is complicated by having to cater for "cyclic" namespace references.⍞000DAs  a  space  may contain a reference to one if its ancestors, the code must not⍞000Dblindly  follow  all  subspace  references,  otherwise  unbounded recursion will⍞000Dresult  in a WS FULL. The trick is to avoid re-visiting any space by maintaining⍞000Da list of those already visited.⍞000D⍞000D    refs←{                              ⍝ Vector of sub-space references for ⍵.⍞000D        ⍺←⍬ ⋄ (⍴,⍺)↓⍺{                  ⍝ default exclusion list.⍞000D            ⍺∊⍵:⍺                       ⍝ already been here: quit.⍞000D            ⍵.(↑∇∘⍎⍨/⌽(⊂⍺,⍵),↓⎕NL 9)    ⍝ recursively traverse any sub-spaces.⍞000D        }⍵                              ⍝ for given starting ref.⍞000D    }⍞000D⍞000DThe  outer  code defaults the exclusion list to null (no exclusions) and removes⍞000Dthe list from the final result:⍞000D⍞000D        ⍺←⍬ ⋄ (⍴,⍺)↓⍺{                  ⍝ default exclusion list.⍞000D            ···⍞000D        }⍵                              ⍝ for given starting ref.⍞000D⍞000DThe first line of the inner function stops if the space is in the list:⍞000D⍞000D        ⍺∊⍵:⍺                           ⍝ already been here: quit.⍞000D⍞000DThe test could be omitted by set-subtracting the list of visited refs  from  the⍞000Dlist of subspace refs. However, the code would have to accomodate the execute of⍞000Deach of a null vector of sub-space names:⍞000D⍞000D    (1↓⍎¨''0'',↓⎕NL 9)~⍺⍞000D⍞000DPerhaps a little daunting at first sight, the second line is interpreted thus:⍞000D⍞000D⍵.(····················)  ⍝ Within the subject space,⍞000D·················↓⎕NL 9·  ⍝ take a vector of sub-space names,⍞000D··········(⊂⍺,⍵),·······  ⍝ prefixed with extended visited-list.⍞000D···↑···⍨/⌽··············  ⍝ left-to-right reduction with operand:⍞000D····∇···················  ⍝ recursive call between visited-list⍞000D·····∘··················  ⍝ and⍞000D······⍎·················  ⍝ ref from sub-space name.⍞000D⍞000DNotably absent from the code is any explicit test to quit when there are no more⍞000Dsub-spaces. In this case, ↓⎕NL 9 is a null vector, so ⌽(⊂⍺,⍵),↓⎕NL 9 is a 1-item⍞000Dvector, which  is  just  passed  along as the result of the reduction without an⍞000Dapplication of its recursive operand function.  The  technique  is abstracted in⍞000Doperator →trav←.⍞000D⍞000DAn alternative, suggested by Paul Mansour, which returns just GUI refs is:⍞000D⍞000D    guirefs←{                       ⍝ Vector of GUI references for ⍵.⍞000D        ⍬{                          ⍝ starting with null result accumulator.⍞000D            ⍵.(↑∇∘⍎⍨/⌽(⊂⍺,⍵),⎕WN'''') ⍝ recursively traverse any sub-spaces.⍞000D        }⍵                          ⍝ for given starting ref.⍞000D    }⍞000D⍞000Dor the equivalent:⍞000D⍞000D    guirefs←{                   ⍝ Vector of GUI references for ⍵.⍞000D        ⍺←⍬                     ⍝ starting with null result accumulator.⍞000D        ⍵.(↑∇∘⍎⍨/⌽(⊂⍺,⍵),⎕WN'''') ⍝ recursively traverse any sub-spaces.⍞000D    }⍞000D⍞000DThis code needs no check for circularity as ⎕WN acknowledges only the strict GUI⍞000Dparent-child  hierarchy.  Again,  what is perhaps remarkable, is the lack of any⍞000Dexplicit test for termination: guirefs can safely navigate an arbitrarily compl-⍞000Dex GUI-tree even though it has "no moving parts".⍞000D⍞000DPhil Last  observes that a ref from a space inside the subject space to one out-⍞000Dside it, will include _all_ subspaces of the outer space. For example:⍞000D⍞000D    ''x''⎕ns''''⍞000D    x.cuckoo←#⍞000D    refs x⍞000D #.x  #  #.notes  #.scripts⍞000D⍞000DTo  report only those refs _within_ the subject space (x), Phil suggests replac-⍞000Ding the recursive line:⍞000D⍞000D        ⍵.(↑∇∘⍎⍨/⌽(⊂⍺,⍵),↓⎕NL 9)    ⍝ recursively traverse any sub-spaces.⍞000Dwith:⍞000D        ⍵.(↑∇⍨/⌽(⊂⍺,⍵),⍵{(0 0,1↓⍺=⍵.##)/0,⍵}⍎''⍵'',,'' '',⎕NL 9)⍞000D                                ¯¯¯¯¯¯⍞000DThe  crucial part of the above is ⍺=⍵.##, which produces a mask to extract those⍞000Dsubspaces  whose parent is the current space. This removes outward pointing refs⍞000D(such as "cuckoo" above) from the result as its parent is not the current space.⍞000D⍞000DThe  elegance  of the expression is marred a little by having to avoid errors if⍞000Dthere are no true subspaces.⍞000D⍞000DFirstly,  if ⎕NL 9 were to return an empty matrix, then ⍎,'' '',⎕NL 9 would gener-⍞000Date  a  VALUE ERROR.  To  avoid this, we preface the possibly empty list of refs⍞000Dwith known ref ''⍵'' (which will be removed later).⍞000D⍞000D            ⍎''⍵'',,'' '',⎕NL 9⍞000D⍞000DSecondly, because the interpreter does not currently provide a prototypical ref,⍞000Dwe  must  avoid  the NONCE ERROR that would occur if (···⍺=⍵.##)/⍵ resulted in a⍞000Dnull (if ⍺=⍵.## produced all zeros). This is achieved by prefixing 0 to the vec-⍞000Dtor of refs: 0,⍵ and removing it with a corresponding 0 as the first item of the⍞000Dreplicate:⍞000D⍞000D        ⍵.(↑∇⍨/⌽(⊂⍺,⍵),⍵{(0 0,1↓⍺=⍵.##)/0,⍵}⍎''⍵'',,'' '',⎕NL 9)⍞000D                          ¯             ¯¯⍞000DFinally,  the  extra prefixed ''⍵'' from the first step is removed by substituting⍞000Da 0 for the second item in the replication mask:⍞000D⍞000D        ⍵.(↑∇⍨/⌽(⊂⍺,⍵),⍵{(0 0,1↓⍺=⍵.##)/0,⍵}⍎''⍵'',,'' '',⎕NL 9)⍞000D                            ¯¯¯¯             ¯¯¯¯⍞000DExamples:⍞000D⍞000D    refs ⎕se                        ⍝ Vector of space refs for ⎕SE.⍞000D    (refs #).(⎕WX←1)                ⍝ Set value of ⎕WX in all spaces in ws.⍞000D    ⌈/(refs #).⎕ml                  ⍝ Max ⎕ML in workspace.⍞000D    ⌈/{+/''.''=⍕⍵}¨refs #             ⍝ Max namespace depth.⍞000D    ⊃+⌿↑⍴¨(refs #).⎕nl 2            ⍝ Total number of global variables.⍞000D    ↑⍪/{⍵ find''⍴⍴''}¨refs #          ⍝ Search for rank.⍞000D    ∧/0=(refs #).⎕nc⊂''foo''          ⍝ Is this a foo-free workspace?⍞000D    (refs #).⎕ex⊂''foo''              ⍝ Defoobarise the workspace.⍞000D    (refs #)fnrepl¨⊂''foo'' ''bar''     ⍝ In all the fns in all the spaces ...⍞000D    ⎕se.(cbtop cbbot) refs ⎕se      ⍝ ⎕SE refs, excluding CoolBands.⍞000D⍞000DSee also: trav tree up Namespaces xrefs pow⍞000D⍞000DIndex:refs|namespace references|⎕WX⍞000DIndex;Last P.|Mansour P.' 
