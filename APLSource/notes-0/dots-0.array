'crep ← {dot←''·''} ##.dots crep               ⍝ Show dfn with "white dots".⍞000D⍞000DReturns  canonical  representation  of  function [crep] with (by default) "white⍞000Ddots" issuing vertically from the closing brace of each multi-line D function or⍞000Dfrom  the  '':''  of each closing control structure keyword. This format makes the⍞000Dcode  of complex and deeply nested functions (arguably) more pleasant to read on⍞000Dthe printed page.⍞000D⍞000DThe left argument, which defaults to ''·'', may be any single character.⍞000D⍞000DExamples:⍞000D⍞000D⍝ Using default "white dots":⍞000D⍞000D      dots ⎕cr''dots''⍞000Ddots←{                          ⍝ Show dfn with "white dots".⍞000D·   ⍺←''·''                       ⍝ white dot.⍞000D·   cmat←⎕CR ⍵                  ⍝ char rep of function.⍞000D·   kwds←'':E'' '':C'' '':U''⍷¨⊂cmat  ⍝ end of ctrl paragraph keywords.⍞000D·   ends←↑∨/kwds,⊂cmat=''}''      ⍝ end of cstructs and dfns.⍞000D·   spcs←∧\'' ''=cmat             ⍝ leading spaces.⍞000D·   xdents←ends∧1,0 ¯1↓spcs     ⍝ leading exdents.⍞000D·   flood←(⍪1 2){               ⍝ flood upwards into blanks.⍞000D·   ·   hits←⍺⍷⍵                ⍝ 1s above 2s⍞000D·   ·   ~1∊hits:⍵               ⍝ none: done.⍞000D·   ·   ⍺ ∇ hits+⍵              ⍝ try again with 1 2 → 2 2.⍞000D·   }spcs+2×xdents              ⍝ spaces ''n braces.⍞000D·   dmask←,2=flood-xdents       ⍝ mask vector for white dots.⍞000D·   cmat[dmask/,⍳⍴cmat]←⍺       ⍝ place dots in char matrix,⍞000D·   cmat                        ⍝ and return.⍞000D}⍞000D⍞000D⍝ A more deeply nested function:⍞000D⍞000D      dots ⎕cr''fnrepl''⍞000Dfnrepl←{                                 ⍝ Function string replacement.⍞000D·   ⍺←⎕this                              ⍝ default current space.⍞000D·   1:shy←{⍵~⊂''''}⍺.{⎕ML←3                ⍝ shy rslt: changed function list.⍞000D·   ·   (↓⎕NL 3 4){                      ⍝ target space, names of fns (and ops).⍞000D·   ·   ·   (⎕NR ⍺){                     ⍝ function source lines.⍞000D·   ·   ·   ·   ⍺≡⍵:''''                   ⍝ no change: ignore.⍞000D·   ·   ·   ·   ⊢⎕FX ⍵                   ⍝ name of changed fn.⍞000D·   ·   ·   }(⎕NR ⍺){                    ⍝ function lines.⍞000D·   ·   ·   ·   fm to←⍵                  ⍝ target and replacement strings.⍞000D·   ·   ·   ·   cvex←{(+\fm⍷⍵)⊂⍵}fm,⍺    ⍝ partitioned at find points.⍞000D·   ·   ·   ·   (⍴to)↓∊{to,(⍴fm)↓⍵}¨cvex ⍝ collected with replacements.⍞000D·   ·   ·   }¨⊂⍵                         ⍝ each line of,⍞000D·   ·   }¨⊂⍵                             ⍝ each function.⍞000D·   },¨⍵                                 ⍝ find and replace vectors.⍞000D}⍞000D⍞000D⍝ Using heavier dots:⍞000D⍞000D      ''.''dots ⎕cr''fnrepl''⍞000Dfnrepl←{                                 ⍝ Function string replacement.⍞000D.   ⍺←⎕this                              ⍝ default current space.⍞000D.   1:shy←{⍵~⊂''''}⍺.{⎕ML←3                ⍝ shy rslt: changed function list.⍞000D.   .   (↓⎕NL 3 4){                      ⍝ target space, names of fns (and ops).⍞000D.   .   .   (⎕NR ⍺){                     ⍝ function source lines.⍞000D.   .   .   .   ⍺≡⍵:''''                   ⍝ no change: ignore.⍞000D.   .   .   .   ⊢⎕FX ⍵                   ⍝ name of changed fn.⍞000D.   .   .   }(⎕NR ⍺){                    ⍝ function lines.⍞000D.   .   .   .   fm to←⍵                  ⍝ target and replacement strings.⍞000D.   .   .   .   cvex←{(+\fm⍷⍵)⊂⍵}fm,⍺    ⍝ partitioned at find points.⍞000D.   .   .   .   (⍴to)↓∊{to,(⍴fm)↓⍵}¨cvex ⍝ collected with replacements.⍞000D.   .   .   }¨⊂⍵                         ⍝ each line of,⍞000D.   .   }¨⊂⍵                             ⍝ each function.⍞000D.   },¨⍵                                 ⍝ find and replace vectors.⍞000D}⍞000D⍞000D⍝ Using solid lines:⍞000D⍞000D      ''│''dots ⎕cr''fnrepl''⍞000Dfnrepl←{                                 ⍝ Function string replacement.⍞000D│   ⍺←⎕this                              ⍝ default current space.⍞000D│   1:shy←{⍵~⊂''''}⍺.{⎕ML←3                ⍝ shy rslt: changed function list.⍞000D│   │   (↓⎕NL 3 4){                      ⍝ target space, names of fns (and ops).⍞000D│   │   │   (⎕NR ⍺){                     ⍝ function source lines.⍞000D│   │   │   │   ⍺≡⍵:''''                   ⍝ no change: ignore.⍞000D│   │   │   │   ⊢⎕FX ⍵                   ⍝ name of changed fn.⍞000D│   │   │   }(⎕NR ⍺){                    ⍝ function lines.⍞000D│   │   │   │   fm to←⍵                  ⍝ target and replacement strings.⍞000D│   │   │   │   cvex←{(+\fm⍷⍵)⊂⍵}fm,⍺    ⍝ partitioned at find points.⍞000D│   │   │   │   (⍴to)↓∊{to,(⍴fm)↓⍵}¨cvex ⍝ collected with replacements.⍞000D│   │   │   }¨⊂⍵                         ⍝ each line of,⍞000D│   │   }¨⊂⍵                             ⍝ each function.⍞000D│   },¨⍵                                 ⍝ find and replace vectors.⍞000D}⍞000D⍞000D⍝ Traditional function with control structures:⍞000D⍞000D      )copy util FIND⍞000D⍞000D      dots ⎕cr''FIND''⍞000D{RSLT}←{DIRS}FIND NAMES;⎕IO;⎕ML                 ⍝ NAMES in workspaces in DIRS.⍞000D⎕IO ⎕ML←0                                       ⍝ {DIRS} defaults to WSPATH.⍞000D·⍞000D:With ⎕NS''''                                     ⍝ Temp space avoids ⎕CY clash.⍞000D·⍞000D·   names←(↓⎕FMT↑(⎕EX''NAMES'')/NAMES)~¨'' ''       ⍝ Copy names to avoid ⎕CY clash.⍞000D·⍞000D·   findstr←''{I4 {I4 I4} {I4 I4} {I4 I4} {I4 I4} {I4 I4} T[260] T[14]}''⍞000D·   ''first''⎕NA''I4 kernel32|FindFirstFileA <0T >'',findstr⍞000D·   ''fnext''⎕NA''U4 kernel32|FindNextFileA I4 >'',findstr⍞000D·   ''close''⎕NA''kernel32|FindClose I4''⍞000D·   sepr patn←{                                 ⍝ WSPATH separator and file pattern.⍞000D·   ·   wind←'';'' ''\*.dws''                       ⍝ windows style.⍞000D·   ·   unix←'':'' ''/*''                           ⍝ unix style⍞000D·   ·   ⍵⊃wind unix                             ⍝ select appropriate style.⍞000D·   }''M''=2⊃''.''⎕WG''APLVersion''                   ⍝ Windows / Unix.⍞000D·⍞000D·   found←0⍴⊂''''                                 ⍝ Accumulator for found list.⍞000D·⍞000D·   :Trap 1000                                  ⍝ Interrupt: result so far.⍞000D·   ·⍞000D·   ·   :For dir :In (⎕EX''DIRS'')/{              ⍝ For each directory in list.⍞000D·   ·   ·   2=⎕NC ⍵:(↓⎕FMT↑⍎⍵)~¨'' ''             ⍝ use supplied directory list.⍞000D·   ·   ·   sepr{⎕ML←3                          ⍝ partition WSPATH,⍞000D·   ·   ·   ·   (((1+⍵=⍺)⊂⍵)~¨⍺)~⊂''''            ⍝   at '';''.⍞000D·   ·   ·   }2 ⎕NQ''.'' ''GetEnvironment'' ''WSPATH'' ⍝ directory list from WSPATH.⍞000D·   ·   }''DIRS''⍞000D·   ·   ·⍞000D·   ·   ·   :For wsid :In {                     ⍝ For each ws in directory.⍞000D·   ·   ·   ·   handle stuff←first(⍵,patn)0     ⍝ first ''.dws'' file.⍞000D·   ·   ·   ·   handle≤0:0⍴⊂''''                  ⍝ bad handle: quit.⍞000D·   ·   ·   ·   trim←{(∧\⍵≠⊃⎕AV)/⍵}             ⍝ Trim name at null byte.⍞000D·   ·   ·   ·   handle{                         ⍝ Subsequent workspaces.⍞000D·   ·   ·   ·   ·   ok stuff←fnext ⍺ 0          ⍝ Next file.⍞000D·   ·   ·   ·   ·   ok≠1:⍵⊣close ⍺              ⍝ Bad status, quit.⍞000D·   ·   ·   ·   ·   name←trim 6⊃stuff           ⍝ File name.⍞000D·   ·   ·   ·   ·   ''.dse''≡¯4↑name:⍵⊣close ⍺    ⍝ .dse files cause a ⎕cy prob.⍞000D·   ·   ·   ·   ·   ⍺ ∇ ⍵,⊂name                 ⍝ OK: next wsid.⍞000D·   ·   ·   ·   }⊂trim 6⊃stuff                  ⍝ first wsid.⍞000D·   ·   ·   }dir                                ⍝ current directory.⍞000D·   ·   ·   ·⍞000D·   ·   ·   ·   slash←⊃(dir,''\'')∩''\/''           ⍝ user''s / or \ preference.⍞000D·   ·   ·   ·   path←dir,slash,wsid             ⍝ full directory name.⍞000D·   ·   ·   ·⍞000D·   ·   ·   ·   ''tmp''⎕NS''''                      ⍝ temp ns for copy.⍞000D·   ·   ·   ·   :Trap 11                        ⍝ trap ws version probs.⍞000D·   ·   ·   ·   ·   tmp.⎕CY path                ⍝ copy ws.⍞000D·   ·   ·   ·   ·   drop←1+⍴tmp.⎕CS''''           ⍝ size of temp ns name.⍞000D·   ·   ·   ·   ·   tmp∘{                       ⍝ traverse sub spaces.⍞000D·   ·   ·   ·   ·   ·   found,←⍺{               ⍝ found list extended by:⍞000D·   ·   ·   ·   ·   ·   ·   0≥⍺.⎕NC ⍵:⍬         ⍝ object not found: null.⍞000D·   ·   ·   ·   ·   ·   ·   name←drop↓(⍕⍺),''.'',⍵    ⍝ found object name.⍞000D·   ·   ·   ·   ·   ·   ·   ⎕←path,'' '',name     ⍝ display find.⍞000D·   ·   ·   ·   ·   ·   ·   ⊂path name          ⍝ new found list item.⍞000D·   ·   ·   ·   ·   ·   }⍵                      ⍝ for this namespace.⍞000D·   ·   ·   ·   ·   ·   0=⊃⍴⍺.⎕NL 9:            ⍝ no subspaces: done.⍞000D·   ·   ·   ·   ·   ·   ⍺.(⍎¨↓⎕NL 9)∇¨⊂⍵        ⍝ traverse each subspace.⍞000D·   ·   ·   ·   ·   }¨names                     ⍝ for each name.⍞000D·   ·   ·   ·   :EndTrap⍞000D·   ·   ·   ·   ⎕EX''tmp''                        ⍝ discard copied ws.⍞000D·   ·   ·   :EndFor⍞000D·   ·   :EndFor⍞000D·   :Else⍞000D·   ·   ⎕←''...''                                 ⍝ Acknowledge interruption.⍞000D·   :EndTrap⍞000D·                                               ⍝ ''RSLT'' may be ⎕CY''d fn:⍞000D·   RSLT←(⎕EX''RSLT'')/found                      ⍝ install result variable.⍞000D:EndWith⍞000D⍞000DSee also: refmt⍞000D⍞000DIndex:white dots|formatting, functions|name-clash problem|stuff' 
