'report ← {larg} (dfn ##.mdf) rarg           ⍝ Monitor D function.⍞000D⍞000DMdf applies its operand D function to (or between) its argument(s) then displays⍞000Dthe  function  with  a count of the number of times each line was executed. This⍞000Doutput  is  a useful indication of the "hot spots" in the subject function where⍞000Dit might pay to review the code in order to improve overall performance.⍞000D⍞000DBugs:⍞000D⍞000DThe  subject  operand  function  may not be more exotic than a named simple dfn.⍞000DIn particular, it may not be:⍞000D⍞000D    A derived function as in:⍞000D⍞000D        foo¨mdf 0⍞000D        foo∘goo mdf 0⍞000D        foo mdf mdf 0⍞000D⍞000D    An unnamed function such as:⍞000D⍞000D         {⍵ ⍵}mdf 0⍞000D⍞000DExamples:⍞000D⍞000D⍝ Monitored application of various functions:⍞000D⍞000D      osc mdf 27⍞000D112 osc←{               ⍝ Oscillate - probably returns 1.⍞000D112     1=⍵:1⍞000D111     2|⍵:∇ 1+3×⍵⍞000D 70         ∇ ⍵÷2⍞000D  0 }⍞000D⍞000D      105 gcd mdf 330⍞000D4 gcd←{       ⍝ Greatest common divisor.⍞000D4     ⍵=0:⍺⍞000D3     ⍵ ∇ ⍵|⍺⍞000D0 }⍞000D⍞000D      sieve mdf 2 to 100⍞000D5 sieve←{             ⍝ Sieve of Eratosthenes.⍞000D5     ⍺←⍬             ⍝ Default no primes yet.⍞000D5     nxt←1↑⍵         ⍝ Next prime, and⍞000D5     msk←×nxt|⍵      ⍝ ... mask of non-multiples.⍞000D5     ∧/1↓msk:⍺,⍵     ⍝ All non multiples - finished.⍞000D4     (⍺,nxt)∇ msk/⍵  ⍝ Sieve remainder.⍞000D0 }⍞000D⍞000D      queens mdf 8⍞000D  1 queens←{⎕ML ⎕IO←0                   ⍝ The N-queens problem.⍞000D  1⍞000D  1     search←{                        ⍝ Search for all solutions.⍞000D863         (⊂⍬)∊⍵:0⍴⊂⍬                 ⍝ stitched: abandon this branch.⍞000D583         0=⍴⍵:rmdups ⍺               ⍝ all done: solution!⍞000D537         hd tl←(⊃⍵)(1↓⍵)             ⍝ head ''n tail of remaining ranks.⍞000D537         next←⍺∘,¨hd                 ⍝ possible next steps.⍞000D537         rems←hd free¨⊂tl            ⍝ unchecked squares.⍞000D537         ↑,/next ∇¨rems              ⍝ ... in following ranks.⍞000D  0     }⍞000D  1⍞000D  1     cvex←(1+⍳⍵)×⊂¯1 0 1             ⍝ Checking vectors.⍞000D  1⍞000D  1     free←{⍵~¨⍺+(⍴⍵)↑cvex}           ⍝ Unchecked squares.⍞000D  1⍞000D  1     rmdups←{                        ⍝ Ignore duplicate solution.⍞000D 46         rots←{{⍒⍵}\4/⊂⍵}            ⍝ 4 rotations.⍞000D 46         refs←{{⍋⍵}\2/⊂⍵}            ⍝ 2 reflections.⍞000D 46         best←{(⊃⍋↑⍵)⊃⍵}             ⍝ best (=lowest) solution.⍞000D 46         all8←,↑refs¨rots ⍵          ⍝ all 8 orientations.⍞000D 46         (⍵≡best all8)⊃⍬(,⊂⍵)        ⍝ ignore if not best.⍞000D  0     }⍞000D  1⍞000D  1     fmt←{                           ⍝ Format solution.⍞000D  1         chars←''·⍟''[(↑⍵)∘.=⍳⍺]       ⍝ char array of placed queens.⍞000D  1         expd←1↓,↑⍺⍴⊂0 1             ⍝ expansion mask.⍞000D  1         ↑¨↓↓expd\chars              ⍝ vector of char matrices.⍞000D  0     }⍞000D  1⍞000D  1     squares←(⊂⍳⌈⍵÷2),1↓⍵⍴⊂⍳⍵        ⍝ initial squares⍞000D  1⍞000D  1     ⍵ fmt ⍬ search squares          ⍝ all distinct solutions.⍞000D  0 }⍞000D⍞000D      3 ack mdf 3                       ⍝ Ackermann''s function.⍞000D2432 ack←{⍞000D2432     ⍺=0:⍵+1⍞000D1244     ⍵=0:(⍺-1)∇ 1⍞000D1187         (⍺-1)∇ ⍺ ∇ ⍵-1⍞000D   0 }⍞000D⍞000DSee also: ticks cmpx time⍞000D⍞000DIndex:performance|monitor|timing|name-clash problem|Ackermann''s function⍞000DIndex;Ackermann W.' 
