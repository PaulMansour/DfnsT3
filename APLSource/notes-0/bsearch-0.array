'indx ← (fun ##.bsearch) range               ⍝ Binary search.⍞000D⍞000DRange  is  a  2-item  integer  vector  specifying a range of values. The operand⍞000Dfunction  takes  a  scalar  integer argument in this range and returns a boolean⍞000Dscalar result. By doing a "binary chop", bsearch finds the _lowest_ value in the⍞000Drange  for which (fun value) is true. The values might typically be indices into⍞000Da  data  stucture, for example a component file, where some property (fun value)⍞000Dis false for all components before a certain index, and true thereafter. For ex-⍞000Dample,  if  ''tie''  is  a  handle on a file whose components have been written in⍞000Dstrictly  chronological order (using only ⎕fappend), then the following express-⍞000Dion finds the index of the first component written after timestamp 5.5e10:⍞000D⍞000D    {5.5e10<3⊃⎕frdci tie ⍵} bsearch 2↑⎕fsize tie⍞000D⍞000DNote that the operand function, must be constructed so that it returns 0 for all⍞000Dvalues  up  to a certain point in the range, and 1 for those thereafter (~∨/1 0⍷⍞000Dfun¨range), otherwise the result is unpredictable.⍞000D⍞000DThe attraction of a binary search is that it makes only around 2⍟-/⌽range tests.⍞000DThis  is  important  if the cost of the test is significant: perhaps it incurs a⍞000Dfile  access or some lengthy calculation. If the file in the above example had a⍞000Dmillion  components,  bsearch  would find the index using only 20 or so calls on⍞000D⎕frdci.⍞000D⍞000DExamples:⍞000D⍞000D      {⍵≥5} bsearch 3 7⍞000D5⍞000D      {⍵≥9} bsearch 3 7⍞000D8⍞000D      {⍵≥1} bsearch 3 7⍞000D3⍞000D⍞000DIndex:binary search' 
