'rslt ← (func ##.until cond) argt            ⍝ Conditional function power.⍞000D⍞000DNB: From Dyalog V11, this operator is implemented as primitive ⍣.⍞000D⍞000DLeft  operand  [func]  is  applied  cumulatively  to argument [argt] until right⍞000Doperand  [cond],  applied  to the result, returns ''true''. Notice that, in common⍞000Dwith  the  :Repeat ··· :Until  control  structure,  the  test for termination is⍞000Dperformed  _after_  an  initial application of the left operand. This means that⍞000Dthe  operand  is  applied  once  even  if  the  original  argument satisfies the⍞000Dtermination  conditions.  Compare this with the →while← operator.⍞000D⍞000DExamples:⍞000D⍞000D      {⍵,''.''} until {60=⍴⍵} ''Note''          ⍝ Extend until 60 wide.⍞000DNote........................................................⍞000D⍞000D      ↓ until {1=⍴⍴⍵} 2 2 2 2⍴⍳16           ⍝ Split until vector.⍞000D┌─────────────────────┬────────────────────────────┐⍞000D│┌─────────┬─────────┐│┌────────────┬─────────────┐│⍞000D││┌───┬───┐│┌───┬───┐│││┌────┬─────┐│┌─────┬─────┐││⍞000D│││1 2│3 4│││5 6│7 8│││││9 10│11 12│││13 14│15 16│││⍞000D││└───┴───┘│└───┴───┘│││└────┴─────┘│└─────┴─────┘││⍞000D│└─────────┴─────────┘│└────────────┴─────────────┘│⍞000D└─────────────────────┴────────────────────────────┘⍞000D⍞000D      {⍵+1} until {1} 0                     ⍝ {⍵+1} applied once.⍞000D1⍞000D⍞000D      {1↓⍵} while {'' ''∊⍵}  ''hello world''    ⍝ While & until _concur_ if initial⍞000Dworld⍞000D      {1↓⍵} until {~'' ''∊⍵} ''hello world''    ⍝ ·· argument _escapes_ termination.⍞000Dworld⍞000D⍞000D      {1↓⍵} while {''⎕''∊⍵}  ''hello world''    ⍝ While & until _differ_ if initial⍞000Dhello world⍞000D      {1↓⍵} until {~''⎕''∊⍵} ''hello world''    ⍝ ·· argument _incurs_ termination.⍞000Dello world⍞000D⍞000DSee also: cond while limit pow traj⍞000D⍞000DIndex:conditional operator' 
