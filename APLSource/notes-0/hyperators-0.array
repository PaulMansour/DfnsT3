'Hyperators⍞000D¯¯¯¯¯¯¯¯¯¯⍞000DFunctions take arrays as arguments;⍞000D¯¯¯¯¯¯¯¯¯      ¯¯¯¯¯¯    ¯¯¯¯¯¯¯¯¯⍞000DOperators take functions (and arrays) as operands;⍞000D¯¯¯¯¯¯¯¯¯      ¯¯¯¯¯¯¯¯¯                 ¯¯¯¯¯¯¯¯⍞000DQ: What takes operators?⍞000D⍞000DHyperators take operators (and functions (and arrays)) as hyperands.⍞000D¯¯¯¯¯¯¯¯¯¯      ¯¯¯¯¯¯¯¯¯                                 ¯¯¯¯¯¯¯¯¯⍞000DClearly, this is a never-ending sequence.⍞000D⍞000D⍞000DA proof of the (need for the) existence of hyperators:⍞000D⍞000D0. We like to write tools that deal with  APL entities (arrays, functions, oper-⍞000D   ators) as subjects. For example, we like to:⍞000D⍞000D   - Format them by drawing boxes around subarrays and by aligning the comments⍞000D     within the source code of functions and operators.⍞000D⍞000D   - Search for text within the character representations of these entities.⍞000D⍞000D   - Determine the amount of worspace they occupy.⍞000D⍞000D   - ... and so on.⍞000D⍞000D1. APL entities may be named: "vec", "sum", "twice" or not: ''ab'', +/, {⍺⍺ ⍺⍺ ⍵}.⍞000D⍞000D2. For named entities, we have the rather ugly option of passing the name to the⍞000D   tool:  ⎕SIZE''vec'', ⎕AT''sum'', ⎕CR''twice'', ...⍞000D⍞000D3. For unnamed entities, we do not have this option.⍞000D⍞000D   - To examine an unnamed array, we must pass it as argument to the analysis⍞000D     function.             ¯¯¯¯¯                     ¯¯¯¯¯¯¯¯⍞000D     ¯¯¯¯¯¯¯¯⍞000D   - To examine an unnamed function, we must pass it as operand to an operator.⍞000D                           ¯¯¯¯¯¯¯¯                     ¯¯¯¯¯¯¯       ¯¯¯¯¯¯¯¯⍞000D   - To examine an unnamed operator, we must pass it as hyperand to a hyperator.⍞000D                           ¯¯¯¯¯¯¯¯                     ¯¯¯¯¯¯¯¯      ¯¯¯¯¯¯¯¯¯⍞000D   - ... and so on.⍞000D⍞000DQ.E.D.⍞000D⍞000DIndex:hyperator' 
