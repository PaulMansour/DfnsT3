'cmat ← {gap←1 {max←⎕pw}} ##.cols items      ⍝ Multi-column display.⍞000D⍞000DSometimes it''s easier to peruse an alphabetic list of items if they are arranged⍞000Dvertically in columns (where typically, the last  column  will  be  incomplete).⍞000D[cols]  returns a multi-column character-matrix format of the items in its right⍞000Dargument.⍞000D⍞000D[items]  may  be a vector or a matrix. In the latter case, _rows_ of the matrix,⍞000Dwith trailing blanks removed, are taken as the items of the list.⍞000D⍞000DOptional  left  arguments  [gap] (default 1) and [max] (default ⎕pw) specify the⍞000Dinter-column-gap and maximum "print width" of the display respectively.⍞000D⍞000DIf  any  of  the items are wider than [max], the result is a single column, with⍞000Dlonger items truncated to [max] characters.⍞000D⍞000DCols is similar to the Unix shell commmand "c -v".⍞000D⍞000D        1 20 cols ⍳26           ⍝ width ≤ 20-column format of vector.⍞000D    1 5  9 13 17 21 25⍞000D    2 6 10 14 18 22 26⍞000D    3 7 11 15 19 23⍞000D    4 8 12 16 20 24⍞000D⍞000D        0 8 cols ⎕a             ⍝ width ≤ 8-column format of vector.⍞000D    AEIMQUY⍞000D    BFJNRVZ⍞000D    CGKOSW⍞000D    DHLPTX⍞000D⍞000D        cols ⎕nl 4              ⍝ width ≤ ⎕pw-column format of char matrix.⍞000D    Cut      ascana  case   each    foldl logic  nats rats     rows  time  vwise⍞000D    UndoRedo avl     cf     else    for   ltrav  of   ratsum   sam   trace while⍞000D    _fk      bags    cond   file    invr  mdf    or   ravt     saw   traj⍞000D    acc      big     cxdraw fk      kcell memo   perv redblack sbst  trav⍞000D    and      bsearch dft    fk_     limit merge  pow  repl     splay until⍞000D    ascan    bt      do     fnarray lof   merge2 pred roman    ticks vof⍞000D⍞000DTechnical note:⍞000D⍞000DThere  is  a circular problem in deciding the optimal number of columns in which⍞000Dto arrange our vector:  until the columns are arranged, we don''t know which will⍞000Dbe the widest item in each column and so how wide the column as a whole will be;⍞000Dand  until  we  know the width of each column, we don''t know how many columns to⍞000Duse.⍞000D⍞000DHere  is  an example of a vector whose 2-column arrangement is wider than its 3-⍞000Dcolumn arrangement:⍞000D⍞000D    vec ← 1 1 1000000 1000000 1 1⍞000D⍞000D    ⍉2 3⍴vec        ⍝ 2 cols → width 15.⍞000D      1 1000000⍞000D      1       1⍞000D1000000       1⍞000D⍞000D    ⍉3 2⍴vec        ⍝ 3 cols → width 11.⍞000D1 1000000 1⍞000D1 1000000 1⍞000D⍞000DFor  this  reason, it is not easy to "home in" on an optimal solution using, for⍞000Dexample, a binary search (→bsearch←) technique. Instead, we search one column at⍞000Da time. We could equally well search a row at a time, but for large lists, where⍞000Dperformance  might  be a consideration, the number of rows would, typically, far⍞000Dexceed the maximum "print width".⍞000D⍞000DThe  not-very-subtle solution adopted here is to start with the maximum possible⍞000Dnumber  of columns and to keep reducing this number until the gap-separated col-⍞000Dumns  would  fit within the required width. We don''t need to use the items them-⍞000Dselves for this exploration; a vector of their lengths will suffice.⍞000D⍞000DInner  function  "maxcols"  calculates the maximum number of columns. It employs⍞000Da small optimisation, which allows us to avoid some of the calculation.  For ex-⍞000Dample,  trying  to  arrange  9 items down 4 columns is infeasible because 2 rows⍞000Dwould require 5 columns and 3 rows would need only 3.⍞000D⍞000DGiven  "ni",  the  number  of  items and ⍵, the number of columns to attempt, we⍞000Dcalculate the implied number of rows together with the "excess" number of unused⍞000Drows in the final, right-most, column. Notice the use of APL''s encode "⊤" funct-⍞000Dion with a negative argument:⍞000D⍞000D    nr xs←|0 ⍵⊤-ni              ⍝ number of rows and excess.⍞000D    xs≥nr:∇ ⍵-1                 ⍝ one or more empty columns: ignore.⍞000D⍞000DFor example, to see if we can arrange 9 items along 4 rows, we might first think⍞000Dto code:⍞000D⍞000D    0 4⊤9       ⍝ 2 complete rows, remainder 1 item.⍞000D2 1⍞000D⍞000DBut this is not quite right; we need to know how many rows (complete or not) are⍞000Doccupied, together with how many rows would be left unoccupied in the final col-⍞000Dumn(s).  If  the  excess is equal to or greater than the number of rows, then we⍞000Dcan  ignore  this  (⍵-columns)  case as it is identical to a smaller value of ⍵,⍞000Dwhich we will encounter later. Instead, we code:⍞000D⍞000D    |0 4⊤-9     ⍝ 3 used rows, with 3 free rows in the final column (no good).⍞000D3 3⍞000D⍞000D... representing an infeasible arrangement, which may be ignored.⍞000D⍞000DExamples:⍞000D⍞000D    cols ⍳123               ⍝ default multi-column display of vector.⍞000D1  6 11 16 21 26 31 36 41 46 51 56 61 66 71 76 81 86 91  96 101 106 111 116 121⍞000D2  7 12 17 22 27 32 37 42 47 52 57 62 67 72 77 82 87 92  97 102 107 112 117 122⍞000D3  8 13 18 23 28 33 38 43 48 53 58 63 68 73 78 83 88 93  98 103 108 113 118 123⍞000D4  9 14 19 24 29 34 39 44 49 54 59 64 69 74 79 84 89 94  99 104 109 114 119⍞000D5 10 15 20 25 30 35 40 45 50 55 60 65 70 75 80 85 90 95 100 105 110 115 120⍞000D⍞000D    2 cols ⍳123             ⍝ ..    ..   with 2-blank inter-column gap.⍞000D1   8  15  22  29  36  43  50  57  64  71  78  85  92   99  106  113  120⍞000D2   9  16  23  30  37  44  51  58  65  72  79  86  93  100  107  114  121⍞000D3  10  17  24  31  38  45  52  59  66  73  80  87  94  101  108  115  122⍞000D4  11  18  25  32  39  46  53  60  67  74  81  88  95  102  109  116  123⍞000D5  12  19  26  33  40  47  54  61  68  75  82  89  96  103  110  117⍞000D6  13  20  27  34  41  48  55  62  69  76  83  90  97  104  111  118⍞000D7  14  21  28  35  42  49  56  63  70  77  84  91  98  105  112  119⍞000D⍞000D    2 50 cols ⍳123          ⍝ ..    ..  restricted to 50 columns.⍞000D 1  12  23  34  45  56  67  78  89  100  111  122⍞000D 2  13  24  35  46  57  68  79  90  101  112  123⍞000D 3  14  25  36  47  58  69  80  91  102  113⍞000D 4  15  26  37  48  59  70  81  92  103  114⍞000D 5  16  27  38  49  60  71  82  93  104  115⍞000D 6  17  28  39  50  61  72  83  94  105  116⍞000D 7  18  29  40  51  62  73  84  95  106  117⍞000D 8  19  30  41  52  63  74  85  96  107  118⍞000D 9  20  31  42  53  64  75  86  97  108  119⍞000D10  21  32  43  54  65  76  87  98  109  120⍞000D11  22  33  44  55  66  77  88  99  110  121⍞000D⍞000D    cols ⎕nl 3 4            ⍝ multi-column display of character matrix.⍞000DCholesky  cal      dtb          index   memo    pco      sam       trav⍞000DCut       case     dxb          inslink merge   perv     saw       tree⍞000DNormRand  cf       each         insnode merge2  phinary  sbst      tview⍞000DUndoRedo  cfract   easter       int     mmind   pmat     scc       type⍞000DX         chksum   efract       invr    mns     polar    search    ucase⍞000D_fk       cmat     else         iotag   morse   pow      segs      unify⍞000Dacc       cmpx     enlist       isdfn   mp3     pred     select    uns⍞000Dadic      cols     esh          joy     mscan   putfile  shannon   until⍞000Dalext     colsum   exit         just    mtrim   queens   sieve     unwrap⍞000Dalrem     compidn  factorial    justify nats    quzzle   span      up⍞000Dalrems    cond     factors      k6174   nc      range    splay     utf8get⍞000Dalval     cxdraw   fibonacci    kball   ncpath  rank     squad     utf8put⍞000Dalvals    dab      file         kcell   nicediv rational squeeze   vof⍞000Dambiv     date     filefind     key     nlines  rats     ss        von⍞000Dand       days     find         ksphere nspack  ratsum   ssmat     vtol⍞000Dapportion deb      fix          kt      of      ravt     ssword    vtrim⍞000Dary       dec      fk           lcase   or      redblack stamps    vwise⍞000Dascan     det      fk_          le      osc     refmatch stdists   wcost⍞000Dascana    dfspan   fnarray      life    pack    refmt    stpath    while⍞000Dassign    dft      fndiff       limit   pack4   refpath  stpaths   wmst⍞000Dattrib    dice     fnrefs       lisp    packB   refs     subs      words⍞000Davl       din      fnrepl       list    packD   refws    subvec    wpath⍞000Dbaby      disp     foldl        lof     packH   remlink  sudoku    wrap⍞000Dbags      display  for          logic   packN   remnode  test      wrapnote⍞000Dbase64    displayr from         ltov    packQ   rep      tfmt      wsdiff⍞000Dbayes     displays gauss_jordan ltrav   packR   repl     ticks     wsmerge⍞000Dbf        dist     gcd          m91     packS   ripple   time      wspan⍞000Dbig       dlb      getfile      mac     packT   rmcm     timestamp wsreq⍞000Dbirthday  dmb      gperm        match   packU   roman    tnest     xhtml⍞000Dbox       do       hex          mayan   packX   root     to        xpower⍞000Dbsearch   dots     hexdump      maze    packZ   roots    tokens    xrefs⍞000Dbt        draw     hexf         mdf     parse   rows     trace     xtabs⍞000Dcache     dscan    htx          mean    path    rr       traj      xtimes⍞000D⍞000D    class←{'' ''~⍨⍵,''.'',⍕⎕nc ⍵}   ⍝ name classification.⍞000D⍞000D    class¨ ''display'' ''memo''     ⍝ fns.3 ops.4.⍞000D display.3  memo.4⍞000D⍞000D    cols class¨ ↓⎕nl 3 4        ⍝ classified names.⍞000DCholesky.3  cxdraw.4    for.4          merge2.4   ratsum.4   time.4⍞000DCut.4       dab.3       from.3         mmind.3    ravt.4     timestamp.3⍞000DNormRand.3  date.3      gauss_jordan.3 mns.3      redblack.4 tnest.3⍞000DUndoRedo.4  days.3      gcd.3          morse.3    refmatch.3 to.3⍞000DX.3         deb.3       getfile.3      mp3.3      refmt.3    tokens.3⍞000D_fk.4       dec.3       gperm.3        mscan.3    refpath.3  trace.4⍞000Dacc.4       det.3       hex.3          mtrim.3    refs.3     traj.4⍞000Dadic.3      dfspan.3    hexdump.3      nats.4     refws.3    trav.4⍞000Dalext.3     dft.4       hexf.3         nc.3       remlink.3  tree.3⍞000Dalrem.3     dice.3      htx.3          ncpath.3   remnode.3  tview.3⍞000Dalrems.3    din.3       index.3        nicediv.3  rep.3      type.3⍞000Dalval.3     disp.3      inslink.3      nlines.3   repl.4     ucase.3⍞000Dalvals.3    display.3   insnode.3      nspack.3   ripple.3   unify.3⍞000Dambiv.3     displayr.3  int.3          of.4       rmcm.3     uns.3⍞000Dand.4       displays.3  invr.4         or.4       roman.4    until.4⍞000Dapportion.3 dist.3      iotag.3        osc.3      root.3     unwrap.3⍞000Dary.3       dlb.3       isdfn.3        pack.3     roots.3    up.3⍞000Dascan.4     dmb.3       joy.3          pack4.3    rows.4     utf8get.3⍞000Dascana.4    do.4        just.3         packB.3    rr.3       utf8put.3⍞000Dassign.3    dots.3      justify.3      packD.3    sam.4      vof.4⍞000Dattrib.3    draw.3      k6174.3        packH.3    saw.4      von.3⍞000Davl.4       dscan.3     kball.3        packN.3    sbst.4     vtol.3⍞000Dbaby.3      dtb.3       kcell.4        packQ.3    scc.3      vtrim.3⍞000Dbags.4      dxb.3       key.4          packR.3    search.3   vwise.4⍞000Dbase64.3    each.4      ksphere.3      packS.3    segs.3     wcost.3⍞000Dbayes.3     easter.3    kt.3           packT.3    select.3   while.4⍞000Dbf.3        efract.3    lcase.3        packU.3    shannon.3  wmst.3⍞000Dbig.4       else.4      le.3           packX.3    sieve.3    words.3⍞000Dbirthday.3  enlist.3    life.3         packZ.3    span.3     wpath.3⍞000Dbox.3       esh.3       limit.4        parse.3    splay.4    wrap.3⍞000Dbsearch.4   exit.3      lisp.3         path.3     squad.4    wrapnote.3⍞000Dbt.4        factorial.3 list.3         pco.3      squeeze.3  wsdiff.3⍞000Dcache.3     factors.3   lof.4          perv.4     ss.3       wsmerge.3⍞000Dcal.3       fibonacci.3 logic.4        phinary.3  ssmat.3    wspan.3⍞000Dcase.4      file.4      ltov.3         pmat.3     ssword.3   wsreq.3⍞000Dcf.4        filefind.3  ltrav.4        polar.3    stamps.3   xhtml.3⍞000Dcfract.3    find.3      m91.3          pow.4      stdists.3  xpower.3⍞000Dchksum.3    fix.3       mac.3          pred.4     stpath.3   xrefs.3⍞000Dclass.3     fk.4        match.3        putfile.3  stpaths.3  xtabs.3⍞000Dcmat.3      fk_.4       mayan.3        queens.3   subs.3     xtimes.3⍞000Dcmpx.3      fnarray.4   maze.3         quzzle.3   subvec.3⍞000Dcols.3      fndiff.3    mdf.4          range.3    sudoku.3⍞000Dcolsum.3    fnrefs.3    mean.3         rank.4     test.3⍞000Dcompidn.3   fnrepl.3    memo.4         rational.3 tfmt.3⍞000Dcond.4      foldl.4     merge.4        rats.4     ticks.4⍞000D⍞000D    ∪{1 ⍵ cols ⍳10}¨0 to 20             ⍝ all possible wrappings of 1 .. 10.⍞000D┌┬─┬──┬────┬──────┬────────┬──────────┬────────────────────┐⍞000D││ │ 1│1  6│1 5  9│1 4 7 10│1 3 5 7  9│1 2 3 4 5 6 7 8 9 10│⍞000D││ │ 2│2  7│2 6 10│2 5 8   │2 4 6 8 10│                    │⍞000D││ │ 3│3  8│3 7   │3 6 9   │          │                    │⍞000D││ │ 4│4  9│4 8   │        │          │                    │⍞000D││ │ 5│5 10│      │        │          │                    │⍞000D││ │ 6│    │      │        │          │                    │⍞000D││ │ 7│    │      │        │          │                    │⍞000D││ │ 8│    │      │        │          │                    │⍞000D││ │ 9│    │      │        │          │                    │⍞000D││1│10│    │      │        │          │                    │⍞000D└┴─┴──┴────┴──────┴────────┴──────────┴────────────────────┘⍞000D⍞000D    1 12 cols 2/10*0 6 0        ⍝ tricky case.⍞000D1 1000000 1⍞000D1 1000000 1⍞000D⍞000DSee also: wrap tree' 
