'rslt ← {larg} (op ##.splay) rarg            ⍝ Splay trees.⍞000D⍞000D     T∆ ← T ∪ splay (key val)   ⍝ tree ⍺ with key=val ⍵.⍞000D     T∆ ← T ~ splay key         ⍝ tree ⍺ without key ⍵.⍞000D     T∆ ← T ⍎ splay key         ⍝ value for key ⍵ in tree ⍺.⍞000D    dep ← T ≡ splay key         ⍝ depth of key ⍵ in tree ⍺.⍞000D    fmt ←   ⍕ splay T           ⍝ format of tree ⍵.⍞000D    vec ←   ∊ splay T           ⍝ enlist of tree ⍵.⍞000D    chk ←   ? splay T           ⍝ stats for tree ⍵: ok size mean_depth height.⍞000D⍞000DSee →BST←⍞000D⍞000DA splay tree is a self-balancing binary search tree; each time a node is access-⍞000Ded,  it  is rotated nearer to the root. This mean that frequently accessed nodes⍞000Dwind up with shorter search paths.⍞000D⍞000DUnlike  →avl← and →redblack← trees, splay trees are not maintained in a state of⍞000Dreasonable  balance.  Instead,  nodes  with  frequently  accessed keys _tend_ to⍞000Dmigrate towards the root, which _tends_ to give them shorter access times.⍞000D⍞000DThe performance of a splay tree may not be as optimal as one of its more complex⍞000Drelatives, but its implementation is considerably simpler.⍞000D⍞000DNode Access⍞000D-----------⍞000DIn the following, node [A] is accessed.  There are three cases, × two left-right⍞000Dmirrow-image orientations.⍞000D⍞000D[0] Node [A] is the root node: no change.⍞000D⍞000D[1] Node [A] is the left (right) child of the root.⍞000D⍞000D[2] Node [A] is the left (right) child of a left (right) child.⍞000D                    ¯¯¯¯                    ¯¯¯¯⍞000D[3] Node [A] is the right (left) child of a left (right) child.⍞000D                    ¯¯¯¯¯                   ¯¯¯¯⍞000DCases [1 2 3] are summarised in the following diagram:⍞000D⍞000D          <--- m i r r o r   i m a g e s --->⍞000D    ┌──────────────────────┬────────────────────────┐⍞000D[1] │      B      [A]      │   B              [A]   │⍞000D    │     / \  →  / \      │  / \      →      / \   │⍞000D    │   [A]  r   p   B     │ r  [A]          B   p  │⍞000D    │   / \         / \    │    / \         / \     │⍞000D    │  p   q       q   r   │   q   p       r   q    │⍞000D    ├──────────────────────┼────────────────────────┤⍞000D[2] │      C      [A]      │   C              [A]   │⍞000D    │     / \  →  / \      │  / \      →      / \   │⍞000D    │    B   s   p   B     │ s   B           B   p  │⍞000D    │   / \         / \    │    / \         / \     │⍞000D    │ [A]  r       q   C   │   r  [A]      C   q    │⍞000D    │ / \             / \  │      / \     / \       │⍞000D    │p   q           r   s │     q   p   s   r      │⍞000D    ├──────────────────────┼────────────────────────┤⍞000D[3] │    C         [A]     │   C             [A]    │⍞000D    │   / \    →   / \     │  / \      →     / \    │⍞000D    │  B   s      /   \    │ s   B          /   \   │⍞000D    │ / \        B     C   │    / \        C     B  │⍞000D    │p  [A]     / \   / \  │  [A]  p      / \   / \ │⍞000D    │   / \    p   q r   s │  / \        s   r q   p│⍞000D    │  q   r               │ r   q                  │⍞000D    └──────────────────────┴────────────────────────┘⍞000D⍞000DNode removal⍞000D------------⍞000D[splay] uses the "quicker" method of node removal. See →BST←.⍞000D⍞000DTechnical notes⍞000D---------------⍞000DThe tree is implemented as the pair-of-pairs: (key val) (lft rgt)⍞000D⍞000D    key: node key⍞000D    val: node value⍞000D    lft: left subtree or 0⍞000D    rgt: right subtree or 0⍞000D⍞000DThe two double rotations are coded by applying function [rot] twice. If speed is⍞000Dcritical, we could code them directly as follows:⍞000D⍞000D    rotrr←{                             ⍝ double ⍵-⍵-wise rotion of tree ⍺.⍞000D        C(BAr s)←⍵ wise\⍺               ⍝        C       A⍞000D        B(Apq r)←⍵ wise\BAr             ⍝       / \  →  / \⍞000D        A(p q)←⍵ wise\Apq               ⍝      B   s   p   B⍞000D                                        ⍝     / \         / \⍞000D        Crs←⍵ wise\C(r s)               ⍝    A   r       q   C⍞000D        BqC←⍵ wise\B(q Crs)             ⍝   / \             / \⍞000D        ⍵ wise\A(p BqC)                 ⍝  p   q           r   s⍞000D    }⍞000D⍞000D    rotrl←{                             ⍝ double ⍵-¯⍵-rotation of tree ⍺.⍞000D        C(BpA s)←⍵ wise\⍺               ⍝      C          A⍞000D        B(p Aqr)←⍵ wise\BpA             ⍝     / \    →   / \⍞000D        A(q r)←⍵ wise\Aqr               ⍝    B   s      /   \⍞000D                                        ⍝   / \        B     C⍞000D        Bpq←⍵ wise\B(p q)               ⍝  p   A      / \   / \⍞000D        Crs←⍵ wise\C(r s)               ⍝     / \    p   q r   s⍞000D        ⍵ wise\A(Bpq Crs)               ⍝    q   r⍞000D    }⍞000D⍞000DNotice that function ⍵-wise is applied under scan (\),  which means that it aff-⍞000Dects only the second item of the node pair (key val)(lft rgt).⍞000D⍞000DReferences⍞000D----------⍞000Dhttp://en.wikipedia.org/wiki/Splay_tree⍞000D⍞000DExamples⍞000D--------⍞000D⍞000D⍝ key=value pairs:⍞000D⍞000D    pairs ← (''one''1) (''two''2) (''three''3) (''four''4) (''five''5) (''six''6) (''seven''7)⍞000D⍞000D    tt ← 0 ∪splay foldl pairs   ⍝ insert key=val pairs into a splay tree.⍞000D⍞000D    display ⍕splay tt           ⍝ show resulting tree.⍞000D┌→────────────────────────────────┐⍞000D↓            ┌five=5              │⍞000D│     ┌four=4┘                    │⍞000D│one=1┤                           │⍞000D│     │                   ┌seven=7│⍞000D│     │             ┌six=6┘       │⍞000D│     │     ┌three=3┘             │⍞000D│     └two=2┘                     │⍞000D└─────────────────────────────────┘⍞000D⍞000D    ''seven'' ≡splay tt               ⍝ depth of key ''seven''.⍞000D5⍞000D    val tt ← ''seven'' ⍎splay tt      ⍝ first access of key ''seven'',⍞000D⍞000D    display ⍕splay tt               ⍝   moves it towards the root.⍞000D┌→────────────────────────────────┐⍞000D↓            ┌five=5              │⍞000D│     ┌four=4┘                    │⍞000D│one=1┤                           │⍞000D│     │     ┌seven=7┐             │⍞000D│     │     │       └six=6┐       │⍞000D│     │     │             └three=3│⍞000D│     └two=2┘                     │⍞000D└─────────────────────────────────┘⍞000D⍞000D    ''seven'' ≡splay tt               ⍝ new depth of key ''seven''.⍞000D3⍞000D    val tt ← ''seven'' ⍎splay tt      ⍝ second access of key ''seven'',⍞000D⍞000D    display ⍕splay tt               ⍝   moves it to the root.⍞000D┌→──────────────────────────┐⍞000D↓                    ┌five=5│⍞000D│             ┌four=4┘      │⍞000D│       ┌one=1┘             │⍞000D│seven=7┤                   │⍞000D│       │     ┌six=6┐       │⍞000D│       │     │     └three=3│⍞000D│       └two=2┘             │⍞000D└───────────────────────────┘⍞000D⍞000D    ''seven'' ≡splay tt           ⍝ depth of key ''seven''.⍞000D1⍞000D    ?splay tt                   ⍝ tree is: ok size=7, mean_depth=2, height=4.⍞000D1 7 2 4⍞000D⍞000D    tt ← tt ~splay ''seven''      ⍝ tree with key ''seven'' removed.⍞000D⍞000D    display ⍕splay tt⍞000D┌→────────────────────────┐⍞000D↓                  ┌five=5│⍞000D│           ┌four=4┘      │⍞000D│     ┌one=1┘             │⍞000D│six=6┤                   │⍞000D│     │     ┌three=3      │⍞000D│     └two=2┘             │⍞000D└─────────────────────────┘⍞000D⍞000D    ∊ splay tt                  ⍝ enlist of tree key=val pairs.⍞000D┌────────┬────────┬───────┬───────┬─────────┬───────┐⍞000D│┌────┬─┐│┌────┬─┐│┌───┬─┐│┌───┬─┐│┌─────┬─┐│┌───┬─┐│⍞000D││five│5│││four│4│││one│1│││six│6│││three│3│││two│2││⍞000D│└────┴─┘│└────┴─┘│└───┴─┘│└───┴─┘│└─────┴─┘│└───┴─┘│⍞000D└────────┴────────┴───────┴───────┴─────────┴───────┘⍞000D⍞000D⍝ Notice how repeated retrieval of a particular key⍞000D⍝ lifts its node towards the root:⍞000D⍞000D    ↑⍕splay\¨↑∘(⍎splay/)traj 10,⊂0 ∪splay foldl ⍳10             ⍝ see →traj←⍞000D┌──┬─────────────────────────────────────────┐⍞000D│10│1=1┐                                     │⍞000D│  │   └2=2┐                                 │⍞000D│  │       └3=3┐                             │⍞000D│  │           └4=4┐                         │⍞000D│  │               └5=5┐                     │⍞000D│  │                   └6=6┐                 │⍞000D│  │                       └7=7┐             │⍞000D│  │                           └8=8┐         │⍞000D│  │                               └9=9┐     │⍞000D│  │                                   └10=10│⍞000D├──┼─────────────────────────────────────────┤⍞000D│10│1=1┐                                     │⍞000D│  │   └2=2┐                                 │⍞000D│  │       └3=3┐                             │⍞000D│  │           └4=4┐                         │⍞000D│  │               └5=5┐                     │⍞000D│  │                   └6=6┐                 │⍞000D│  │                       └7=7┐             │⍞000D│  │                           │         ┌8=8│⍞000D│  │                           │     ┌9=9┘   │⍞000D│  │                           └10=10┘       │⍞000D├──┼─────────────────────────────────────────┤⍞000D│10│1=1┐                                     │⍞000D│  │   └2=2┐                                 │⍞000D│  │       └3=3┐                             │⍞000D│  │           └4=4┐                         │⍞000D│  │               └5=5┐                     │⍞000D│  │                   │         ┌6=6        │⍞000D│  │                   │     ┌7=7┤           │⍞000D│  │                   │     │   │   ┌8=8    │⍞000D│  │                   │     │   └9=9┘       │⍞000D│  │                   └10=10┘               │⍞000D├──┼─────────────────────────────────────────┤⍞000D│10│1=1┐                                     │⍞000D│  │   └2=2┐                                 │⍞000D│  │       └3=3┐                             │⍞000D│  │           │         ┌4=4                │⍞000D│  │           │     ┌5=5┤                   │⍞000D│  │           │     │   │   ┌6=6            │⍞000D│  │           │     │   └7=7┤               │⍞000D│  │           │     │       │   ┌8=8        │⍞000D│  │           │     │       └9=9┘           │⍞000D│  │           └10=10┘                       │⍞000D├──┼─────────────────────────────────────────┤⍞000D│10│1=1┐                                     │⍞000D│  │   │         ┌2=2                        │⍞000D│  │   │     ┌3=3┤                           │⍞000D│  │   │     │   │   ┌4=4                    │⍞000D│  │   │     │   └5=5┤                       │⍞000D│  │   │     │       │   ┌6=6                │⍞000D│  │   │     │       └7=7┤                   │⍞000D│  │   │     │           │   ┌8=8            │⍞000D│  │   │     │           └9=9┘               │⍞000D│  │   └10=10┘                               │⍞000D├──┼─────────────────────────────────────────┤⍞000D│10│     ┌1=1┐                               │⍞000D│  │     │   │   ┌2=2                        │⍞000D│  │     │   └3=3┤                           │⍞000D│  │     │       │   ┌4=4                    │⍞000D│  │     │       └5=5┤                       │⍞000D│  │     │           │   ┌6=6                │⍞000D│  │     │           └7=7┤                   │⍞000D│  │     │               │   ┌8=8            │⍞000D│  │     │               └9=9┘               │⍞000D│  │10=10┘                                   │⍞000D└──┴─────────────────────────────────────────┘⍞000D⍞000DSee also: BST alists sbst avl redblack foldl traj⍞000D⍞000DIndex:tree|binary search tree|enlist' 
