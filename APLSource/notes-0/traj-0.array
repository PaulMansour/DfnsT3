'vec ← (fun ##.traj) arg                     ⍝ Function limit ''trajectory''.⍞000D⍞000DSimilar to →limit←, the operator applies its function operand cumulatively until⍞000Dan  argument that has been used before is detected. The vector of distinct argu-⍞000Dments  together with the final result is the trajectory of the function. As with⍞000D→limit←,  a  dyadic  function  can be bound with one argument to provide the re-⍞000Dquired monadic operand function.⍞000D⍞000DTechnical note:⍞000D⍞000DWith the introduction of ⍣, the primitive power operator, this operator could be⍞000Dcoded:⍞000D⍞000D    traj←{⍞000D        ¯1↓⍺⍺{⍵,⊂⍺⍺⊃⌽⍵}⍣{(⊂⊃⌽⍺)∊⍵}⊂⍵⍞000D    }⍞000D⍞000DExamples:⍞000D⍞000D      {2|⍵:1+3×⍵ ⋄ ⍵÷2}traj 7               ⍝ Trajectory of osc function.⍞000D7 22 11 34 17 52 26 13 40 20 10 5 16 8 4 2 1⍞000D⍞000DThis operator gives the next approximation in a Newton-Raphson iteration:⍞000D⍞000D⍞000D      nr←{⍺←⎕CT                     ⍝ Newton-Raphson.⍞000D          y ∆y←⍺⍺¨(⊂⍵)×1+0 ⍺        ⍝ f(x), f(x+∆)⍞000D          ⍵+(⍺×y)÷y-∆y              ⍝ next estimate.⍞000D      }⍞000D⍞000D      2∘○ nr traj 1.5       ⍝ Root of Cos(x) near 1.5.⍞000D1.5 1.570990983 1.570796171 1.570796327 1.570796327 1.570796327⍞000D⍞000D      1e¯3∘(2∘○ nr)traj 1.5 ⍝ Same again but with an explicit increment.⍞000D1.5 1.570912342 1.570796327 1.570796327⍞000D⍞000D⍝ Nicolas Delcros reminds us of Gérard Langlet''s algorithm for generating⍞000D⍝ a Sierpinski triangle by repeated applications of ≠\:⍞000D⍞000D    '' *''[⎕io+↑≠\traj 32⍴1]          ⍝ Sierpinski triangle.⍞000D********************************⍞000D* * * * * * * * * * * * * * * *⍞000D**  **  **  **  **  **  **  **⍞000D*   *   *   *   *   *   *   *⍞000D****    ****    ****    ****⍞000D* *     * *     * *     * *⍞000D**      **      **      **⍞000D*       *       *       *⍞000D********        ********⍞000D* * * *         * * * *⍞000D**  **          **  **⍞000D*   *           *   *⍞000D****            ****⍞000D* *             * *⍞000D**              **⍞000D*               *⍞000D****************⍞000D* * * * * * * *⍞000D**  **  **  **⍞000D*   *   *   *⍞000D****    ****⍞000D* *     * *⍞000D**      **⍞000D*       *⍞000D********⍞000D* * * *⍞000D**  **⍞000D*   *⍞000D****⍞000D* *⍞000D**⍞000D*⍞000D⍞000DSee also: acc limit pow while until osc life⍞000D⍞000DIndex:trajectory|debugging|Newton-Raphson|sequence⍞000DIndex;Langlet G.|Sierpinski W.|Delcros N.' 
