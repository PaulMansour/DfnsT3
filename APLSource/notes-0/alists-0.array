'value  ← alist ##.alval name            ⍝ Value of name ⍵ in assoc list ⍺.⍞000Dalist  ← alist ##.alext (name value)    ⍝ Assoc list ⍺ extended with pair ⍵.⍞000Dalist  ← alist ##.alrem name            ⍝ Assoc list ⍺ with name ⍵ removed.⍞000Dvalues ← alist ##.alvals names          ⍝ Values of names ⍵ in assoc list ⍺.⍞000Dalist  ← alist ##.alrems names          ⍝ Assoc list ⍺ with names ⍵ removed.⍞000D⍞000DAn  association list (AKA: symbol table, dictionary, look-up table) is a classic⍞000Dand  generally  useful  structure. It is implemented as a pair of (names values)⍞000Dvectors. Each item in the names vector would typically be a character vector but⍞000Dit could be anything.⍞000D⍞000DAn example might be an object owned by each of a number of people:⍞000D⍞000D    stuff ← (''milly'' ''molly'' ''may'') (''star'' ''thing'' ''stone'')⍞000D⍞000D    stuff alval ''may''                           ⍝ thing associated with May.⍞000Dstone⍞000D⍞000D    stuff alvals ''may'' ''milly''                  ⍝ May and Milly''s things.⍞000D stone  star⍞000D⍞000D[alext] and [alrem] extend and remove names from the list, respectively.⍞000D⍞000D    ⊢ stuff ← stuff alext ''maggie'' ''shell''      ⍝ add Maggie and her thing.⍞000D┌────────────────────────┬────────────────────────┐⍞000D│┌──────┬─────┬─────┬───┐│┌─────┬────┬─────┬─────┐│⍞000D││maggie│milly│molly│may│││shell│star│thing│stone││⍞000D│└──────┴─────┴─────┴───┘│└─────┴────┴─────┴─────┘│⍞000D└────────────────────────┴────────────────────────┘⍞000D⍞000D    ⊢ stuff ← stuff alrem''molly''                ⍝ remove Molly and her thing.⍞000D┌──────────────────┬──────────────────┐⍞000D│┌──────┬─────┬───┐│┌─────┬────┬─────┐│⍞000D││maggie│milly│may│││shell│star│stone││⍞000D│└──────┴─────┴───┘│└─────┴────┴─────┘│⍞000D└──────────────────┴──────────────────┘⍞000D⍞000DMultiple names may be removed using [alrems]:⍞000D⍞000D    stuff alrems''may'' ''maggie''⍞000D┌───────┬──────┐⍞000D│┌─────┐│┌────┐│⍞000D││milly│││star││⍞000D│└─────┘│└────┘│⍞000D└───────┴──────┘⍞000D⍞000DDuplicate Names⍞000D---------------⍞000D[alext]  _prefixes_  a  new value to the list. This means that a new association⍞000D"shadows"  an  existing  one of the same name as far as [alval] and [alvals] are⍞000Dconcerned.  [alrem]  removes the most recently prefixed name, thus "unshadowing"⍞000Dit.⍞000D⍞000DIn contrast, [alrems] removes _all_ values associated with the given names.⍞000D⍞000D    alist alrem ''n1''            ⍝ pop leftmost n1.⍞000D    alist alrem ''n1''            ⍝ pop leftmost remaining n1 (if any).⍞000D    alist alrem ''n2''            ⍝ pop leftmost n2.⍞000D⍞000D    alist alrems ''n1'' ''n2''      ⍝ expunge ALL n1s and ALL n2s.⍞000D⍞000DTo  unshadow, as opposed to expunge, a number of names, use [alrem] with reduct-⍞000Dion:⍞000D⍞000D    ↑alrem⍨/⌽alist ''n1'' ''n1'' ''n2'' ...           ⍝ unshadow (pop) several names.⍞000Dor⍞000D    alist alrem foldl ''n1'' ''n1'' ''n2'' ...        ⍝ unshadow (pop) several names.⍞000D⍞000DTechnical notes:⍞000D⍞000D[alval] is coded:⍞000D⍞000D    alval←{names vals←⍺ ⋄ (names⍳⊂⍵)⊃vals}⍞000D⍞000Dit could be coded with the more obscure (and marginally slower):⍞000D⍞000D    alval←{↑⍵{(⍺⍳⊂⍺⍺)⊃⍵}/⍺}⍞000D⍞000DIf the sought name is not in the list, both  codings generate INDEX ERROR. It is⍞000Deasy to tweak the functions to return a special "not found" value instead:⍞000D⍞000D    alval←{names vals←⍺ ⋄ (names⍳⊂⍵)⊃vals,⊂''Eh?''}⍞000Dor:                                      ¯¯¯¯¯¯¯⍞000D    alval←{↑⍵{(⍺⍳⊂⍺⍺)⊃⍵,⊂''Eh?''}/⍺}⍞000D                       ¯¯¯¯¯¯¯⍞000DDestructive Assignment⍞000D----------------------⍞000DNo function is provided to replace the value of an association. If such an oper-⍞000Dation were needed, it could be coded:⍞000D⍞000D    alrep←{                     ⍝ Assoc list ⍺ with (name value) ⍵ replaced.⍞000D        names vals←⍺            ⍝ old alist.⍞000D        name val←⍵              ⍝ new value.⍞000D        vals[names⍳⊂name]←⊂val  ⍝ replace alist value.⍞000D        names vals              ⍝ new alist.⍞000D    }                           ⍝ alist ← alist :: (name value)⍞000D⍞000DNote that, in the case of duplicate names, [alrep] will replace the value of the⍞000Dmost recently associated pair.⍞000D⍞000DGraphs⍞000D------⍞000DAn  association  list might be used to implement a directed graph. In this case,⍞000Deach  name  is  a vertex of the graph and the corresponding value is a vector of⍞000Dthe vertices of connecting edges. For example:⍞000D⍞000D      Graph "a".⍞000D    ┌─────A←────┐⍞000D    │     │     │   5 vertices: A B C D E⍞000D    ↓     ↓     │⍞000D    B←───→C────→D   8 edges:    A→B  A→C  B→C  C→B⍞000D          ↑     │               C→D  D→A  D→E  E→C⍞000D          │     ↓⍞000D          └─────E⍞000D⍞000DCorresponding association list:⍞000D⍞000D    alist ← ''ABCDE'' (''BC'' ''C'' ''BD'' ''AE'' ''C'')    ⍝ alist for graph "a" above.⍞000D⍞000D    alist alval ''C''                             ⍝ vertices 1 step from ''C''⍞000DBD⍞000D    steps←{↑{∪↑,/alist alvals ⍵}/(⍳⍺),⍵}        ⍝ vertices ⍺ steps from ⍵.⍞000D⍞000D    0 steps ''C''⍞000DC⍞000D    1 steps ''C''⍞000DBD⍞000D    2 steps ''C''⍞000DCAE⍞000D    3 steps ''C''⍞000DBDC⍞000D⍞000DExamples:⍞000D⍞000D    stuff←(''milly'' ''molly'' ''may'')(''star'' ''thing'' ''stone'')⍞000D⍞000D    stuff alval ''may''                           ⍝ thing associated with May.⍞000Dstone⍞000D⍞000D    stuff alvals ''may'' ''milly''                  ⍝ May and Milly''s things.⍞000D stone  star⍞000D⍞000D    ⊢ stuff ← stuff alext ''maggie'' ''shell''      ⍝ add Maggie and her thing.⍞000D┌────────────────────────┬────────────────────────┐⍞000D│┌──────┬─────┬─────┬───┐│┌─────┬────┬─────┬─────┐│⍞000D││maggie│milly│molly│may│││shell│star│thing│stone││⍞000D│└──────┴─────┴─────┴───┘│└─────┴────┴─────┴─────┘│⍞000D└────────────────────────┴────────────────────────┘⍞000D⍞000D    ⊢ stuff ← stuff alrem''molly''                ⍝ remove Molly and her thing.⍞000D┌──────────────────┬──────────────────┐⍞000D│┌──────┬─────┬───┐│┌─────┬────┬─────┐│⍞000D││maggie│milly│may│││shell│star│stone││⍞000D│└──────┴─────┴───┘│└─────┴────┴─────┘│⍞000D└──────────────────┴──────────────────┘⍞000D⍞000D    stuff alrems''may'' ''maggie''                  ⍝ remove May and Maggie.⍞000D┌───────┬──────┐⍞000D│┌─────┐│┌────┐│⍞000D││milly│││star││⍞000D│└─────┘│└────┘│⍞000D└───────┴──────┘⍞000D⍞000DSee also: Graphs list key foldl⍞000D⍞000DIndex:association list|dictionary|look-up table|symbol table|graph|lists⍞000DIndex:assignment, destructive|stuff⍞000DIndex;cummings e.e.' 
