'tree ← wug ##.wmst root         ⍝ Minimum Spanning Tree for weighted graph ⍺.⍞000D⍞000D[wmst] uses Prim''s algorithm to find a Mimimum Spanning Tree (MST) for weighted,⍞000Dundirected  graph  [wug]. An MST is a set of minimum-total-cost edges that conn-⍞000Dects  all vertices. This set of edges must form a tree; otherwise, it would con-⍞000Dtain at least one cycle, which means that an edge could be removed, reducing the⍞000Dtotal cost without isolating any vertices.⍞000D⍞000DReal-life  examples  of applications of MSTs include finding lowest-cost ways to⍞000Dconnect computers in a network or the least-expensive bridge-building project to⍞000Djoin up a little cluster of islands.⍞000D⍞000DIn the context of undirected graphs, a _tree_ has no concept of hierarchy. There⍞000Dis no parent-child relationship between the vertices and in particular, there is⍞000Dno "root" node. A tree is just a graph that contains no cycles.⍞000D⍞000D    Tree          Non-Tree⍞000D     └┤ ┌           └┤ ┌⍞000D   ─┼─┼─┤┌        ─┼─┼─┤┌⍞000D    │└┼┐└┼         │└┼┐└┼⍞000D    └────          └────┘⍞000D⍞000DHowever,  the representation of a tree used by the graph functions in this work-⍞000Dspace,  imposes  a hierarchy. A tree is represented by a vector of parent-vertex⍞000Dindices. Each vertex, apart from the root, which has a dummy index of ¯1, indic-⍞000Dates the position in the vector of its parent. This representation is chosen be-⍞000Dcause  it is compact and makes it easy to extract paths from any vertex, back to⍞000Dthe  root.  Notice  that we can produce a "directed" tree from an undirected one⍞000D(pictured  above  left),  by  selecting _any_ vertex as root. Choosing a root in⍞000Dthis  way, immediately imposes a unique hierarchy on the tree: every edge points⍞000Dfrom a child vertex back to its parent. Wmst takes this arbitrary root vertex as⍞000Dright argument.⍞000D⍞000DTechnical notes:⍞000D⍞000DPrim''s algorithm accumulates the MST as follows:⍞000D⍞000D    Starting with the chosen root as a 1-vertex tree,⍞000D    while there are vertices not connected to the tree,⍞000D        identify edges connecting these vertices to those within the tree and⍞000D        incorporate the lowest-cost of these into the tree.⍞000D    endwhile⍞000D⍞000DNotice that for any graph and root vertex, the MST is _not_ the same as the tree⍞000Dproduced  by  →wspan←.  [wmst] guarantees that the total edge cost is minimised,⍞000Dwhile  →wspan← produces the lowest cost path from the root to _each_ vertex. The⍞000Dfollowing weighted, undirected 4-vertex graph illustrates the distinction.⍞000D⍞000D      graph           MST[A]        wspan[A]⍞000D    A───1───B       A─←─1───B       A─←─1───B⍞000D    │       │               ↑       ↑       ↑⍞000D    2       1               1       2       1⍞000D    │       │               │       │       │⍞000D    C───1───D       C───1─→─D       C       D⍞000D⍞000DThe  difference is that the lowest-cost-path from C to A is C→A, but edge C-A is⍞000Dtoo expensive to be included in the MST.⍞000D⍞000DAn  alternative to Prim''s algorithm is Kruskal''s algorithm, which builds the MST⍞000Dby  adding edges, rather than vertices. This is an equally good approach, though⍞000Dit requires a second pass to render the final tree in the format required by the⍞000Dfunctions in this workspace.⍞000D⍞000DReferences:⍞000D⍞000DKruskal, J.B., On the shortest spanning tree of a graph and the traveling sales-⍞000Dman problem. Proceedings of the American Mathematical Society, 7:48-50, 1956.⍞000D⍞000DPrim, R.C., Shortest connection networks and some generalizations. Bell Systems⍞000DTechnology Journal, 36:1389-1401, 1957.⍞000D⍞000DThe graph used in the examples below, looks like this:⍞000D⍞000D    ┌───────A───────┐       Edge    Weight⍞000D    │       │       │       ----    ------⍞000D    1       3       1       A-B     1⍞000D    │       │       │       A-C     3⍞000D    B───2───C───1───D       A-D     1⍞000D            │       │       B-C     2⍞000D            1       1       C-D     1⍞000D            │       │       C-E     1⍞000D            └───────E       D-E     1⍞000D⍞000DExamples:⍞000D⍞000D      aa                        ⍝ simple weighted, undirected graph shown above.⍞000D┌─────┬───┬───────┬─────┬───┐⍞000D│2 3 4│1 3│1 2 4 5│1 3 5│3 4│⍞000D├─────┼───┼───────┼─────┼───┤⍞000D│1 3 1│1 2│3 2 1 1│1 1 1│1 1│⍞000D└─────┴───┴───────┴─────┴───┘⍞000D⍞000D      aa wmst 2                 ⍝ minimum spanning tree with root 2, c.f.:⍞000D2 ¯1 4 1 4⍞000D⍞000D      aa wspan 2                ⍝ spanning tree with lowest cost to each vertex.⍞000D2 ¯1 2 1 3⍞000D⍞000DSee also: wspan span Graphs wGraphs⍞000D⍞000DIndex:graph, weighted|spanning tree|mininum spanning tree' 
