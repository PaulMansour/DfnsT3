'rslt ← {left} (fun ##.saw) {right}          ⍝ Apply function Simple-Array-Wise.⍞000D⍞000DThe  function  operand  is applied to or between each simple (depth 0 or 1) sub-⍞000Darray in the argument(s). [saw] is thought to have been published first by IBM''s⍞000DEd Eusebi, who remarked that "It''s good to have a saw in your toolbox".⍞000D⍞000DTechnical notes:⍞000D⍞000DA  monadic  version  of the operator tests the depth of its argument and applies⍞000Dthe  operand  function  if  it  is simple. Otherwise, it recursively applies the⍞000Dderived function ''∇'' (function operand bound with operator), to each sub array.⍞000D⍞000D    saw←{           ⍝ Function operand applied Simple-Array-Wise.⍞000D        1≥|≡⍵:⍺⍺ ⍵  ⍝ Simple: apply operand.⍞000D              ∇¨⍵   ⍝ Nested: visit each subarray.⍞000D    }⍞000D⍞000DPhil Last suggested this (⎕io- and ⎕ml-independent) one-liner:⍞000D⍞000D    saw←{⊃⍬⍴⊢∘∇¨/(1↓1 0~≡⍵),⊢∘⍺⍺/(1 0∩≡⍵),⊂⍵}⍞000D⍞000DA dyadic version, suggested by Paul Mansour, looks like this:⍞000D⍞000D    saw←{               ⍝ Function operand applied Simple-Array-Wise.⍞000D        2≥|≡⍺ ⍵:⍺ ⍺⍺ ⍵  ⍝ Both simple: apply operand.⍞000D        1≥|≡⍵:∇∘⍵¨⍺     ⍝ ⍵ simple: traverse ⍺.⍞000D        1≥|≡⍺:⍺∘∇¨⍵     ⍝ ⍺ simple: traverse ⍵.⍞000D        ⍺ ∇¨⍵           ⍝ Both nested: traverse both.⍞000D    }⍞000D⍞000DDyadic [saw] is a close relative of the pervasion operator →perv←. See the tech-⍞000Dnical notes in →perv← for a generalisation that includes both.⍞000D⍞000DFinally,  we  can  produce  an ambi-valent version, by defaulting a missing left⍞000Dargument to the identity function ⊢.⍞000D⍞000D    saw←{                   ⍝ Function operand applied Simple-Array-Wise.⍞000D        ⍺←⊢                 ⍝ default left arg.⍞000D        2≥|≡⍺ ⍵ ⍵:⍺ ⍺⍺ ⍵    ⍝ Both simple: apply operand.⍞000D        1≥|≡⍵:⍺ ∇¨⊂⍵        ⍝ ⍵ simple: traverse ⍺.⍞000D        2≥|≡⍺ 1:⍺∘∇¨⍵       ⍝ ⍺ simple: traverse ⍵.⍞000D        ⍺ ∇¨⍵               ⍝ Both nested: traverse both.⍞000D    }⍞000D⍞000DExample:⍞000D⍞000D    disp¨eng esp                        ⍝ two nested vectors.⍞000D ┌───┬┬┬┬────┐  ┌───┬───┬────┬┬┐⍞000D │One││││Five│  │Uno│Dos│Tres│││⍞000D └───┴┴┴┴────┘  └───┴───┴────┴┴┘⍞000D⍞000D     ⌽saw eng esp                       ⍝ _monadic_ saw on depth-3 array.⍞000D┌─────────────┬────────────────┐⍞000D│┌───┬┬┬┬────┐│┌───┬───┬────┬┬┐│⍞000D││enO││││eviF│││onU│soD│serT││││⍞000D│└───┴┴┴┴────┘│└───┴───┴────┴┴┘│⍞000D└─────────────┴────────────────┘⍞000D⍞000D    eng {⍺,''='',⍵}saw esp                ⍝ _dyadic_ saw between depth-2 arrays.⍞000D┌───────┬────┬─────┬─┬─────┐⍞000D│One=Uno│=Dos│=Tres│=│Five=│⍞000D└───────┴────┴─────┴─┴─────┘⍞000D⍞000D    fnb←{'' ''∧.=⍺:⍵ ⋄ ⍺}saw              ⍝ Paul Mansour''s [fnb] function.⍞000D⍞000D    eng fnb esp                         ⍝ eng replaces esp simple-array-wise.⍞000D┌───┬───┬────┬┬────┐⍞000D│One│Dos│Tres││Five│⍞000D└───┴───┴────┴┴────┘⍞000D⍞000D    ↑fnb/ eng esp ''¿?''                  ⍝ eng replaces esp with default: ''¿?''.⍞000D┌───┬───┬────┬──┬────┐⍞000D│One│Dos│Tres│¿?│Five│⍞000D└───┴───┴────┴──┴────┘⍞000D⍞000DSee also: perv rows⍞000D⍞000DIndex:simple-array-wise⍞000DIndex;Eusebi E.|Last P.|Mansour P.' 
