'rslt ← (fun ##.limit) arg                   ⍝ Function power limit (fixpoint).⍞000D⍞000DThis  operator  applies its function operand repeatedly until the result has the⍞000Dsame value as the argument (a "fixpoint" of the function). Note that the operand⍞000Dfunction  must  be monadic and that a dyadic function may be rendered monadic by⍞000Dbeing bound to ("curried" with) either of its arguments:⍞000D⍞000DNB: Dyalog V11 implements [limit] directly using primitive operator ⍣.⍞000D⍞000DTechnical notes:⍞000D⍞000DA straightforward coding of the operator might look like this:⍞000D⍞000D    limit←{             ⍝ Function power limit (fixpoint).⍞000D        rslt←⍺⍺ ⍵       ⍝ Apply operand until⍞000D        rslt≡⍵:rslt     ⍝ ... it has no effect.⍞000D        ∇ rslt          ⍝ Otherwise, repeat.⍞000D    }⍞000D⍞000DThis variable-free version, due to Phil Last, which uses the left argument of an⍞000Dinner operator to carry the previous result, turns out to be quicker:⍞000D⍞000D    limit←{             ⍝ Function power limit (fixpoint).⍞000D        ⍵ ⍺⍺{           ⍝ ''old'' value:⍞000D            ⍺≡⍵:⍵       ⍝       old matches new: finished.⍞000D            ⍵ ∇ ⍺⍺ ⍵    ⍝       otherwise: try new value.⍞000D        }⍺⍺ ⍵           ⍝ ''new'' value.⍞000D    }⍞000D⍞000DFor amusement, the operator can be made nearly _palindromic_ by substituting (∇)⍞000Dwith (⍺⍺ ∇∇):⍞000D⍞000D    limit←{⍞000D        ⍵ ⍺⍺{⍞000D            ⍺≡⍵:⍵⍞000D            ⍵ ⍺⍺ ∇∇ ⍺⍺ ⍵⍞000D        }⍺⍺ ⍵⍞000D    }⍞000D⍞000D...  and fully palindromic by appending a dummy guard, which is never evaluated,⍞000Dafter  the recursive call. This is not without precedent; a significant proport-⍞000Dion of our DNA _may_ turn out to be dummy code that is never evaluated!⍞000D⍞000D    limit←{⍞000D        ⍵ ⍺⍺{⍞000D            ⍺≡⍵:⍵⍞000D            ⍵ ⍺⍺ ∇∇ ⍺⍺ ⍵⍞000D            ⍵:⍵≡⍺           ⍝ dummy line mirrors guard.⍞000D        }⍺⍺ ⍵⍞000D    }⍞000D⍞000DStringing this out on a single line shows the symmetry. The following expression⍞000Dcalculates the "Golden Ratio" (a.k.a. "Phi") by finding a fixpoint of the funct-⍞000Dion  {1+÷⍵} close to {⍵÷+1}1. The 1 at the extreme left of the expression is in-⍞000Dcluded solely to mirror the 1 on the right and is ignored.⍞000D⍞000D      1{1+÷⍵}{⍵ ⍺⍺{⍺≡⍵:⍵ ⋄ ⍵ ⍺⍺ ∇∇ ⍺⍺ ⍵ ⋄ ⍵:⍵≡⍺}⍺⍺ ⍵}{⍵÷+1}1⍞000D1.618033989⍞000D⍞000DFor amusement, there is an animation of this expression on YouTube:⍞000DSee: http://www.youtube.com/watch?v=X3bv4Iu1aEg&fmt=18⍞000D⍞000DExamples:⍞000D⍞000D      enlist←{1↓↑,/''·'',,,¨⍵}limit   ⍝ Expensive alternative to primitive: ∊.⍞000D⍞000D      0.5∘× limit 2                 ⍝ Fixpoint of halving function.⍞000D0⍞000D      ⍝ Note that a function can have more than one fixpoint:⍞000D⍞000D      *∘(÷3) limit¨¯2 2             ⍝ Two fixpoints of cube root function.⍞000D¯1 1⍞000D      ⍝ Operator: [nr] returns the next term in a Newton-Raphson approximation:⍞000D⍞000D      nr←{⍺←⎕CT                     ⍝ Newton-Raphson.⍞000D          y ∆y←⍺⍺¨(⊂⍵)×1+0 ⍺        ⍝ f(x), f(x+∆)⍞000D          ⍵+(⍺×y)÷y-∆y              ⍝ next estimate.⍞000D      }⍞000D⍞000D      1∘○ nr limit 3 6 9            ⍝ Roots of Sin(x) near x=3, x=6, x=9.⍞000D3.1416 6.2832 9.4248⍞000D⍞000D⍝ Just for fun, the above code for the next item in the Newton-Raphson sequence⍞000D⍝ could be expressed as a single derived function:⍞000D⍝⍞000D⍝                                ┌─┐ ← operand function 1∘○⍞000D⍝     ┌──────────────────────────┤ ├──────────────────┐⍞000D      +∘(÷∘↑∘(-/)⍨∘(×∘⎕ct)∘⊃⍨⍨)∘(1∘○¨)∘((1+0 ⎕ct)∘×)∘⊂⍨ limit 3 6 9⍞000D3.1416 6.2832 9.4248⍞000D⍞000D⍝ See also →derive←⍞000D⍞000D⍝ Gianluigi Quario suggests the following example for finding the Arithmetic-⍞000D⍝ Geometric Mean (AGM).⍞000D⍝⍞000D⍝ The arithmetic-geometric mean of two numbers M and N is defined by starting⍞000D⍝ with a(0)←M  and  g(0)←N, then iterating:⍞000D⍝⍞000D⍝   a(n+1) ← arithmetic mean of a(n) and g(n)⍞000D⍝   g(n+1) ← geometric  mean of a(n) and g(n)⍞000D⍝       until⍞000D⍝   a(n)=g(n)⍞000D⍞000D      AM←{(+/⍵)×÷⍴,⍵}               ⍝ Arithmetic mean.⍞000D      GM←{(×/⍵)*÷⍴,⍵}               ⍝ Geometric  mean.⍞000D      AGM←{⍬⍴{(AM ⍵),GM ⍵}limit ⍵}  ⍝ Arithmetic-geometric mean.⍞000D⍞000D      AM 1 2 3 4 5⍞000D3⍞000D      GM 1 2 3 4 5⍞000D2.6052⍞000D      AGM 1 2 3 4 5⍞000D2.7991⍞000D      ÷AGM 1 2*÷2                   ⍝ Gauss''s constant.⍞000D0.83463⍞000D⍞000D⍝ Gianluigi''s second example calculates ArcTan by similar means. (Acton, F.S.⍞000D⍝ "The Arctangent." In Numerical Methods that Work, upd. and rev. Washington,DC:⍞000D⍝ Math. Assoc. Amer., pp. 6-10, 1990.)⍞000D⍞000D      ArcTan←{⍞000D          ⍝ Inverse trigonometric tangent - gqr 19-11-2002.⍞000D          ⍝ For scalar ⍵: (ArcTan ⍵)≡¯3○⍵⍞000D          ⍝⍞000D          ⍝ Limit''s operand function returns a 2-vector. Repeated application⍞000D          ⍝ of the function produces two sequences, both of which converge and⍞000D          ⍝ have the same limit:⍞000D          ⍝⍞000D          ⍝    A≡ {a(0),a(1), ... , a(n), ...   }⍞000D          ⍝    G≡ {g(0),g(1), ... , g(n), ...   }⍞000D          ⍝⍞000D          ⍝  Starting with arguments:⍞000D          ⍝       a(0)←(1+⍵*2)*-÷2  and  g(0)←1⍞000D          ⍝  the iteration produces:⍞000D          ⍝       a(n+1)← arithmetic mean of a(n)   and g(n)⍞000D          ⍝       g(n+1)← geometric  mean of a(n+1) and g(n)⍞000D          ⍝  until:⍞000D          ⍝   a(n+1)=a(n) and g(n+1)=g(n) and a(n+1)=g(n+1)⍞000D⍞000D          next←{                          ⍝ next term in sequence.⍞000D              AM←{(+/⍵)×÷⍴⍵}              ⍝ arithmetic mean.⍞000D              GM←{(×/⍵)*÷⍴⍵}              ⍝ geometric  mean.⍞000D              (AM ⍵),GM(AM ⍵),1↓⍵⍞000D          }⍞000D          start←⍬⍴(1+⍵*2)*-÷2⍞000D          finish←⍬⍴next limit start,1     ⍝ calculated limit⍞000D          ⍬⍴⍵×start÷finish⍞000D      }⍞000D⍞000D      ArcTan 0.5    ⍝ method using limit ...⍞000D0.46365⍞000D⍞000D      ¯3○0.5        ⍝ ... agrees with primitive function.⍞000D0.46365⍞000D⍞000D⍝ From Mayer Goldberg, the "Univac division algorithm" for ⍺÷⍵, where 0<⍵≤1.⍞000D⍞000D      ⍬⍴{⍵×2-¯1↑⍵} limit 20 0.3⍞000D66.667⍞000D⍞000D⍝ ... which can be coded as a derived function, with ⎕ML=0, using primitive⍞000D⍝ power and monadic commute operators. Notice that 0∘⊥ returns the last item⍞000D⍝ of a numeric vector:⍞000D⍞000D    univac_div← ⊃∘(×∘(2∘-)∘(0∘⊥)⍨⍣≡)    ⍝ Univac division algorithm.⍞000D⍞000D    univac_div 1.2 0.3⍞000D4⍞000D⍞000D    univac_div dft 1        ⍝ display of derived function, see →dft←⍞000D        ∘⍞000D      ┌─┴─┐⍞000D      ⊃   ⍣⍞000D        ┌─┴─┐⍞000D        ⍨   ≡⍞000D      ┌─┘⍞000D      ∘⍞000D  ┌───┴───┐⍞000D  ∘       ∘⍞000D┌─┴─┐   ┌─┴─┐⍞000D×   ∘   0   ⊥⍞000D  ┌─┴─┐⍞000D  2   -⍞000D⍞000DSee also: pow inverse traj while until dft derive⍞000D⍞000DIndex:function power|palindrome|arithmetic-geometric mean|golden mean⍞000DIndex:Newton-Raphson|UNIVAC|⎕ML|enlist|fixpoint|YouTube⍞000DIndex;Last P.|Quario G.|Goldberg M.|Gauss C.F.' 
