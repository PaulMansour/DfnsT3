'Author:         LeRoy N. Eide⍞000DCreated:        03-Apr-2008⍞000DModified:       12-Jul-2008⍞000DCharset:        US-ASCII; Displays best with a mono-spaced font⍞000D                        ; Lines no longer than 79 characters⍞000D⍞000DThe following is a somewhat brief description of a representation scheme⍞000Dfor rational numbers -- including some discussion about addition and⍞000Dsubtraction of numbers so represented.  Most of this is derived from⍞000Dpersonal thoughts and notes developed over the past few years.⍞000D⍞000D===============================================================================⍞000D⍞000DConsider the bi-directionally infinite polynomial in b⍞000D⍞000D        ... + d[2]*b∧(2) + d[1]*b∧(1) + d[0]*b∧(0) + d[-1]*b∧(-1) + ...⍞000D⍞000Dwhere:  + * ∧ mean respectively addition, multiplication, and exponentiation;⍞000D        - is used conventionally as a negation sign (and also subtraction);⍞000D        ... (ellipsis) is used conventionally for (possibly) omitted material⍞000D                and where "x...y" means that "y differs from x";⍞000D        .. (short ellipsis) is used for possibly omitted material⍞000D                and where "x..y" means that "y may be identical to x";⍞000D        d[i] means "d sub i for some integer i", i.e. the coefficient of b∧(i),⍞000D                and each d[i] is a member of an ordered set of "digits" of⍞000D                cardinality b, one of which is chosen to represent the value⍞000D                zero, e.g. {..,0,..}, implying that b > 0 (a non-empty set)⍞000D                but in practice it is assumed that b > 1.⍞000D⍞000DThe polynomial above is generally given as the interpretation of a⍞000D"number" as typically written, e.g.⍞000D        123.95⍞000Dwhere b is assumed to be ten and d''s are chosen from the ordered set⍞000D        {0,1,2,3,4,5,6,7,8,9}, i.e. d[2]=1, d[1]=2, d[0]=3, d[-1]=9, d[-2]=5.⍞000D⍞000DThe zero digit is conventionally represented by the character ''0''; other⍞000Ddigits in this ordered set are also assumed to represent integer values⍞000Ddescending (to the left) or ascending (to the right) in steps of one.⍞000D⍞000DAlso, the (radix) point is conventionally placed between the d[0] and d[-1]⍞000Ddigits (although it should arguably be placed beneath the d[0] digit).  And⍞000Dzeros are conventionally thought of (but generally unwritten) as extending⍞000Dinfinitely on both sides of the written number.⍞000D⍞000DSo much for convention.⍞000D⍞000D===============================================================================⍞000D⍞000DEuler''s Claim:⍞000D-------------⍞000D⍞000D  S(x) = ... + x∧(3) + x∧(2) + x∧(1) + x∧(0) + x∧(-1) + x∧(-2) + x∧(-3) + ...⍞000Dor⍞000D  SUM(x∧i) over all integers i⍞000Dis identically zero for all x.⍞000D⍞000DAt first blush this seems preposterous, but there are some plausible⍞000Dreasons to suspect the (computational) truth to this claim.  Without⍞000Dexpounding much, simply consider the implications of:⍞000D⍞000D  x*S(x) - S(x) = 0⍞000D⍞000DThe Author accepts Leonhard Euler''s claim in the discussion that follows.⍞000D⍞000D===============================================================================⍞000D⍞000DThe Notation used herein is described below.  Be patient -- it starts out⍞000Dlooking rather ugly but becomes increasingly beautiful (and useful) after⍞000Da little development ...⍞000D⍞000D-------------------------------------------------------------------------------⍞000D⍞000DThe Digits:⍞000D----------⍞000D⍞000DAn ordered set of digits (symbols) are separated by commas and enclosed in⍞000Dcurly braces, e.g.⍞000D⍞000D        {0,1,2,3,4,5,6,7,8,9}   also {0,...,9}⍞000Dor⍞000D        {-,0,+}⍞000D⍞000Dbut if all of the digits are single characters, the commas may be omitted,⍞000De.g.⍞000D⍞000D        {0123456789}            also {0...9}⍞000Dor⍞000D        {-0+}⍞000D⍞000DAn ellipsis is never used if the omitted content is not obvious from⍞000Dcontext.⍞000D⍞000DIf it is unclear which digit represents zero, that digit is enclosed⍞000Din parentheses (which may also act as digit separators if commas would⍞000Dotherwise be needed), e.g.⍞000D⍞000D        {M(Z)P} or {M,(Z),P}⍞000D⍞000Dbut the use of commas is encouraged if there are any multi-character digits⍞000Dsince⍞000D        {MINUS,(ZERO),PLUS}⍞000D⍞000Dwould be ambiguous without the commas.⍞000D⍞000DThe primary consequence of designating some digit to be the zero is that⍞000Dthe location of the zero digit entirely determines the characteristics of⍞000Dthe addition and subtraction (and multiplication) tables.⍞000D⍞000DThe set of digits, if specified, is always mentioned external to (and⍞000Dusually following) the number being represented, e.g.⍞000D⍞000D        123.95 {0123456789}⍞000D⍞000DIf the set of digits is conventional or obvious from context, the set of⍞000Ddigits won''t be mentioned at all.⍞000D⍞000DNote that digits may be represented by "non-digit" symbols but the use of⍞000Dany of the following characters as digits should (and will) be avoided:⍞000D⍞000D        { } [ ] ( ) < > \ | / : , .⍞000D⍞000DAll of these characters except '':'' are used in the rational number⍞000Drepresentation described herein; '':'' is used notationally in the⍞000Dcomputation apparatus (described below).  The characters⍞000D⍞000D        + - 0 = #⍞000D⍞000Dare also used in the computation apparatus but in a manner that causes⍞000Dno conflict with their simultaneous use as digits.  Additionally, the⍞000Dcharacter ''~'' is used to indicate a complement but, again, this usage⍞000Dcauses no conflict with its use as a digit.⍞000D⍞000DThe characters ''+'', ''-'', and ''0'' are used for additive and subtractive⍞000Dcarries regardless of base; think of these as "positive one", "negative⍞000Done", and "zero" respectively.⍞000D⍞000DOf special note is the use of ''='' for double-minus and ''#'' for double-plus⍞000Ddigits (except where pressed into service for "equality" and "inequality").⍞000D⍞000DThe digits ''0'' through ''9'', the point ''.'', and also the characters⍞000D⍞000D        [ ] ( ) < > \ | / * ∧ + - =⍞000D⍞000Dare used mathematically in conventional ways; these uses will be clear from⍞000Dcontext (or with an explanatory note if needed).⍞000D⍞000DAn attempt is made to distinguish symbols from values by enclosing symbols⍞000Din single quotes (e.g. ''0'') and spelling out values (e.g. zero).  But since⍞000Deverything is symbolic at some level, the reader will need to resolve many⍞000Dsymbol vs. value conflicts from context.⍞000D⍞000D-------------------------------------------------------------------------------⍞000D⍞000DThe Base:⍞000D--------⍞000D⍞000DIf needed, the base b may be noted in square brackets where the base⍞000Ditself (possibly signed) is written in conventional base ten, for example⍞000D[10] or [3].  Otherwise, the base may be inferred from the cardinality of⍞000Dthe specified set of digits (if present) or from context.⍞000D⍞000DThe base, if specified, is always mentioned external to (and usually⍞000Dfollowing) the number being represented, e.g.⍞000D⍞000D        123.95 [10]⍞000D⍞000D-------------------------------------------------------------------------------⍞000D⍞000DThe Number and Its Infinite Extensions:⍞000D--------------------------------------⍞000D⍞000DTwo bars delimit what is generally considered the number proper.⍞000D⍞000DIf powers of the base increase to the left,  \''s are used:  \123.95\⍞000DIf powers of the base increase to the right, /''s are used:  /59.321/⍞000DThe intended mnemonics are: \ rises to the left, / rises to the right.⍞000D⍞000DIn either case, the infinite sequence of zeros to both the left and right⍞000Dare also always indicated with angle brackets as⍞000D⍞000D        <0\123.95\0>  or <0/59.321/0>⍞000D⍞000Dwhere the point appears between the digits that are the coefficients of the⍞000Db∧(0) and b∧(-1) terms of the representative polynomial in b.⍞000D⍞000DIf the digits of the number are multi-character, commas are used to separate⍞000Dthe digits one from another (the point, if present, as well as \ or / may⍞000Dalso act as digit separators), e.g.⍞000D⍞000D        <_\I,II,III.IX,V\_> [10] {(_),I,II,III,IV,V,VI,VII,VIII,IX}⍞000D⍞000D-------------------------------------------------------------------------------⍞000D⍞000DThe Point and Scale Factor:⍞000D--------------------------⍞000D⍞000DNote that the (radix) point cannot appear outside of the enclosing bars!⍞000DIf the point is omitted, it is assumed to be nestled in the (inside) acute⍞000Dcorner of one of the bars, e.g.⍞000D⍞000D        <0\42\0> means <0\42.\0>  and  <0/24/0> means <0/.24/0>⍞000D⍞000Dboth of which represent the answer to life, the universe, and everything!⍞000D⍞000DAs previously mentioned, it would be preferable to designate the location⍞000Dof the point by, well, just "pointing" at the digit that is the⍞000Dcoefficient of b∧(0) -- something like⍞000D⍞000D        <0\12395\0>⍞000D             ∧⍞000D⍞000Dpossibly with an integer "scale factor" (in conventional base ten) placed⍞000Dbelow, e.g.⍞000D⍞000D        <0\12395\0>⍞000D               ∧⍞000D              -2⍞000D⍞000DAll of which gets rather notationally messy.⍞000D⍞000DAs a compromise (and to avoid multi-line notation), the point may be⍞000Dreplaced by a (possibly signed) scale factor wrapped in round brackets⍞000D(i.e. parentheses), e.g.⍞000D⍞000D        <0\123(0)95\0>  or  <0\12395(-2)\0>⍞000D⍞000DNote that ''.'' is simply shorthand for ''(0)''.  Think of ''()'' as a "really⍞000Dbig dot" with a (base ten) integer written inside of it.  This "dot" may⍞000Dbe moved either right or left as needed, its contained integer increasing⍞000Dif moving "upward" (toward higher powers of the base) or decreasing if⍞000Dmoving "downward" (toward lower powers of the base) -- just think of⍞000D"upward" as "left" for \\ or "right" for //, else "downward".  All of this⍞000Dis, of course, nothing more than a sort of embedded scientific notation.⍞000D⍞000DIn any case, the point (or the really big dot with enclosed scale factor)⍞000Dmust always remain between the bars.⍞000D⍞000D-------------------------------------------------------------------------------⍞000D⍞000DThe Bars:⍞000D--------⍞000D⍞000DThe \\ and // bar notations are themselves without much grace.⍞000D⍞000DIf one conventionally (and always) writes numbers only in one direction or⍞000Dthe other, then it''s cleaner (and clearer) to use vertical bars instead.⍞000DThis usage will be adopted from here on, using || for \\ throughout unless⍞000Dsome non-obvious distinction needs to be drawn.⍞000D⍞000D        <0|123.95|0> means <0\123.95\0> unless otherwise noted.⍞000D⍞000DNote that Arabic actually writes its numbers low-order digit first -- but⍞000Dsince those numbers are written right-to-left, they appear to be the⍞000D"same" as ours.  Historically, when the West adopted the Arabic way of⍞000Dwriting numbers, it didn''t correct for the direction in which they were⍞000Dwritten ... it seems to have been a sufficient accomplishment that the⍞000Dconcept of zero was finally accepted (perhaps for no other purpose than as⍞000Da placeholder for a "missing digit").  We have by now generally accepted⍞000Dzero as an actual digit, but a lot more acceptance is going to be needed⍞000Din much of what follows!⍞000D⍞000D-------------------------------------------------------------------------------⍞000D⍞000DThe Replication Units:⍞000D---------------------⍞000D⍞000DThe Right Replication (or Repetition) Unit (hereinafter the RRU) indicates⍞000Dthe repeating sequence of digits that go ever onward for decreasing powers⍞000Dof the base.  Examples:⍞000D⍞000D        <0|0|0>  means 0.0000...        or more simply  |0>  means 0000...⍞000D        <0|0|3>  means 0.3333...                        |3>  means 3333...⍞000D        <0|0|14> means 0.1414...                        |14> means 1414...⍞000D⍞000DThe following are allowed for an RRU:⍞000D⍞000Da) Internal replication -- |14> may be rewritten as |1414> or |141414> or ...⍞000Db) Internal contraction -- |829829> may be rewritten as |829>⍞000Dc) External emission    -- |567> may be rewritten as 5|675> or 56|756> or ...⍞000Dd) External absorption  -- 12|312> may be rewritten as 1|231> or |123>⍞000D⍞000DIn (c) and (d) above, care must be taken to explicitly fix the point⍞000Dpreceding the bar before un-rolling and/or re-rolling the infinite spool⍞000Dof repeating digits across the bar; the point cannot simply be assumed to⍞000Dimmediately precede the bar nor can the point be absorbed into the spool⍞000Dof digits.  If necessary, the point can always be converted into a scale⍞000Dfactor and then moved as needed (while appropriately adjusting the scale⍞000Dfactor, of course).⍞000D⍞000DIn (d) above, a digit can be absorbed only if it could have been⍞000Dpreviously emitted.  Also note that both emission and absorption⍞000Dappropriately rotate the RRU contents (but do not otherwise permute it).⍞000DAll of this is, of course, obvious after some brief thought.⍞000D⍞000DThe Left Replication (or Repetition) Unit (hereinafter the LRU) indicates⍞000Dthe repeating sequence of digits that go ever onward for increasing powers⍞000Dof the base; items (a) through (d) apply to an LRU as well and with⍞000Dsimilar comments and caveats.⍞000D⍞000DBut, you say, "Isn''t just ''<0|'' the only LRU?"⍞000DI say, "Well, no ... but wait until we cover a few other matters!"⍞000D⍞000D===============================================================================⍞000D⍞000DComplements:⍞000D-----------⍞000D⍞000DThe complement of a number is simply that number with each of its digits⍞000Dreplaced by its complementary digit (the point is unaffected).  Each digit⍞000Din the ordered set of digits has an index into that set (which is not⍞000Dnecessarily the same as its value); its complement is the digit with the⍞000Dsame index but counting from the other end of that same ordered set.  For⍞000Dan odd base, one of the digits (the central one) will be its own⍞000Dcomplement (self-complementary).⍞000D⍞000DExamples:       Base ten        {0123456789}⍞000D                complements     {9876543210}    -- the so-called 9''s complement⍞000D⍞000D                Base two            {01}⍞000D                complements         {10}        -- the so-called 1''s complement⍞000D⍞000D                Balanced ternary    {-0+}⍞000D                complements         {+0-}⍞000D⍞000D                Skewed four         {=-0+}⍞000D                complements         {+0-=}⍞000D⍞000DThe symbol ''~'' is often used as a prefix (operator) to indicate a⍞000Dcomplement and may be so used here:⍞000D⍞000D        ~<0|123|45> [10]        just means <9|876|54> [10]⍞000D⍞000DThe astute reader will notice that the complementation of a number⍞000Dinvolves all of its digits -- not merely the digits between the bars!⍞000D⍞000DNote that for any base the sum of a digit and its complement is a constant⍞000Dwhose value can be represented by some single digit (i.e. this sum will⍞000Dnever produce a non-zero carry).  It is this characteristic that⍞000Dultimately permits us to identify the complement of a number with the⍞000Dnegative of that number.⍞000D⍞000DComplements provide intrinsically-signed numbers.  Consider a number N of⍞000Dthe form⍞000D        <l|npm|r>⍞000Dwhere l is the LRU contents,⍞000D      n is the so-called integer part of the number,⍞000D      p is the point (or scale factor),⍞000D      m is the so-called fractional part (mantissa) of the number,⍞000D  and r is the RRU contents.⍞000D⍞000DIf n is absorbed by l and m by r, then <l|p|r> may be written as <l|r>⍞000Dprovided that the scale factor is zero, e.g.⍞000D⍞000D        <0|1> is simply a convenient shorthand for <0|.|1>⍞000D⍞000DIn this compact notation a single bar separates the digits of the number⍞000Dinto those that are coefficients of the negative powers of the base and⍞000Dthose that are coefficients of the non-negative powers (which includes the⍞000Dso-called "units" digit).⍞000D⍞000DThe determination as to whether N < 0 or N = 0 or N > 0 can be made⍞000Dwithout resorting to any extrinsic sign convention; signs are intrinsic⍞000Dfor any base -- stay tuned!⍞000D⍞000DIf N and its complement were added, the result would be⍞000D⍞000D        <k|kpk|k>⍞000D⍞000Dfor some constant k (where each k here may actually be a sequence of k''s).⍞000DWe will see that numbers of this form are (computationally) merely⍞000Dvariants of zero -- but first we must learn how to add and subtract!⍞000D⍞000D-------------------------------------------------------------------------------⍞000D⍞000DNegative Numbers:⍞000D----------------⍞000D⍞000DMost people are unaccustomed to dealing with numbers in a base other than⍞000Dten and with negative numbers in general.  Negative numbers are for most a⍞000Dconcept without substance since nowhere in elementary or secondary schools⍞000Dare negative numbers written with intrinsic sign -- all numeric signs are⍞000Dpresented as extrinsic and not as part of a number itself.  This requires⍞000Da separate computational process to manipulate these extrinsic signs,⍞000Dleading to the notion that negative numbers are somehow less "real" than⍞000Dpositive (or unsigned) numbers.  This is indeed unfortunate.⍞000D⍞000DFor those who dabble with balanced ternary (or other balanced or skewed⍞000Dsystems), the notion of an intrinsic sign is far more concrete and clear.⍞000DBut even many computer programmers cannot see the typical computer⍞000Drepresentation of integers as binary with intrinsic sign for what it is,⍞000Dpreferring instead to think of a "sign bit" followed by an unsigned base⍞000Dtwo integer that is complemented for some magical and obscure reason.⍞000D⍞000DThe computation apparatus described and used herein handles numbers with⍞000Dintrinsic sign for all bases.  Extrinsic signs are avoided wherever⍞000Dpossible.⍞000D⍞000D===============================================================================⍞000D⍞000DA variety of operations are possible involving rational numbers⍞000Drepresented as described above.  These operations can be performed almost⍞000Dentirely symbolically, requiring no more actual numerical computation than⍞000Dthe ability to add or subtract (or multiply) single digits (with a⍞000Dpossible single digit carried in and/or out).  Even these single-digit⍞000Doperations can be accomplished symbolically by the arithmetically impaired⍞000D(or by a computer program) through the use of addition or subtraction (or⍞000Dmultiplication) tables.⍞000D⍞000DIt is interesting to note that during the European Middle Ages the⍞000Dexpected mental computation abilities of the average householder or⍞000Dmerchant was the addition or subtraction of single digits no greater than⍞000Dfive with a possible single "memory location" (a free hand) to "hold" a⍞000Dsingle-digit intermediate result -- everything else was done symbolically⍞000Dby moving counters (often pebbles or small shells -- the "calculi") around⍞000Da counting board (hence "calculation").  In most cases, the "calculator"⍞000Dhad no sense (nor needed any) of the actual numbers being operated on nor⍞000Dof the final numerical result.  Counters were "added to" or "taken from"⍞000Dthe board, the final collection of counters was normalized to a standard⍞000Drepresentation (again using simple but possibly opaque rules), and the⍞000Dresult was the "answer".  Multiplication was essentially higher⍞000Dmathematics requiring two counting boards; division required an advanced⍞000Dmathematical education.  [Citation needed here]⍞000D⍞000DSimilarly, in what follows, no more mental computation is required than⍞000Dthe ability to add or subtract (or multiply) single digits in whatever⍞000Dnumber base is being considered (with a possible single digit carried in⍞000Dand/or out).  The computation apparatus is designed to keep track of⍞000Dcarries (no free hand required!).  And referring to some prepared tables⍞000Dfor sums or differences (or products) is not considered cheating.⍞000D⍞000D-------------------------------------------------------------------------------⍞000D⍞000DAddition:⍞000D--------⍞000D⍞000DAs we all learned in elementary school, adding two unsigned (decimal)⍞000Dnumbers requires that⍞000D⍞000D        a) the (decimal) points "line up"⍞000D        b) zeros are assumed to the right (but no further than needed)⍞000D        c) zeros are assumed to the left (but no further than needed)⍞000D⍞000Dand then addition proceeds, starting at the rightmost column of digits,⍞000Dby adding each column and propagating any carry (either zero or one) to⍞000Dthe column immediately to the left; continue until done.  But we all had⍞000Drather simplistic views of what "rightmost" and "done" actually meant.⍞000DAnd subtraction had its own set of arcane rules and restrictions ...⍞000D⍞000DThe more general procedure requires that⍞000D⍞000D        a) the points "line up" (meaning that the scale factors are equal⍞000D           and are positioned one above the other) -- move the "dot"s as⍞000D           needed to adjust the scale factors;⍞000D        b) the bars "line up" -- emit from each RU as needed;⍞000D        c) the angle brackets of the RUs "line up" (meaning that the LRUs⍞000D           are of equal length and the RRUs are of equal length) --⍞000D           replicate RUs to achieve least-common-multiple lengths⍞000D⍞000Dand then addition proceeds, starting at the rightmost column of digits,⍞000Dby adding each column and propagating any carry (negative one, zero, or⍞000Dpositive one) to the column immediately to the left; continue until done⍞000D-- but with the caveat that what is carried into an RU must also be⍞000Dcarried out (like the Wilderness Rule "Carry out what you carried in!").⍞000D⍞000DThat the magnitude of each carry is either zero or one, regardless of base⍞000D(balanced, skewed, or otherwise), is left as an exercise for the reader --⍞000Dbut the proof is not difficult.⍞000D⍞000DHere''s an example of a base ten addition problem:⍞000D⍞000D          <0|123.95|0>  rewrite <0|123.95|0>⍞000D        + <0|4|3>             + <0|004.33|3>    by emission⍞000D                                ------------⍞000D                                =0   +   =0     -- carries⍞000D                                <0|128.28|3>⍞000D⍞000DNote that ''+'' and ''-'' are used to indicate non-zero carries and that all⍞000Dzero carries are omitted here except for the carry-in for each RU sum.⍞000DAdditionally, if the carry-out for an RU differs from its carry-in, then a⍞000D''#'' is used to mark this difference (here meaning inequality); otherwise an⍞000D''='' is used (both ''#'' and ''='' here are notational devices and are only⍞000Dplaced above non-digits).⍞000D⍞000DIf the carry-out for the RRU sum is non-zero, then the initially assumed⍞000Dcarry-in of zero was incorrect; in this case, the addition is aborted and⍞000Dthen restarted assuming the correct initial carry-in for the RRU sum (or⍞000Done might cheat and simply add the carry-out back into the RRU, thereby⍞000Dcorrecting the initial incorrect assumption -- but only if the initially⍞000Dassumed carry-in was zero!).⍞000D⍞000DBut what if the carry-out of the LRU of the sum differs from its carry-in?⍞000DWe can''t just "correct" the carry-in (that carry was computationally⍞000Dgenerated!) but we can extend the LRUs and have another go at it.  Here''s⍞000Dan example:⍞000D⍞000D          <0|92|34>     rewrite <0|92.3|43>     by emission⍞000D        + <0|8.6|1>           + <0|08.6|11>     by emission and replication⍞000D                                -----------⍞000D                              =0#+ +   = 0      -- carries⍞000D                              <0:1:00.9|54>     rewrite <0|100.9|54>⍞000D⍞000DHere a broken bar '':'' is used as a tentative bar for the LRU of the sum⍞000Duntil the LRU carry-out equals its carry-in.  The leftmost broken bar is⍞000Dthen retained as a full bar, the other broken bars being removed.⍞000D⍞000DThe broken bar '':'' may need to be used up to three times (that no more than⍞000Dthree are ever required is left as an exercise for the reader -- ponder the⍞000Dpossible carries).⍞000D⍞000DAll summed LRUs should be computed in this manner.⍞000D⍞000DThe requirement that the bars and angle brackets of the addend and augment⍞000Dall line up before the addition can proceed insures that the RUs of the⍞000Dsum are computed correctly and be the same length as the RUs above them.⍞000DAfter the sum is computed, it might be possible to simplify its RUs by⍞000Dcontraction.  Similar comments apply to the subtrahend, minuend, and the⍞000Ddifference of subtraction.⍞000D⍞000D-------------------------------------------------------------------------------⍞000D⍞000DSubtraction:⍞000D-----------⍞000D⍞000DSubtraction is similar to addition but with digit differences rather than⍞000Dsums and negative carries (or so-called borrows).  Recall that carries are⍞000Dalways additive for both addition and subtraction.  Here''s a base ten⍞000Dexample:⍞000D⍞000D          <0|92|34>     rewrite <0|92.3|43>     by emission⍞000D        - <0|8.6|1>           - <0|08.6|11>     by emission and replication⍞000D                                -----------⍞000D                                =0 --  = 0      -- carries⍞000D                                <0:83.7|32>     rewrite <0|83.7|32>⍞000D⍞000DIt is tempting to think of subtraction as merely the addition of a⍞000Dcomplement:⍞000D⍞000D          <0|92|34>     rewrite <0|92.3|43>     by emission⍞000D        +~<0|8.6|1>           + <9|91.3|88>     by emission and replication⍞000D                                -----------⍞000D                                      +#+0      -- carries⍞000D                                       |31>     -- abort (wrong carry-out)!⍞000D⍞000D                                =+    +=++      -- carries⍞000D                                <0:83.7|32>     rewrite <0|83.7|32>⍞000D⍞000DAlthough the addition of a complement will always produce the correct⍞000Dsubtractive result, the form of that result may be different from that⍞000Dwhich straight subtraction would yield.  Here is a standard base three⍞000Dexample to illustrate this point:⍞000D⍞000D          <0|10|2>      rewrite <0|10|2>⍞000D        -  <0|1|2>            - <0|01|2>        by emission⍞000D                                --------⍞000D                                =0 - =0         -- carries⍞000D                                <0:02|0>        rewrite <0|2|0> by absorption⍞000D⍞000DBut adding the complement of <0|1|2> yields:⍞000D⍞000D          <0|10|2>      rewrite <0|10|2>⍞000D        + ~<0|1|2>            + <2|21|0>        by emission⍞000D                                --------⍞000D                                =1   =0         -- carries⍞000D                                <0:01|2>        rewrite <0|1|2> by absorption⍞000D⍞000DBoth results are correct but differ in form, namely both are equivalent⍞000Deventual representations of two.⍞000D⍞000D===============================================================================⍞000D⍞000DEquivalent Eventual Representations:⍞000D-----------------------------------⍞000D⍞000DSome numbers have more than one conventional form but they are⍞000Dcomputationally (and mathematically) equivalent.  For example:⍞000D⍞000D        1.000...        or      <0|1|0> [10]⍞000D        0.999...        or      <0|0|9> [10]⍞000D⍞000DSuch forms are characterized by the fact that their RRUs will accept more⍞000Dthan one assumed initial carry-in which they will then generate as the⍞000Dcarry-out.  This is equivalent to adding zero (<0|0|0>) to a number but⍞000Dassuming either ''+'' or ''-'' as the initial carry-in instead of ''0''.⍞000D⍞000D        <0|1|0> will accept either ''0'' or ''-'' (the latter generating <0|0|9>)⍞000D        <0|0|9> will accept either ''0'' or ''+'' (the latter generating <0|1|0>)⍞000D⍞000DThe term "eventual" is usually applied only to a number represented with⍞000Da non-zero RRU (and an LRU of either <0| or ~<0|) that is equivalent to⍞000Danother representation with an RRU of |0>, not to a number represented⍞000Dwith an RRU of |0>.  Conventionally, an RRU of |0> is thought of as simply⍞000Dterminating the representation rather than repeating and leading to some⍞000D"eventuality"; unconventionally, |0> is no less an RRU than, say, |9> and⍞000Dboth are treated similarly herein.  In any case, there are equivalent (and⍞000Deventual) representations having nothing to do with zero.⍞000D⍞000DSuch equivalent eventual forms are not problematic.⍞000D⍞000D===============================================================================⍞000D⍞000DA Plethora of Zeros:⍞000D--------------------⍞000D⍞000DIt is obvious that <0|0|0> is computationally zero; it yields itself when⍞000Dadded to itself.  But so does <9|9|9> [10] -- a simple exercise.  In fact⍞000Dany number consisting of a single digit throughout is computationally⍞000Dzero.⍞000D⍞000DRecall Euler''s claim mentioned at the beginning -- this simply states that⍞000D⍞000D        <1|1|1> is zero for any base whatsoever!⍞000D⍞000DThis is one of the consequences of the statement (also aforementioned) of⍞000D⍞000D        b*S(b) - S(b) = 0       for any base b.⍞000D⍞000DSince all numbers consisting solely of a single digit are merely some⍞000Dmultiple of <1|1|1> then all of these must be computationally zero as⍞000Dwell.  And so are numbers that consist solely of some repeating sequence⍞000Dof digits, such as <824|824|824> since⍞000D⍞000D        (b∧3)*S(b) - S(b) = 0   for any base b⍞000D⍞000Dand similarly for⍞000D⍞000D        (b∧n)*S(b) - S(b) = 0   for any n.⍞000D⍞000DAs a notational convenience, a number like⍞000D        <0|0.0|0>⍞000Dwhich can be written as⍞000D        <0|.|0>         by absorption⍞000Dmay also be written as⍞000D        <0|0>           by convention (as aforementioned)⍞000Dor even more compactly as just⍞000D        <0>             by convention (established here).⍞000D⍞000DThe same may be done for any zero, e.g. <824|824|824> written compactly as⍞000D        <824>⍞000Dwhich may also be written as⍞000D        <248>⍞000Dor even⍞000D        <482>⍞000D⍞000DDue care must be taken when expanding a compact zero (such as <824>) into⍞000Da full form with double bars which ultimately needs to represent a⍞000Dbi-directionally infinite repeating sequence of digits (such as ...824...).⍞000DNote that "bi-directionally infinite" means that the number extends⍞000Dinfinitely to both the left and right, not that the number is infinite!⍞000D⍞000DThe following are possible and correct expansions of <824>:⍞000D⍞000D        <824|824>⍞000D        <824|8|248>⍞000D        <824|82|482>⍞000D        <248|24|824>⍞000D        <482|4824|824>⍞000D⍞000DThe novice might wish to always expand a compact zero into a full form⍞000Dwhere each RU contains the compact zero and the digit sequence between the⍞000Dbars is some number of replications (possibly none) of the compact zero.⍞000DThe resulting representation can then be modified by various absorptions⍞000Dinto or emissions out of the RUs as well as replication within either RU.⍞000D⍞000DFacility in writing appropriate zeros in full form comes with practice and⍞000Da little bit of attention.  Consider the balanced ternary representation⍞000D⍞000D        <0|+-+|+0> {-0+} or seven and three eighths.⍞000D⍞000DHere are three full form zeros that match one of the components of this⍞000Dbalanced ternary number (this skill will be useful in much of what⍞000Dfollows):⍞000D⍞000D         <0|000|00>⍞000D        <+-|+-+|-+>⍞000D        <0+|0+0|+0>⍞000D⍞000DSince all of these representations are computationally zero, the point (or⍞000Dscale factor) may be placed arbitrarily anywhere between the bars.⍞000D⍞000DBut how can there be so many zeros?  Isn''t there really just one zero?⍞000DThis is something like the particle zoo of 20th-century physics which⍞000Dsettled down only after the appropriate viewpoint was finally achieved.⍞000D⍞000D-------------------------------------------------------------------------------⍞000D⍞000DA Plethora of Numbers:⍞000D---------------------⍞000D⍞000DGiven any "simple" number like <0|1|0> (namely one), we can create a vast⍞000Dquantity of computationally equivalent forms by adding appropriate zeros⍞000Dto it, yielding things like⍞000D        <1|2|1>⍞000D        <8|9|8>⍞000D        <423|424|423>   or <234|24|423> or <342|4|423> by absorption.⍞000D⍞000DNow wait a minute!  What''s really going on here?⍞000D⍞000D===============================================================================⍞000D⍞000DThe Background (or Philosophy):⍞000D------------------------------⍞000D⍞000DFirst, think of what we really do when we write a (conventional) number.⍞000DWe assume a bi-directionally infinite blank slate (really filled with ''0''s)⍞000Dand a "point" (to indicate a known "units" position) upon which we will lay⍞000Dsome "digits" in appropriate positions, making these digits differ from the⍞000Dblank background.  We compute the value of our work (our number) by⍞000Dmeasuring the difference each digit has from the original blank (or ''0'')⍞000Dbackground.  We are constrained in the amount of variation we can make at⍞000Dany position by the base of our number system -- the value at each position⍞000Dmust be representable by one (and only one) of the digits from our ordered⍞000Dset of digits (this insures that the number that we want to write on our⍞000Dslate has a unique representation -- except for the possible eventual but⍞000Dequivalent representations described above).  This is what the Author⍞000Dbelieves was the true insight of those who long ago discovered that zero⍞000Dwas as much a digit as any other -- perhaps a "place holder" but a digit⍞000Dnonetheless.⍞000D⍞000DBut suppose that the background on our slate consists of ''1''s rather than⍞000D''0''s -- it''s still flat but everything is elevated a bit.  In order to⍞000Dmake a difference of one we need to write a ''2'', for a difference of two⍞000Dwe write a ''3'', ..., for eight a ''9'' -- but (assuming base ten) how do we⍞000Dmake a difference of nine?  We must write a ''2'' in the next digit⍞000Dposition on the slate (making a difference of one there, that is to say a⍞000Ddifference of ten here) and then write a ''0'' in the current position⍞000D(making its value be one less than the background of ''1''); combined, the⍞000Dresulting difference from the background is nine.⍞000D⍞000DAll of this remains true for background terrain that is hilly rather than⍞000Dflat -- it''s the variance from the expected background, not the actual⍞000Delevation, that determines the value of the number represented.  The only⍞000Dreal constraint is that the elevation (i.e. the value) at each location be⍞000Drepresentable (and represented) by one of the digits from our ordered set⍞000Dof digits.⍞000D⍞000DThere are an infinite number of backgrounds -- that''s why there are an⍞000Dinfinite number of zeros (they each just follow and do not deviate from⍞000Dtheir respective backgrounds).  That''s the view from the outside; from the⍞000Dinside, there is just one zero -- the current background.⍞000D⍞000DSo what determines the background?  Well, it''s just the contents of the⍞000DLRU.  The LRU specifies the expected terrain (the local zero); the rest of⍞000Dthe number specifies the deviations from the expectations.⍞000D⍞000DAnd it''s the first deviation (going from left to right in our conventional⍞000Drepresentation) that determines the sign of the entire number -- if the⍞000Delevation is higher than expected, the number is positive; if lower than⍞000Dexpected, the number is negative.  This is the intrinsic sign.⍞000D⍞000DThat''s why <824|6|248> [10] represents negative two -- the expected digit⍞000Dis not ''6'' but ''8''.⍞000D⍞000DIf the function of being zero is assigned to the first digit in the⍞000Dordered set of digits, it is not possible to represent a negative number⍞000Dwith a background (LRU) entirely of zero digits since a descent from the⍞000Dbackground is necessary in order to form a negative number.  Similarly, if⍞000Dthe function of being zero is assigned to the last digit in the ordered⍞000Dset of digits, it is not possible to represent a positive number with a⍞000Dbackground entirely of zero digits since an ascent from the background is⍞000Dnecessary in order to form a positive number.  Such numbers can be⍞000Drepresented, however, by choosing another background -- and there is an⍞000Dinfinite collection of backgrounds to choose from.⍞000D⍞000DAssigning the function of being zero to an intermediate digit in the⍞000Dordered set of digits permits the representation of both positive and⍞000Dnegative numbers all with a background consisting entirely of zero digits⍞000D(although another background could be chosen if desired).⍞000D⍞000DOne way of thinking about a background in a number representation is by⍞000Danalogy to a carrier wave with amplitude modulation -- but with the⍞000Drestriction that the amplitude is constrained by both upper and lower⍞000Dbounds.⍞000D⍞000D===============================================================================⍞000D⍞000DReal Subtraction vs. the Addition of a Complement:⍞000D-------------------------------------------------⍞000D⍞000DTo say that subtraction is merely the addition of a complement is not⍞000Dstrictly true.⍞000D⍞000DComplementing a number complements its background along with everything⍞000Delse; adding this number to another produces a sum with a "mixed"⍞000Dbackground which then conveniently more-or-less goes away in balanced⍞000Dsystems as well as in systems where zero is an extremal (the first or⍞000Dlast) digit in the ordered set of digits.  In balanced systems the⍞000Daddition of a complemented zero background by itself produces no carries⍞000Dduring the addition of the two backgrounds (producing an unchanged⍞000Dbackground); in the others a carry is (or can) be produced which ripples⍞000Dfrom the far right of the RRU and carries all the way to the far left of⍞000Dthe LRU (flipping the background back to zero).⍞000D⍞000DIt is seductive to think of subtraction as being the same as the addition⍞000Dof a complement -- but it''s not, as is well illustrated by considering⍞000Dskewed systems.  Subtraction differs from the addition of a complement in⍞000Dthat the resulting backgrounds differ by <0> - ~<0>.⍞000D⍞000DConsider four and two thirds less two thirds in the skewed system {-0+#}:⍞000D⍞000DDoing "real" subtraction yields the following:⍞000D⍞000D          <0|+0|#>      rewrite <0|+0|#>⍞000D        -    <0|#>            - <0|00|#>        by convention and emission⍞000D                                --------⍞000D                                =0   =0         -- carries⍞000D                                <0:+0|0> rewrite <0|+0|0> or four.⍞000D⍞000DAdding the complement of two thirds:⍞000D⍞000D⍞000D          <0|+0|#>      rewrite <0|+0|#>⍞000D        +   ~<0|#>            + <+|++|->        by convention and emission⍞000D                                --------⍞000D                                =0   =0         -- carries⍞000D                                <+:#+|+> rewrite <+|#+|+> which is still four⍞000D                                         but with a background biased by <+>.⍞000D⍞000D===============================================================================⍞000D⍞000DAdjusting the LRU (or the Background):⍞000D-------------------------------------⍞000D⍞000DSubtracting the background (the LRU) will clear the background if at all⍞000Dpossible.  Here are two base ten examples:⍞000D⍞000D          <47|52|47> [10] or positive five⍞000D        - <47|47|47> [10]⍞000D          ----------⍞000D          = 0 - = 0⍞000D          <00:05|00>  or  <0|5|0> by contraction and absorption.⍞000D⍞000D          <42|00|42> [10] or negative forty-two⍞000D        - <42|42|42> [10]⍞000D          ----------⍞000D          =-- - = 0⍞000D          <99:58|00>  or  <9|58|0> by contraction⍞000D                      or ~<0|41|9>⍞000D                      or ~<0|42|0> (see "Adjusting the RRU" below).⍞000D⍞000DIf the background cannot be cleared by this process, the LRU will become a⍞000Dsingle digit (the complement of ''0'') if ''0'' is either the first digit (and⍞000Dthe number is negative) or the last digit (and the number is positive) in⍞000Dthe ordered set of digits of the system being considered, e.g. {012} or⍞000D{=-0} respectively.  This won''t happen in a system where the ''0'' digit is⍞000Dnot extremal, e.g. {-0+} -- in these systems the background can always be⍞000Dleveled to zero.⍞000D⍞000DThat is, background clearing always works if the system''s ''0'' digit is not⍞000Dextremal since in such a system it is always possible to represent both⍞000Dpositive and negative numbers against a background (LRU) of zero.⍞000D⍞000DIn balanced or skewed systems, background clearing by subtraction is⍞000Dalways possible because there is wiggle room both up from zero (for⍞000Dpositive numbers) and down from zero (for negative numbers).  But for⍞000Dextremal systems where zero is at one end of the ordered set of digits,⍞000Dthere is wiggle room in only one direction.  If the the background cannot⍞000Dbe cleared by subtracting it from the number, then the background will⍞000Dsimply end up as a single digit, namely the complement of the zero digit.⍞000D⍞000DIf the ''0'' digit is extremal there are two cases:⍞000Da) Negative numbers cannot be represented against a background of zero⍞000D   (as for {012} and the like);⍞000Db) Positive numbers cannot be represented against a background of zero⍞000D   (as for {=-0} and the like).⍞000DIn either of these cases, though, subtracting the background will cause it⍞000Dto become a single extremal digit.⍞000D⍞000DHere are two more examples using the system {=-0}:⍞000D⍞000DCan the background be removed from <-|0|-> or <=|-|=> (both are one)?⍞000D⍞000D          <-|0|-> {=-0} rewrite <-|0|->⍞000D        - <->                 - <-|-|->⍞000D                                -------⍞000D                                =+  =0          -- carries⍞000D                                <=|=|0> or equivalently <=|-|=>⍞000D⍞000D          <=|-|=> {=-0} rewrite <=|-|=>⍞000D        - <=>                 - <=|=|=>⍞000D                                -------⍞000D                                =+  =0          -- carries⍞000D                                <=|=|0> or equivalently <=|-|=>⍞000D⍞000DSince our number is positive but there''s no wiggle room above zero,⍞000Dany attempt to clear the background simply yields the single-digit⍞000Dbackground <=> or ~<0>.⍞000D⍞000DThe LRUs of numbers do not need to be adjusted before either adding or⍞000Dsubtracting them; sums and differences of backgrounds simply result in⍞000Dother backgrounds that properly support the sum or difference.⍞000D⍞000DHere''s an extended example of the addition of two numbers with different⍞000D(and patently obscure) backgrounds.⍞000D⍞000DFirst, a bit of review of balanced ternary''s, well, "bits":⍞000D⍞000D        -1/2:   <0|--> or <0|->⍞000D        -3/8:   <0|-0>⍞000D        -1/4:   <0|-+>⍞000D        -1/8:   <0|0->⍞000D           0:   <0|00> or <0|0> or <0>⍞000D        +1/8:   <0|0+>⍞000D        +1/4:   <0|+->⍞000D        +3/8:   <0|+0>⍞000D        +1/2:   <0|++> or <0|+>⍞000D⍞000DNow, consider the addition problem⍞000D⍞000D         2.625⍞000D         1.25⍞000D         -----⍞000D         3.875⍞000D⍞000Dbut do it in balanced ternary {-0+} with weird backgrounds.  Here goes:⍞000D⍞000D         <0|2.625|0> [10]  or   <0|+0|-0> {-0+} three less three eighths⍞000D                                                (or two and five eighths)⍞000D                        rewrite <00|+0|-0>      by emission⍞000D                              + <0-|0-|0->      add a background of <0->⍞000D                                ----------⍞000D                                = 0   = 0       -- carries⍞000D                                <0-:+-|-->      rewrite <0-|+-|-->⍞000D                                                or <0-|+-|-> by contraction⍞000D                                                or <0-|0+|+> by equivalence⍞000D                                                or  <-0|+|+> by absorption⍞000D                                                or just two and five eighths.⍞000D⍞000D         <0|1.25|0> [10]   or   <0|+|+-> {-0+}  one and a fourth⍞000D⍞000D                        rewrite <00|0+|+->      by emission and replication⍞000D                              + <+-|+-|+->      add a background of <+->⍞000D                                ----------⍞000D                                     +#+0       -- carries⍞000D                                      |0+>      -- abort (wrong carry-out)!⍞000D⍞000D                                = 0  += +       -- carries⍞000D                                <+-:++|-->      rewrite <+-|++|-->⍞000D                                                or <-+|+|--> by absorption⍞000D                                                or <-+|+|-> by contraction⍞000D                                                or <-+|0|+> by equivalence⍞000D                                                or just one and a fourth.⍞000D⍞000DFinally, the balanced ternary addition problem:⍞000D⍞000D          <-0|+|+> {-0+}        two and five eighths⍞000D        + <-+|0|+> {-0+}        one and a fourth⍞000D          --------⍞000D              +#0       -- carries⍞000D               |->      -- abort (wrong carry-out)!⍞000D⍞000D    = -# 0#++ +=+       -- carries⍞000D    <+0:++:--:-|0>      rewrite <+0|++---|0> {-0+}⍞000D                             or  <0+|+---|0> by absorption⍞000D                             or three and seven eighths -- oh, really?⍞000D⍞000DLet''s clear this new background:⍞000D⍞000D          <0+|+---|0>   rewrite <0+|+---|00>    by replication⍞000D        - <0+>                - <0+|0+0+|0+>    by emission⍞000D                                -----------⍞000D                                = 0 --- = 0     -- carries⍞000D                                <00:00++|0->    rewrite <00|00++|0->⍞000D                                                or <0|00++|0-> by contraction⍞000D                                                or   <0|++|0-> by absorption⍞000D                                                or four less an eighth⍞000D                        which is just three and seven eighths!⍞000D⍞000D-------------------------------------------------------------------------------⍞000D⍞000DAdjusting the RRU:⍞000D-----------------⍞000D⍞000DFor any given system, one (and only one) of the following applies⍞000D(where 0 means the digit assigned the function of being zero⍞000Dand ~0 means the complement of that digit):⍞000D⍞000Da) 0 < ~0  as in {012} where ''0'' precedes ''2'' or {-0+#}  where ''0'' precedes ''+''⍞000Db) 0 = ~0  as in {-0+} where ''0'' equals   ''0'' or {=-0+#} where ''0'' equals   ''0''⍞000Dc) 0 > ~0  as in {=-0} where ''0'' follows  ''='' or {=-0+}  where ''0'' follows  ''-''⍞000D⍞000DIn case (a) if the RRU consists of a single digit that is the complement⍞000Dof ''0'' and that digit is extremal, then the RRU can be reduced to zero by⍞000Dadding <0> with an initial carry of ''+''; this can occur for {012} but⍞000Dnever for {-0+#}.⍞000D⍞000DIn case (b) no single digit can be both the complement of ''0'' and extremal⍞000D(well, maybe base one {0} but that''s not very interesting!).⍞000D⍞000DIn case (c) if the RRU consists of a single digit that is the complement⍞000Dof ''0'' and that digit is extremal, then the RRU can be reduced to zero by⍞000Dadding <0> with an initial carry of ''-''; this can occur for {=-0} but⍞000Dnever for {=-0+}.⍞000D⍞000DIn order for a non-zero RRU to be part of an equivalent eventual⍞000Drepresentation, it must consist of a single extremal digit; in order for⍞000Dit to be convertible to an RRU of zero, then ''0'' must be the other⍞000Dextremal digit.⍞000D⍞000DThere are, of course, other pairs of equivalent eventual representations⍞000Dthat do not involve the ''0'' digit; they always do, however, involve the⍞000Dextremal digits of the system being considered:⍞000D⍞000D        <0|0|+> {-0+} or one half,⍞000D        <0|+|-> {-0+} also one half.⍞000D⍞000DConverting a representation to an equivalent eventual representation might⍞000Dnot set the RRU to zero but it does not affect the LRU; arbitrarily⍞000Dsetting the RRU to zero, however, by subtracting the RRU from the number⍞000Dgenerally does alter the LRU.  Requiring that both the LRU and RRU be⍞000Dsimultaneously zero is to live in a world of integers only; requiring that⍞000Dthe LRU and RRU be the same is simply living in a different world of⍞000Dintegers.⍞000D⍞000D===============================================================================⍞000D⍞000D[Material needed here]⍞000D⍞000D-------------------------------------------------------------------------------⍞000D⍞000DBase Zero:⍞000D---------⍞000D⍞000DHere the ordered set of digits is empty, namely {} -- there''s nothing to⍞000Ddesignate as the zero digit.  Forget I even mentioned it ...⍞000D⍞000D-------------------------------------------------------------------------------⍞000D⍞000DBase One:⍞000D---------⍞000D⍞000DAgain, uninteresting.  At least there is a digit in {0} to designate as⍞000Dthe zero digit, namely ''0'' -- but there are no numbers that we can⍞000Drepresent other than zero itself, namely <0> (i.e., there is no way to⍞000Dmake a difference from the one-and-only background).⍞000D⍞000D-------------------------------------------------------------------------------⍞000D⍞000DNegative Bases:⍞000D--------------⍞000D⍞000DIf the base b is negative, then all even powers of the base are positive⍞000Dso we can consider this as a "normal" number in base b∧(2).⍞000D⍞000DConsider base negative two [-2] {01} as an example.  In this so-called⍞000Dnega-binary system, each even power of the base makes a positive (or zero)⍞000Dcontribution to the value of the number while each odd power of the base⍞000Dmakes a negative (or zero) contribution.  A brief examination will show⍞000Dthat nega-binary numbers have unique (but allowing for eventual)⍞000Drepresentations.  The digits here can be considered in pairs as the skewed⍞000Dbase four system [+4] {=-0+}:⍞000D⍞000D         [-2]   [+4]⍞000D        -----   ----⍞000D 0:     00000   0000⍞000D 1:     00001   000+⍞000D 2:     00110   00+=⍞000D 3:     00111   00+-⍞000D 4:     00100   00+0⍞000D 5:     00101   00++⍞000D 6:     11010   0+==⍞000D 7:     11011   0+=-⍞000D 8:     11000   0+=0⍞000D 9:     11001   0+=+⍞000D10:     11110   0+-=⍞000D11:     11111   0+--⍞000D12:     11100   0+-0⍞000D13:     11101   0+-+⍞000D14:     10010   0+0=⍞000D15:     10011   0+0-⍞000D16:     10000   0+00⍞000D         ...     ...    and so on.⍞000D⍞000DSince a negative base b can be "normally" represented as base b∧(2), it is⍞000Donly required that |b| > 1.  Consequently, negative bases may be disposed⍞000Dof as a mere curiosity.⍞000D⍞000D-------------------------------------------------------------------------------⍞000D⍞000DReciprocal Bases:⍞000D----------------⍞000D⍞000DA number represented in a base that is a reciprocal of an integer b > 1⍞000Dseems only to be the base b number in the opposite direction (with due⍞000Dattention being paid to negating the scale factor and adding one since the⍞000Ddirections of increasing/decreasing powers of the base are now swapped and⍞000Dthe point needs to be moved to the other side of the digit to which it is⍞000Dadjacent).  Lacking this interpretation, it is difficult to make sense of⍞000Dthe cardinality of any ordered set of digits as relating to the base.⍞000D⍞000D         <0\+(2)\-> [1/3] {-0+}         or <0\+--.\-> [1/3] {-0+}⍞000D⍞000Dshould likely be interpreted as⍞000D⍞000D         <0/+(-2)/-> [3] {-0+}          or <0/+--./-> [3] {-0+}⍞000D⍞000Dor, reversing the directionality of the representation, as⍞000D⍞000D         <-\(-2)+\0> [3] {-0+}          or <-\.--+\0>  [3] {-0+}⍞000Dor just⍞000D⍞000D         <-|(-2)+|0> [3] {-0+}⍞000D⍞000Din the more conventional "upright bar" notation.⍞000D⍞000DIf one could make some other coherent sense of reciprocal bases, it might⍞000Dthen be possible to make coherent sense of fractional bases in general.⍞000DShort of that, the Author is inclined to disregard all non-integral bases⍞000Das lacking even a modicum of curiosity.⍞000D⍞000DOn the other hand, just thinking about reciprocal bases makes clearer some⍞000Dthings that might otherwise remain rather opaque.  In particular, ponder⍞000Dthe power series generator:⍞000D⍞000D        1/(1-x) = P(x) = 1 + x∧(1) + x∧(2) + x∧(3) + x∧(4) + ...⍞000D⍞000DThis is generally considered only when 0 < x < 1 for which P(x) converges,⍞000De.g.⍞000D⍞000D        P(1/3) = 1.5⍞000D⍞000Dbut, when squinted at in just the right way, one notices that⍞000D⍞000D        P(1/3) = <0/1/1> [1/3] {012} or <0/.1/1>   [1/3] by assumed point⍞000D                                        <0/(0)1/1> [1/3] by definition of "dot"⍞000D                                        <0\(+1)1\1> [3] by interpretation above⍞000D                                        <0\1(0)\1>  [3] by moving the "dot"⍞000D                                        <0\1.\1>    [3] by definition of "dot"⍞000D                                        <0\1\1>     [3] by assuming the point⍞000D             or  <0|1|1> [3] {012}  in conventional "upright bar" notation⍞000D        which is one and a half.⍞000D⍞000DIf x > 1 then P(x) diverges, say for x = 3 -- or does it?⍞000D⍞000DClearly the generator has a well-defined (negative) value for P(3), so⍞000Dsquinting again in just the right way, one can see that⍞000D⍞000D        P(3) = <0/1> [3] {012}       or <1\0> [3]       by reversal of the bars⍞000D           or  <1|0> [3] {012}  in conventional "upright bar" notation⍞000D        which is negative one half (as we have seen before) --⍞000D        exactly what the generator evaluates to.⍞000D⍞000DIt''s an easy exercise to show that⍞000D⍞000D        P(b) + P(1/b) = <0|1|0> [b]⍞000D⍞000Dfor any base b > 0.⍞000D⍞000D===============================================================================⍞000D⍞000DThere''s Only One Base b (for any b):⍞000D-----------------------------------⍞000D⍞000DFor b zero, one, negative, or a unit fraction, these are all described⍞000D(and dismissed) above.  For any integral base b > 1 there are b different⍞000Dsystems (one for each choice of the digit to function as the zero), each⍞000Dwith its own addition table.  Or are there?⍞000D⍞000DConsider the three possible base three systems:⍞000D⍞000D  {012} -- standard ternary (sometimes {0+#} if using plus and double-plus);⍞000D  {-0+} -- balanced ternary; and⍞000D  {=-0} -- inverted ternary (using double-minus and minus)⍞000D⍞000Dand also a generic base three system:⍞000D⍞000D  {xyz} -- this could be any of the three systems above ...⍞000D⍞000DWhat can one say about a number represented in this generic {xyz} system?⍞000DConsider:⍞000D⍞000D        <x|yzz|y> {xyz}⍞000D⍞000DFirst, the number is positive since the first digit to deviate from the⍞000Dbackground <x> is y, which is ordered after x in {xyz} and thus x < y, so⍞000Dwe have intrinsic (positive) sign.⍞000D⍞000DSecond, the value of the number is determined solely by the deviations of⍞000Dthe digits from the expected background; let us compute:⍞000D        up one in the 3∧(2) position -- counts for +9;⍞000D        up two in the 3∧(1) position -- counts for +6;⍞000D        up two in the 3∧(0) position -- counts for +2;⍞000D        then up one all the way out from the implied point -- counts for +0.5;⍞000D        for a total of +17.5 -- seventeen and a half.⍞000D⍞000DFor reference, here are the addition tables for the three possible {xyz}⍞000Dsystems (where the left-most character in each sum pair is the carry --⍞000Dalways represented as one of ''0'', ''+'', or ''-''):⍞000D⍞000D                {012}                   {-0+}                   {=-0}⍞000D⍞000D              0   1   2               -   0   +               =   -   0⍞000D           ------------            ------------            ------------⍞000D        0 |  00  01  02         - |  -+  0-  00         = |  --  -0  0=⍞000D        1 |  01  02  +0         0 |  0-  00  0+         - |  -0  0=  0-⍞000D        2 |  02  +0  +1         + |  00  0+  +-         0 |  0=  0-  00⍞000D⍞000Dand the corresponding subtraction tables (where the left-most character in⍞000Deach difference pair is the carry):⍞000D⍞000D              0   1   2               -   0   +               =   -   0⍞000D           ------------            ------------            ------------⍞000D        0 |  00  -1  -2         - |  00  0-  -+         = |  00  0-  0=⍞000D        1 |  01  00  -1         0 |  0+  00  0-         - |  +=  00  0-⍞000D        2 |  02  01  00         + |  +-  0+  00         0 |  +-  +=  00⍞000D⍞000D⍞000DIf {xyz} is really {(x)yz}, meaning {012}, this is normally just written as:⍞000D⍞000D           <0|122|1>    or <0|+##|+> {0+#} if using plus and double-plus⍞000D                        which is seventeen and a half in {012}.⍞000D⍞000DNow suppose that {xyz} is really {x(y)z}, meaning {-0+}.  Then we have:⍞000D⍞000D           <-|0++|0>⍞000D        -  <-|---|->    adjust the background by subtracting <->⍞000D         -----------⍞000D         =0#+ ++ =0     -- carries⍞000D         <0:+:-0-|+>    rewrite <0|+-0-|+> {-0+}⍞000D                        which is recognizably seventeen and a half in {-0+}.⍞000D⍞000D           <-|0++|0>    Or with a different initial carry (+ rather than 0) ...⍞000D        -  <-|---|->⍞000D         -----------⍞000D         =0#+ +++=+     -- carries⍞000D         <0:+:-00|->    rewrite <0|+-00|-> {-0+}⍞000D⍞000DBut suppose that {xyz} is really {xy(z)}, meaning {=-0}.  Then we have:⍞000D⍞000D           <=|-00|->⍞000D        -  <=|===|=>    adjust background by subtracting <=>⍞000D           ---------⍞000D                +#0     -- carries⍞000D                 |0>    -- abort (wrong carry-out)!⍞000D⍞000D           =+ +++=+     -- carries⍞000D           <=:-00|->    rewrite <=|-00|-> ... no change -- but not surprising⍞000D                                          since subtracting <=> is similar⍞000D                                          to adding ~<=> which is just <0>.⍞000D⍞000DPerhaps one could try subtracting <-> instead ...⍞000D⍞000D           <=|-00|->⍞000D        -  <-|---|->⍞000D         -----------⍞000D         =0#+ ++ =0     -- carries⍞000D         <-:0:=-=|0>    rewrite <-|0=-=|0> {=-0}⍞000D                        Compare this pattern with <0|+-0-|+> {-0+} from above.⍞000D⍞000D           <=|-00|->    Or with a different initial carry (+ rather than 0) ...⍞000D        -  <-|---|->⍞000D         -----------⍞000D         =0#+ +++=+     -- carries⍞000D         <-:0:=--|=>    rewrite <-|0=--|=> {=-0}⍞000D                        Compare this pattern with <0|+-00|-> {-0+} from above.⍞000D⍞000DAnd certainly subtracting <0> won''t help either ...⍞000D⍞000D           <=|-00|->⍞000D        -  <0|000|0>⍞000D           ---------⍞000D           =0    =0     -- carries⍞000D           <=:-00|->    rewrite <=|-00|-> ... no change (not surprising).⍞000D                        We can''t make the background <0> since in this system⍞000D                        ''0'' is the topmost digit and there is no "up" from ''0''⍞000D                        to represent a positive number.⍞000D                        Nonetheless, <=|-00|-> {=-0} is seventeen and a half.⍞000D⍞000DThis behavior is not restricted to representations having a single-digit⍞000Dbackground.  Being somewhat more adventurous, consider the following:⍞000D⍞000D        <xy|zz|y> {xyz}⍞000D⍞000DIf {xyz} is really {(x)yz}, meaning <01|22|1> {012}, then:⍞000D⍞000D           <01|22|11>   by replication⍞000D        -  <01|01|01>   adjust background by subtracting <01>⍞000D           ----------⍞000D           = 0   = 0    -- carries⍞000D           <00:21|10>   rewrite <00|21|10>⍞000D                             or  <0|21|10> by contraction⍞000D                        which is recognizably seven and three eighths in {012}.⍞000D⍞000DIf {xyz} is really {x(y)z}, meaning <-0|++|0> {-0+}, then:⍞000D⍞000D           <-0|++|00>   by replication⍞000D        -  <-0|-0|-0>   adjust background by subtracting <-0>⍞000D        -------------⍞000D        = 0# +   = 0    -- carries⍞000D        <00:0+:-+|+0>   rewrite <00|0+-+|+0>⍞000D                             or  <0|0+-+|+0> by contraction⍞000D                             or   <0|+-+|+0> by absorption⍞000D                        which is recognizably seven and three eighths in {-0+}.⍞000D⍞000DIf {xyz} is really {xy(z)}, meaning <=-|00|-> {=-0}, then:⍞000D⍞000D           <=-|00|-->   by replication⍞000D        -  <=-|=-|=->   adjust background by subtracting <=->⍞000D           ----------⍞000D                +# 0    -- carries⍞000D                 |=0>   -- abort (wrong carry-out)!⍞000D⍞000D           =++ ++=++    -- carries⍞000D           <==:0-|-=>   rewrite <==|0-|-=>⍞000D                             or  <=|0-|-=> by contraction⍞000D                        which is still seven and three eighths in {=-0} even⍞000D                        though the best that can be accomplished, again, is⍞000D                        to reduce the background to <=> (i.e. ~<0>).⍞000D⍞000DThe Author suspects, however, that "<=|0-|-=>" would not be a proper⍞000Dresponse to the haberdasher''s question, "Sir, what is your hat size?".⍞000D[Suggested pronunciation: "LES-iz bar-NUL-neg bar-NEG-iz MOR"]⍞000D⍞000DA consequence of all this is that whether a base b number is represented⍞000Din the system {0,...,b-1} or {-1,0,..,b-2} or ... or {2-b,..,0,1} or⍞000D{1-b,...,0} is completely irrelevant; the representation encodes the value⍞000Dof the number regardless of which digit is assigned the function of being⍞000Dzero.  But it''s not necessary to actually change the symbols for the⍞000Ddigits in the representation when moving from one base b system to⍞000Danother.  All that is needed is to designate (perhaps arbitrarily) some⍞000Ddigit to be the zero digit which then entirely determines the properties⍞000Dof the addition and subtraction tables.⍞000D⍞000DHow can this be?  Remember that the background (the LRU) permeates the⍞000Dentire number representation and the value of that number is determined⍞000Dsolely by the variances from that background.  Adding two numbers simply⍞000Dsums the variances as well as the backgrounds themselves, producing summed⍞000Dvariances against a summed background.  And one may (arbitrarily)⍞000Dinterpret that sum in a base b system other than the system that was used⍞000Dto produce that sum.⍞000D⍞000DThe choice of a base b system applies to both the addend and augment (or⍞000Dsubtrahend and minuend) and determines the addition (or subtraction) table⍞000Dto be used.  Choosing different base b systems to sum two base b numbers⍞000Dwill produce different backgrounds, but these "different" sums will always⍞000Drepresent the same base b number.⍞000D⍞000DHere again are the addition tables for the three possible {xyz} systems⍞000Dbut in a more abstract form (where the left-most character in each sum⍞000Dpair is the carry):⍞000D⍞000D               {(x)yz}                 {x(y)z}                 {xy(z)}⍞000D⍞000D              x   y   z               x   y   z               x   y   z⍞000D           ------------            ------------            ------------⍞000D        x |  0x  0y  0z         x |  -z  0x  0y         x |  -y  -z  0x⍞000D        y |  0y  0z  +x         y |  0x  0y  0z         y |  -z  0x  0y⍞000D        z |  0z  +x  +y         z |  0y  0z  +x         z |  0x  0y  0z⍞000D⍞000Dand the corresponding subtraction tables (where the left-most character in⍞000Deach difference pair is the carry):⍞000D⍞000D              x   y   z               x   y   z               x   y   z⍞000D           ------------            ------------            ------------⍞000D        x |  0x  -z  -y         x |  0y  0x  -z         x |  0z  0y  0x⍞000D        y |  0y  0x  -z         y |  0z  0y  0x         y |  +x  0z  0y⍞000D        z |  0z  0y  0x         z |  +x  0z  0y         z |  +y  +x  0z⍞000D⍞000D⍞000D===============================================================================⍞000D⍞000DSymbols vs. Values:⍞000D------------------⍞000D⍞000D[forthcoming commentary]⍞000D⍞000D===============================================================================⍞000D⍞000DNormalization:⍞000D-------------⍞000D⍞000DSome representations of a number are more easily comprehended than others⍞000Deven though all of them are equally valid for purposes of computation.⍞000DThe normalization of a representation simply produces a form that is as⍞000Dconventional and compact as possible.⍞000D⍞000DConverting from one form of base b to another form of base b is simply a⍞000Dmatter of reassigning the function of being zero to a different digit in⍞000Dthe ordered set of digits (and using different addition and subtraction⍞000Dtables, of course); consequently, without loss of generality, the first⍞000Ddigit from the ordered set of digits may always be assigned the function⍞000Dof being zero -- later converting to another form of base b if required.⍞000DNote that these so-called conversions do not require any modification of a⍞000Dnumber''s representation (it remains unchanged); relabeling the digits is⍞000Dpermitted, of course, but this does not change the relationship of one⍞000Ddigit to another in the representation.  Conversion is simply a matter of⍞000Darbitrarily declaring one of the digits in the system to be the zero⍞000Ddigit.⍞000D⍞000DIn much of what now follows, it is convenient (and clearer) to make the⍞000Dsimplifying assumption that a base b system is just {0,1,..,b-1}.⍞000D⍞000DOnce a digit has been chosen to function as the zero in the system, the⍞000DLRU (i.e. the background) can be adjusted and contracted to a single zero⍞000Ddigit (or its complement).  The RRU can then be contracted and possibly⍞000Dadjusted (if it''s an eventual form) to match the LRU.⍞000D⍞000DFinally, each RU should absorb as much as possible (this may require the⍞000Dintroduction and adjustment of a scale factor between the bars).  If no⍞000Ddigits remain between the bars and the scale factor is zero (or just the⍞000Dpoint), the bars (and point) may be replaced by a single bar.⍞000D⍞000DIf the LRU is the complement of the zero digit, one may complement the⍞000Dentire representation and prefix a ''~'' character for display purposes.⍞000D⍞000D[Examples needed here]⍞000D⍞000D===============================================================================⍞000D⍞000DReciprocals:⍞000D-----------⍞000D⍞000D[forthcoming -- soon]⍞000D⍞000D===============================================================================⍞000D⍞000DMultiplication:⍞000D--------------⍞000D⍞000DWhile addition is the sum of two bi-directionally infinite numbers,⍞000Dmultiplication is essentially the infinite summation of such numbers, each⍞000Dbeing a single-digit multiple of the multiplicand with an appropriate⍞000Dscale factor.  With a little work, multiplication can be reduced to the⍞000Dsum of just four bi-directionally infinite numbers, each being formed from⍞000Dproducts of finite extent.⍞000D⍞000D[forthcoming -- soon]⍞000D⍞000D===============================================================================⍞000D⍞000DDivision:⍞000D--------⍞000D⍞000D[forthcoming -- eventually]⍞000D⍞000D===============================================================================⍞000D⍞000DJust-In-Time-Subtraction (JITS) Revisited:⍞000D-----------------------------------------⍞000D⍞000DHalving a (balanced) ternary integer N by doing a single subtraction --⍞000Dconceptually this is computing M = 3*M - 2*M where 2*M = N⍞000D⍞000DIf N is actually divisible by two (i.e. even), the procedure yields the⍞000Dcorrect result.  Does it also yield the correct result if N is odd?⍞000D⍞000DLet N = 7, i.e. <0|+-+|0> {-0+};⍞000Dthe JITS procedure yields <-|-0-|0> which can be rewritten as <-|0-|0>.⍞000D⍞000DBy subtracting a convenient zero, say <->, one can readjust the background⍞000Dof this result:⍞000D⍞000D          <-|0-|0>⍞000D        - <-|--|->⍞000D          --------⍞000D          =0   =0               -- carries⍞000D          <0|+0|+>      which is recognizable as three and a half.⍞000D⍞000DSo, yes, the JITS procedure also produces the correct result if N is odd⍞000D-- one merely needs to adjust the background of the result to get it to⍞000Dzero elevation in order to more clearly see the result.⍞000D⍞000D===============================================================================⍞000D⍞000DWhat''s the REAL Difference Between 1''s- and 2''s-Complement Arithmetic:⍞000D---------------------------------------------------------------------⍞000D⍞000DModern computing hardware generally represents integers as binary with⍞000Dintrinsic sign, abandoning attempts to represent integers as (extrinsic)⍞000Dsign and magnitude.⍞000D⍞000DSo positive integers are represented as <0|n|0> [2] where the LRU is⍞000Dexplicitly represented as a high-order bit, the RRU is implicitly assumed,⍞000Dand n (the number) is represented by a fixed-length string of binary⍞000Ddigits (bits) typically of length word-size less one.⍞000D⍞000DNegative integers are simply the complements of corresponding positive⍞000Dintegers which complements the LRU background (the so-called "sign" bit)⍞000Dwithout altering the bit-length of n.  But what is done with the RRU?⍞000D⍞000DFor 1''s-complement hardware, the RRU is simply left unchanged (i.e. the⍞000Dbackground is assumed to extend both left and right).⍞000D⍞000DBut 2''s-complement hardware always assumes that the RRU is |0> independent⍞000Dof the background; consequently, an RRU carry-in of ''+'' is arbitrarily⍞000Dassumed for any complement and will convert the |1> (the complemented |0>)⍞000Dback to |0> carrying out a ''+'' across the bar.  Unfortunately, if all the⍞000Dbits between the bars are also one, the carry continues across the other⍞000Dbar and finally carries out of the LRU as well.  No carry-in/carry-out⍞000Drules are violated, but <1|1|1> will always get converted to <0|0|0> (this⍞000Dis either good or bad, depending on one''s computational point of view).⍞000DSuch hardware usually implements a "logical" complement in addition to an⍞000D"arithmetic" complement, as well as a number of other "logical" operations⍞000Dthat function rather like their 1''s-complement "arithmetic" counterparts.⍞000D⍞000DThe Author remains computationally agnostic on this point.⍞000D⍞000D===============================================================================⍞000D⍞000DCredits:⍞000D-------⍞000D⍞000DThe Author''s co-worker and office mate, John Halleck, deserves much credit⍞000Dfor being a sounding board for bizarre ideas over many of these past years.⍞000DHe has also been a persistent prod to the Author to document some of these⍞000Dideas in order to Make the Intuitively Obvious Understandable.⍞000D⍞000DThe "Just-in-Time Subtraction" procedure divides a base-b number by b-1.⍞000DThe name was coined by Dylan Pocock, another of the Author''s co-workers.⍞000D⍞000DTo John Scholes I owe thanks for taking an interest in the JITS procedure⍞000Dand doggedly searching out its source -- and then taking an interest in the⍞000Dideas (with clarifications) that led to such a scheme in the first place.⍞000D⍞000D-------------------------------------------------------------------------------⍞000D⍞000DComments:⍞000D--------⍞000D⍞000DThe JITS procedure actually generates a complete and accurate division by⍞000Db-1 without remainder -- provided that one properly handles bi-directionally⍞000Dinfinite strings of digits (in some base b) as representations of rational⍞000Dnumbers.  In such a world there are multiple but equivalent representations⍞000Dof every rational number (both positive and negative), all of which are⍞000Damenable to even simple pencil-and-paper calculation.  The JITS procedure⍞000Dalways generates a rational result without remainder but possibly in one of⍞000Dthose equivalent representations.⍞000D⍞000DConcerning balanced ternary, one will undoubtedly notice that a simple test⍞000Dfor evenness (and therefore integral divisibility by two) is just to sum the⍞000Dnon-zero digits of the number (assuming RUs of zero), iteratively as needed⍞000D("casting out signs" is like "casting out nines" in base ten).⍞000DPre-rounding/truncating the number to induce evenness would eliminate the⍞000Dneed for a post-adjustment of any non-integral division by two.⍞000D⍞000DIt has been pointed out that the phrase "Replication (or Repetition) Unit"⍞000Dis somewhat ponderous; the terminology "Repetition Sequence" has been⍞000Dsuggested as a possibly more appropriate replacement.  The two terms⍞000D"Replication" and "Unit" got into this fine mess during some of the Author''s⍞000Doriginal doodling regarding representations of rational numbers; these terms⍞000Dhave simply survived, but are mostly replaced by the somewhat semantically⍞000Dempty moniker "RU".  The Author remains open to further suggestions.⍞000D⍞000DI originally thought of a continual carry to the left as somehow⍞000Ddisappearing over the horizon ("To Infinity and Beyond!") so as to be⍞000Dout-of-sight and out-of-mind.  And I always wanted to avoid invoking any⍞000Dnotion of "end-around" carries in all contexts -- a notion that seemed to be⍞000Dexpedient in many cases but which I felt obscured a more fundamental⍞000Dunderstanding of what was going on.  All of this eventually got reduced to⍞000Dthe "carry out what you carry in" maxim.  An end-around carry, in any case,⍞000Dis merely a convenient fiction -- RU carries always originate at the⍞000Dlow-order end, propagate through the RU, and then carry out of the⍞000Dhigh-order end (there''s no "around" around here).  If the carry-out differs⍞000Dfrom the carry-in, then the initially assumed carry-in is incorrect and the⍞000Dcomputation must be redone using the correct initial carry (which one can''t⍞000Dactually know until the carry-out is known).⍞000D⍞000DI toyed with the idea of placing the initial (low-order) carry over the⍞000Dfinal delimiter of an RU but decided in the end (pun intended) that it⍞000Dreally belongs in line with the (low-order) digit to which it applies.⍞000DSimilarly, the carry-out skips the leading non-digit punctuation and lines⍞000Dup with the digit to which it applies (the ''='' or ''#'' being placed over the⍞000Dleading punctuation to indicate whether the carry-out equaled the carry-in⍞000Dor not).⍞000D⍞000DAdditionally, I have come to think of the background and its reduction to a⍞000Dsea of ''0''s as being akin to the particle physicist''s trick of⍞000Drenormalization to get rid of those "damned infinities" (as Richard Feynman⍞000Dreferred to them).  And if we cannot computationally reduce the background⍞000Dto zero but only to the complement of zero, then we are no worse off than⍞000Dcomputer scientists who do this all the time with their "high-order sign⍞000Dbit(s)".⍞000D⍞000D-------------------------------------------------------------------------------⍞000D⍞000DConnections:⍞000D-----------⍞000D⍞000DI originally came to the problem of the continual carries (actually borrows)⍞000Dwhile working on the JITS procedure.  But this ultimately seemed no more⍞000Dbizarre than the continual carries (of zero) that fundamentally happen for⍞000Devery addition/subtraction operation -- carries that as school children we⍞000Dwere taught to ignore (if they were ever mentioned at all), but they are⍞000Dthere nonetheless.  The JITS procedure was trying to tell me something -- it⍞000Dcertainly wasn''t just random noise heading over the far horizon!  And if it⍞000Dmeant anything at all, it had to be a representation of the remainder, or⍞000Dsomething like that ...⍞000D⍞000DAnd the JITS procedure itself was only a consequence of considering what is⍞000Doften called the "Hailstone Problem": pick n > 0 and odd, multiply by three,⍞000Dadd one, cast out all factors of two, cook ''til (d)one.  It seemed obvious⍞000Dthat patterns of numbers might be usefully investigated in base three in⍞000Dorder to gain some insights -- but that division by two was just plain⍞000Dnasty!  Hence JITS.⍞000D⍞000DThe idea for JITS initially sprang from remembering an old (base ten)⍞000Daddition puzzle:⍞000D⍞000D          SEND⍞000D        + MORE⍞000D         -----⍞000D         MONEY⍞000D⍞000DThe idea for the RU notation was unashamedly swiped from quantum mechanics⍞000D(the "bra" and "ket" notation) where it is used for an entirely different⍞000Dpurpose.⍞000D⍞000DThe Middle Ages counting board (essentially a marked table top or "board")⍞000Dwas a common piece of household furniture.  Even after losing its markings,⍞000Dit is still commonly known as a "counter".  A portable set of markings on a⍞000D"checkered" cloth was popular with tax collectors who worked for the⍞000D"exchequer".⍞000D⍞000DThe word "xyzzy" comes from an early interactive fantasy role playing game⍞000Dcalled Adventure (written in Fortran as I recall); the word was (and I⍞000Dsuppose still is) carved in stone and effected magical transport when⍞000Duttered, er, typed.  The fact that <xy|zz|y> is also my hat size I chalk up⍞000Dto the general perversity of Life, the Universe, and Everything -- but for⍞000Dthat we really need <x|yyzx|x>.⍞000D⍞000D===============================================================================⍞000D⍞000DBack to: →ratsum←⍞000D⍞000DSee also: JitSub bt esh ary ratsum phinary fibonacci⍞000DSee also: eval.dws/notes.bta⍞000D⍞000DIndex:Eide numbers|polynomial|rational number|skewed four|balanced ternary⍞000DIndex:Just-In-Time-Subtraction|subtraction, just-in-time⍞000DIndex;Eide L.N.|Euler L.' 
