'saved ← {seed} ##.nspack ref                ⍝ Share arrays across space tree.⍞000D⍞000DNspack  takes a reference to a namespace to be packed by _array sharing_. Ident-⍞000Dical arrays and subarrays are shared among all of the variables in the space and⍞000Dall  of  its children. In particular, if the argument is a reference to the root⍞000Dspace  (#), all variables in the workspace are shared. This may take a consider-⍞000Dable  time  but  could  result in a significant saving in a workspace containing⍞000Dcomplex nested arrays. The result is the number of workspace bytes saved.⍞000D⍞000DNspack may be appropriate for reducing the size of a workspace, prior to deploy-⍞000Dment, when file storage is at a premium. For example, when saving to a PDA.⍞000D⍞000DNotice that the result of ⎕size can be misleading as it ignores subarray sharing⍞000Dwhen counting the bytes consumed by a nested structure.⍞000D⍞000DThe  optional  left argument is an array of values to be considered for sharing.⍞000DDyalog automatically shares literal constants from lines of code (or execute (⍎)⍞000Dexpressions)  across  the  whole workspace. Examples of literal constants are 9,⍞000D''~∇∇'' and 2 3 4 in:⍞000D⍞000D    class←9,(''~∇∇''∊incl)/2 3 4⍞000D⍞000DGiven that these values are already present in the workspace, nspack may as well⍞000Dshare them with any arrays that happen to contain an identical subarray.  By de-⍞000Dfault,  "common" literals:  0, 1, ¯1, 2, ⍬, '''' and '' '' are used. If reducing the⍞000Dsize  of  the saved workspace is _very_ important, the following function may be⍞000Dused  to  harvest  pointers to all literal values present in the workspace. Note⍞000Dhowever,  that for a non-trivial workspace, it takes a depressingly long time to⍞000Drun (see example below).⍞000D⍞000D      literals←{                                  ⍝ Unique literal values.⍞000D          lines←∪1 enlist(refs ⍵).(⎕NR¨↓⎕NL 3 4)  ⍝ function source lines.⍞000D          tokns←∪1 enlist tokens¨lines            ⍝ tokens within lines.⍞000D          ltoks←∪{((⊃¨⍵)∊''''''¯'',⎕D)/⍵}tokns        ⍝ literal tokens.⍞000D          1↓⍎¨''0'',ltoks                           ⍝ literal values.⍞000D      }⍞000D⍞000DTechnical note:⍞000DNspack  includes _copies_ of functions →refs← and →pack←. This is so that it may⍞000Dbe copied stand-alone into a subject workspace.⍞000D⍞000DBugs:⍞000DNspack  does  not  penetrate nested arrays looking for refs to (unnamed) spaces.⍞000DThis means that array values within such spaces are not shared.⍞000D⍞000D    refs←⎕ns¨'''' ''''                  ⍝ array of refs containing,⍞000D    refs.(a←⍳3)                     ⍝ distinct values.⍞000D    nspack #                        ⍝ no sharing :-(⍞000D0⍞000D⍞000DExamples:⍞000D⍞000D      nested←⍳¨∘⍳¨∘⍳¨∘⍳¨⍳3 3        ⍝ complex nested array.⍞000D      ⎕size''nested''                 ⍝ size in bytes.⍞000D19484⍞000D      nspack #                      ⍝ nspack recovers most of the space.⍞000D17996⍞000D      nspack #                      ⍝ subsequent pack saves no more space.⍞000D0⍞000D      ⎕size''nested''                 ⍝ size "appears" not to have changed.⍞000D19484⍞000D⍞000D⍝ The following sequences show savings in various workspaces.⍞000D⍞000D⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍞000D⍞000D      )xload tube⍞000DC:\Dyalog90\samples\dfns\tube saved Sun Jul 28 14:30:58 2002⍞000D⍞000D      compile∘⍎¨↓⎕nl 9              ⍝ compile graphs for all routes.⍞000D⍞000D      )copy dfns nspack⍞000DC:\Dyalog90\samples\dfns\dfns saved Sat Oct 12 00:18:00 2002⍞000D⍞000D      nspack #                      ⍝ takes a while but saves 86k.⍞000D88144⍞000D      )erase nspack⍞000D⍞000D      ''wsdiff''⎕se.⎕cy''dfns''         ⍝ copy wsdiff to check that⍞000D      ⎕se.wsdiff''''                  ⍝ changes are transparent.⍞000D⍞000D⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍞000D⍞000D      )xload wdesign⍞000DC:\Dyalog90\ws\wdesign saved Fri Mar  2 14:19:54 2001⍞000D⍞000D      )copy dfns nspack⍞000DC:\Dyalog90\samples\dfns\dfns saved Fri Oct 11 23:54:22 2002⍞000D⍞000D      nspack #                      ⍝ saves 130k.⍞000D133308⍞000D      )erase nspack⍞000D⍞000D      ⎕se.wsdiff''''                  ⍝ check changes are transparent.⍞000D⍞000D⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍞000D⍞000D⍝ The following takes an inordinate time to run, but shares every last byte.⍞000D⍞000D      )xload wdesign⍞000DC:\Dyalog90\ws\wdesign saved Fri Mar  2 14:19:54 2001⍞000D⍞000D      literals←{                                  ⍝ unique literal values.⍞000D          lines←∪1 enlist(refs ⍵).(⎕NR¨↓⎕NL 3 4)  ⍝ function lines.⍞000D          tokns←∪1 enlist tokens¨lines            ⍝ tokens.⍞000D          ltoks←∪{((⊃¨⍵)∊''''''¯'',⎕D)/⍵}tokns        ⍝ literal tokens.⍞000D          1↓⍎¨''0'',ltoks                           ⍝ literal values.⍞000D      }⍞000D⍞000D      )copy dfns nspack refs enlist tokens time⍞000DC:\Dyalog90\samples\dfns\dfns saved Sun Oct 13 13:02:12 2002⍞000D⍞000D      (literals time #)nspack #     ⍝ saves extra 14k (c.f. above).⍞000D15:37.18⍞000D144488⍞000D⍞000D      )erase literals nspack refs enlist tokens time⍞000D⍞000D      ⎕se.wsdiff''''                  ⍝ check changes are transparent.⍞000D⍞000D⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍞000D⍞000D⍝ The following example shows the difference between sharing⍞000D⍝ _within_ as opposed _among_ a number of namespaces.⍞000D⍞000D      ''x.a'' ''x.b'' ''x.c''⎕ns¨⊂''''      ⍝ make three spaces.⍞000D⍞000D      x.(a b c).(var←⍳¨∘⍳¨∘⍳¨∘⍳¨⍳3 3)   ⍝ populate separately.⍞000D⍞000D      nspack¨x.(a b c)              ⍝ packing _within_ spaces saves 17.5k each.⍞000D17952 17952 17952⍞000D⍞000D      nspack x                      ⍝ packing _among_ spaces saves a further 3k.⍞000D3064⍞000D⍞000DSee also: pack refs Data_compression⍞000D⍞000DIndex:packing|compression|enlist' 
