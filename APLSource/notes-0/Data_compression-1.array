'───────────────────────⍞000Dpack-: Data Compression⍞000D───────────────────────⍞000DThese functions, mostly from Veli-Matti Jantunen, pack and unpack data. The left⍞000Dargument  of  each  function  (default 1)  determines whether the right argument⍞000Dis to be 1:compressed or 0:expanded (mnemonic: 1-pack, 0-unpack).⍞000D⍞000D          text ≡ 0 packT 1 packT text⍞000D    1⍞000D⍞000Dpacks are suitable for compressing:⍞000D⍞000D    B H R S U Z 4   bitmaps and images⍞000D    D H S T Z       text,⍞000D    N Z             sparse, simple numeric or character arrays.⍞000D⍞000DWe  can  test the relative performance of the various approaches with a function⍞000Dthat compresses and expands  its argument. [pack_test] takes an array to pack as⍞000Dright argument and a 1-character algorithm code as left argument.⍞000D⍞000D    pack_test←{                         ⍝ Test pack/unpack.⍞000D        pack←⍎''pack'',⍺                  ⍝ compression function.⍞000D        ais←⎕AI ⋄ cmp←  pack ⍵          ⍝ compressed data.⍞000D        aic←⎕AI ⋄ exp←0 pack cmp        ⍝ re-expanded data.⍞000D        aix←⎕AI                         ⍝ expansion time.⍞000D        exp≢⍵:''N / A''                   ⍝ unpack & check.⍞000D        times←¯2-/2⊃¨ais aic aix        ⍝ processor times.⍞000D        mill←,↑6 0∘⍕¨times              ⍝ milliseconds processor time.⍞000D        fmto←⎕SIZE↑2 4⍴''exp cmp ''       ⍝ before and after sizes.⍞000D        pcent←''%'',⍨4 0⍕100×÷/⌽-\fmto    ⍝ % reduction (bigger is better).⍞000D        csize←6 0⍕¯1↑fmto               ⍝ compressed size.⍞000D        csize,pcent,mill                ⍝ size compression milliseconds.⍞000D    }⍞000D⍞000DResult fields are:⍞000D⍞000D    csize   size of compressed data.⍞000D    redn%   percentage reduction (bigger is better).⍞000D    cmill   processor milliseconds for compression.⍞000D    xmill   processor milliseconds for expansion.⍞000D⍞000DThe compression algorithms were tested against 3 arrays:⍞000D⍞000DA bitmap:⍞000D⍞000D      ''dapl''⎕wc''BitMap'' ''c:/dyalog90/dyalog.bmp''    ⍝ Dyalog APL bitmap⍞000D⍞000DA text vector:⍞000D⍞000D      notes.Data_compression.⍞000D⍞000DA sparse numeric matrix:⍞000D⍞000D      nmat←{⍵×0=10|⍵}?100 100⍴1000⍞000D⍞000D... leading to:⍞000D⍞000D      algs←''BDHNQRSTUX4Z''                           ⍝ algorithms: packB, ···⍞000D      data←notes.Data_compression dapl.CBits nmat   ⍝ subject data.⍞000D      size←{⎕size''⍵''}                               ⍝ size function.⍞000D      ttls←⍕¨''Text'' ''BitMap'' ''Sparse'',¨size¨data    ⍝ initial data sizes.⍞000D⍞000D      ('' '',algs),ttls⍪algs∘.pack_test data          ⍝ comparison table.⍞000D┌─┬───────────────────────┬───────────────────────┬───────────────────────┐⍞000D│ │Text 7632              │BitMap 181940          │Sparse 20020           │⍞000D├─┼───────────────────────┼───────────────────────┼───────────────────────┤⍞000D│B│  7652   0%     0    16│  6108  97%     0    16│  3240  84%     0     0│⍞000D├─┼───────────────────────┼───────────────────────┼───────────────────────┤⍞000D│D│  4612  40%    15     0│N / A                  │N / A                  │⍞000D├─┼───────────────────────┼───────────────────────┼───────────────────────┤⍞000D│H│  4552  40%    16    78│  5800  97%    15   531│  2508  87%    15   110│⍞000D├─┼───────────────────────┼───────────────────────┼───────────────────────┤⍞000D│N│  6768  11%     0     0│187688  ¯3%     0     0│  3384  83%     0     0│⍞000D├─┼───────────────────────┼───────────────────────┼───────────────────────┤⍞000D│Q│  4676  39%     0    16│ 13980  92%    15    32│  3760  81%     0     0│⍞000D├─┼───────────────────────┼───────────────────────┼───────────────────────┤⍞000D│R│  9728 ¯27%    16     0│ 15508  91%     0     0│  5924  70%     0     0│⍞000D├─┼───────────────────────┼───────────────────────┼───────────────────────┤⍞000D│S│  4764  38%    15   500│  5800  97%    15  4649│  2612  87%    15   390│⍞000D├─┼───────────────────────┼───────────────────────┼───────────────────────┤⍞000D│T│  5612  26%    16     0│N / A                  │N / A                  │⍞000D├─┼───────────────────────┼───────────────────────┼───────────────────────┤⍞000D│U│  7816  ¯2%     0     0│  5776  97%    16     0│ 10284  49%     0     0│⍞000D├─┼───────────────────────┼───────────────────────┼───────────────────────┤⍞000D│X│  6704  12%    46    16│  5780  97%    47    15│  6560  67%    16    15│⍞000D├─┼───────────────────────┼───────────────────────┼───────────────────────┤⍞000D│4│  8612 ¯13%   125   172│ 12880  93%   265   296│  6264  69%   109   125│⍞000D├─┼───────────────────────┼───────────────────────┼───────────────────────┤⍞000D│Z│  3816  50%   250   265│  2536  99%   671   249│  2556  87%   219   156│⍞000D└─┴───────────────────────┴───────────────────────┴───────────────────────┘⍞000D⍞000DFor  comparison, the following examples show some different packings of the same⍞000Darray ''Mississippi''.⍞000D⍞000D    packB''Mississippi''                  ⍝ simple array packing.⍞000D┌─────────┬─────────────────────┬───────────────────────────────┐⍞000D│1 11 Misp│1 1 1 0 1 1 0 1 1 0 1│0 0 1 0 1 0 1 0 0 1 0 1 0 1 1 1│⍞000D└─────────┴─────────────────────┴───────────────────────────────┘⍞000D⍞000D    packD''Mississippi''                  ⍝ Pack char array to boolean vector.⍞000D0 0 0 1 0 0 1 0 0 1 0 1 1 0 0 0 0 0 0 1 1 0 0 0 1 1 0 0 1 0 0 1 0 0 0 1 1 0 0 1⍞000D      0 0 0 0 0 0 1 0 0 1 1 0 1 1 0 0 0 1 0 1 0 0 1 0 0 1 0 1 0 0 1 0 0 1 0 1 1⍞000D      0 1 1 0 1 0⍞000D⍞000D    packH''Mississippi''                  ⍝ Huffman packing.⍞000D┌──┬────┬───────┬─────────────────────────────────────────┐⍞000D│11│sMpi│1 3 3 2│1 0 0 1 1 0 0 1 1 0 0 1 1 1 0 1 1 0 1 1 1│⍞000D└──┴────┴───────┴─────────────────────────────────────────┘⍞000D⍞000D    packQ''Mississippi''                  ⍝ Assorted uniQues packer.⍞000D┌────┬────┬───────────────────────────────────────────────────────────┐⍞000D│ispM│1 11│1 0 0 0 1 0 1 0 0 1 0 0 1 0 1 0 0 1 0 0 1 0 1 1 0 1 1 0 1 0│⍞000D└────┴────┴───────────────────────────────────────────────────────────┘⍞000D⍞000D    packR''Mississippi''                  ⍝ RLE packing.⍞000D┌──┬───────────────┬────────┐⍞000D│11│1 1 2 1 2 1 2 1│Misisipi│⍞000D└──┴───────────────┴────────┘⍞000D⍞000D    packS''Mississippi''                  ⍝ Shannon-Fano packing.⍞000D┌──┬────┬───────┬───────────────────────────────────────────────────────────┐⍞000D│11│ispM│1 2 3 3│0 1 0 1 1 0 1 1 1 1 1 1 0 1 0 1 0 0 1 0 1 0 0 1 1 0 1 1 0 0│⍞000D└──┴────┴───────┴───────────────────────────────────────────────────────────┘⍞000D⍞000D    packU''Mississippi''                  ⍝ Unique packing.⍞000D┌──┬────┬─────────────────────┐⍞000D│11│Misp│0 1 2 2 1 2 2 1 3 3 1│⍞000D└──┴────┴─────────────────────┘⍞000D⍞000D    packX''Mississippi''                  ⍝ Text packing.⍞000D┌────┬────┬───────────────────────────────────────────────────────────────────┐⍞000D│Misp│1 11│0 1 0 0 1 0 1 0 0 1 1 0 0 0 0 1 0 1 0 0 1 0 0 0 1 1 0 0 0 0 0 1 1 1│⍞000D└────┴────┴───────────────────────────────────────────────────────────────────┘⍞000D⍞000D    pack4''Mississippi''                  ⍝ Quad-tree packing.⍞000D┌────┬──┬──────────────────────────────────────────┐⍞000D│Misp│11│¯3 0 1 ¯1 2 ¯1 2 1 ¯2 2 ¯1 2 1 ¯1 3 ¯1 3 1│⍞000D└────┴──┴──────────────────────────────────────────┘⍞000D⍞000D    packZ''Mississippi''                  ⍝ LZW packing.⍞000D┌──┬─────────────────┬────┐⍞000D│11│0 0 0 0 1 1 0 0 0│Misp│⍞000D│  │0 0 1 1 0 1 1 1 0│    │⍞000D│  │0 1 0 0 1 1 1 1 1│    │⍞000D└──┴─────────────────┴────┘⍞000D⍞000D    ⍝ Here are some more examples, using a larger text matrix:⍞000D⍞000D    mm←⎕fmt notes.Marilyn       ⍝ mm is a simple char matrix. See: →Marilyn←⍞000D⍞000D    chk←{                       ⍝ check of compress-decompress round-trip.⍞000D        size←{⍬⍴⎕size''⍵''}⍞000D        ⍵≡0 ⍺⍺ ⍺⍺ ⍵:size ⍺⍺ ⍵⍞000D        '' Error: compression round-trip fails''⍞000D    }⍞000D⍞000D        ⊢ chk mm    ⍝ Raw data size⍞000D11300⍞000D    packB chk mm    ⍝ Pack a simple array.⍞000D11376⍞000D    pack4 chk mm    ⍝ ⍝ Quad-tree packing.⍞000D9176⍞000D    packR chk mm    ⍝ Run Length Encoding (RLE packing).⍞000D7808⍞000D    packT chk ,mm   ⍝ Simple text vector packager.⍞000D7136⍞000D    packQ chk mm    ⍝ Assorted uniQues packer.⍞000D5276⍞000D    packS chk mm    ⍝ Shannon-Fano packing⍞000D5084⍞000D    packU chk mm    ⍝ Unique packer.⍞000D5064⍞000D    packH chk mm    ⍝ Huffman packing.⍞000D5028⍞000D    packX chk mm    ⍝ TeXt packer.⍞000D3800⍞000D    packZ chk mm    ⍝ Lempel-Ziv-Welch compression.⍞000D3612⍞000D⍞000DSee also: packB packD packH packN packQ packR⍞000DSee also: packS packT packU packX packZ pack4⍞000DSee also: pack base64 shannon⍞000D⍞000DIndex:compression|text|stuff⍞000DIndex;Jantunen V-M.|Monroe M.' 
