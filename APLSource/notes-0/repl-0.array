'(eval ##.repl)stop                          ⍝ Read-eval-print loop.⍞000D⍞000D[repl] uses quote-quad (⍞235E) to prompt for, and input, a character vector argument⍞000Dfor evaluation by operand function [eval].  Output  from the evaluation is disp-⍞000Dlayed in the session and the loop repeated until character vector [stop] is  in-⍞000Dput. In particular, if [stop] is the null vector '''', then repl  continues  until⍞000Dan empty line is entered.⍞000D⍞000DRef: http://en.wikipedia.org/wiki/Read-eval-print_loop⍞000D⍞000DTechnical note:⍞000DIn order to make its error-guard visible from the operand function, [repl] calls⍞000Dthe function from an ⍎. This bypasses the operator''s local-hiding mechanism and⍞000Dleaves the error-guard in-scope.⍞000D⍞000DExamples:⍞000D⍞000D      ⌽ repl''→''         ⍝ reverse of input.⍞000D    hello⍞000Dolleh⍞000D    world⍞000Ddlrow⍞000D    →⍞000D⍞000D      ⎕size repl '')''    ⍝ size of object⍞000D    display⍞000D3588⍞000D    repl⍞000D684⍞000D    notes⍞000D1363400⍞000D    )⍞000D⍞000D      ⍎ repl ''''         ⍝ mini-session until null input.⍞000D    2+3⍞000D5⍞000D    ⍳3⍞000D1 2 3⍞000D⍞000D⍞000D      disp∘⍎ repl'')''    ⍝ boxed output⍞000D⍞000D    1 2 + 3 4⍞000D4 6⍞000D    1 2 + ⊂3 4⍞000D┌───┬───┐⍞000D│4 5│5 6│⍞000D└───┴───┘⍞000D    }}}                 ⍝ error⍞000DEh?⍞000D    )⍞000D⍞000D      scripts._defs∘parse repl''→''   ⍝ bind left arg for dyadic fuction: →parse←⍞000D⍞000D    2+3⍞000D  A⍞000D ┌┴─┐⍞000D┌┴┐ 3⍞000D2 +⍞000D⍞000D    ∘.+/m n⍞000D      A⍞000D   ┌──┴──┐⍞000D ┌─┴──┐ ┌┴┐⍞000D┌┴─┐  / m n⍞000D∘ ┌┴┐⍞000D  . +⍞000D⍞000D    →⍞000D⍞000DSee also: parse esh lisp joy⍞000D⍞000DIndex:loop|shell|error-guard, dynamic|REPL|repl' 
