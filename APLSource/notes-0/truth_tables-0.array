'Boolean functions and truth tables⍞000D----------------------------------⍞000D⍞000DNB: There is substantial overlap between this article and Phil Last''s →logic←.⍞000D⍞000DBoolean  functions  may  be represented as "truth tables". Here are truth tables⍞000Dfor ∧ (and), ∨ (or) and ≠ (not-equal):⍞000D⍞000D      ∧   0   1           ∨   0   1           ≠   0   1⍞000D        ┌───┬───┐           ┌───┬───┐           ┌───┬───┐⍞000D      0 │ 0 │ 0 │         0 │ 0 │ 1 │         0 │ 0 │ 1 │⍞000D        ├───┼───┤           ├───┼───┤           ├───┼───┤⍞000D      1 │ 0 │ 1 │         1 │ 1 │ 1 │         1 │ 1 │ 0 │⍞000D        └───┴───┘           └───┴───┘           └───┴───┘⍞000D⍞000DWe can represent these results in a more compact form by raveling the matrix:⍞000D⍞000D      ∧  0 0 0 1          ∨  0 1 1 1          ≠  0 1 1 0⍞000D⍞000DNotice that each of the above vectors is the result of applying its dyadic func-⍞000Dtion between arguments 0 0 1 1 and 0 1 0 1.⍞000D⍞000DHere is the complete list of boolean functions:⍞000D⍞000D    {⍺∧0∧⍵}  0 0 0 0        ⍝ boolean functions (pervasive).⍞000D         ∧   0 0 0 1⍞000D         >   0 0 1 0⍞000D    {⍺∨0∧⍵}  0 0 1 1⍞000D         <   0 1 0 0⍞000D    {⍵∨0∧⍺}  0 1 0 1⍞000D         ≠   0 1 1 0⍞000D         ∨   0 1 1 1⍞000D         ⍱   1 0 0 0⍞000D         =   1 0 0 1⍞000D    {⍵⍲1∨⍺}  1 0 1 0⍞000D         ≥   1 0 1 1⍞000D    {⍺⍲1∨⍵}  1 1 0 0⍞000D         ≤   1 1 0 1⍞000D         ⍲   1 1 1 0⍞000D    {⍺∨1∨⍵}  1 1 1 1⍞000D⍞000DWe can check this by accumulating a list-of-functions,  using operator →lof←, to⍞000Dapply each function in turn:⍞000D⍞000D    bfns←{''''}                       ⍝ initial boolean functions vector ...⍞000D⍞000D    bfns ← bfns lof  {⍺∧0∧⍵}        ⍝ boolean functions (pervasive).⍞000D    bfns ← bfns lof   ∧⍞000D    bfns ← bfns lof   >⍞000D    bfns ← bfns lof  {⍺∨0∧⍵}⍞000D    bfns ← bfns lof   <⍞000D    bfns ← bfns lof  {⍵∨0∧⍺}⍞000D    bfns ← bfns lof   ≠⍞000D    bfns ← bfns lof   ∨⍞000D    bfns ← bfns lof   ⍱⍞000D    bfns ← bfns lof   =⍞000D    bfns ← bfns lof  {⍵⍲1∨⍺}⍞000D    bfns ← bfns lof   ≥⍞000D    bfns ← bfns lof  {⍺⍲1∨⍵}⍞000D    bfns ← bfns lof   ≤⍞000D    bfns ← bfns lof   ⍲⍞000D    bfns ← bfns lof  {⍺∨1∨⍵}⍞000D⍞000D    ↑ 0 0 1 1 bfns 0 1 0 1          ⍝ check (pervasive) boolean functions.⍞000D0 0 0 0⍞000D0 0 0 1⍞000D0 0 1 0⍞000D0 0 1 1⍞000D0 1 0 0⍞000D0 1 0 1⍞000D0 1 1 0⍞000D0 1 1 1⍞000D1 0 0 0⍞000D1 0 0 1⍞000D1 0 1 0⍞000D1 0 1 1⍞000D1 1 0 0⍞000D1 1 0 1⍞000D1 1 1 0⍞000D1 1 1 1⍞000D⍞000DFor  depth=0  arguments, the non-scalar (D) functions may be greatly simplified,⍞000Das they are then not required to pervade their arguments:⍞000D⍞000D    {0}  0 0 0 0        ⍝ boolean functions (non-pervasive).⍞000D     ∧   0 0 0 1⍞000D     >   0 0 1 0⍞000D     ⊣   0 0 1 1⍞000D     <   0 1 0 0⍞000D     ⊢   0 1 0 1⍞000D     ≠   0 1 1 0⍞000D     ∨   0 1 1 1⍞000D     ⍱   1 0 0 0⍞000D     =   1 0 0 1⍞000D   {~⍵}  1 0 1 0⍞000D     ≥   1 0 1 1⍞000D   {~⍺}  1 1 0 0⍞000D     ≤   1 1 0 1⍞000D     ⍲   1 1 1 0⍞000D    {1}  1 1 1 1⍞000D⍞000D(⍞000D    Of  course,  each  of the above D-functions may be made pervasive by binding⍞000D    it with the →perv← operator:⍞000D⍞000D          0 1 ⊢perv ⊂0 1⍞000D     0 1  0 1⍞000D⍞000D          0 1 ⊣perv ⊂0 1⍞000D     0 0  1 1⍞000D⍞000D          .. etc.⍞000D)⍞000D⍞000DBoolean scans⍞000D-------------⍞000DMany of the functions derive interesting functions with scan (\). For example:⍞000D⍞000D    ∧\      ⍝ leading 1s⍞000D    <\      ⍝ first 1⍞000D    ≠\      ⍝ toggle at 1s⍞000D  ...\⍞000D  {0}\      ⍝ first item, then 0s. See →baby←⍞000D⍞000DSee also: lof baby logic⍞000DIndex:boolean functions|truth tables|pervasive function' 
