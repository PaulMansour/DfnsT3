'svec ← {shape←⍬⍴(⍴⍵)*÷2} ##.sudoku prob  ⍝ Solution vector for Sudoku problem ⍵.⍞000D⍞000DThe  Sudoku  puzzle  consists  of a 3×3 grid of 3×3 boxes, each cell of which is⍞000Deither  empty  or contains a number in the range 1 to 9. A typical problem might⍞000Dlook like this:⍞000D⍞000D    ┌─────┬─────┬─────┐⍞000D    │· · 1│6 9 ·│5 · ·│⍞000D    │4 · ·│2 7 ·│· · 1│⍞000D    │· 7 ·│· · ·│· 9 ·│⍞000D    ├─────┼─────┼─────┤⍞000D    │· · ·│· · ·│· 3 ·│⍞000D    │· · ·│4 3 ·│· · 7│⍞000D    │· · ·│7 8 ·│6 · ·│⍞000D    ├─────┼─────┼─────┤⍞000D    │· · 6│· · ·│8 · ·│⍞000D    │· 2 ·│1 4 ·│· 6 ·│⍞000D    │· 1 ·│3 5 ·│· 4 ·│⍞000D    └─────┴─────┴─────┘⍞000D⍞000DThe challenge is to supply the missing numbers in such a way that:⍞000D⍞000D    each 3×3 box and⍞000D    each 9-item row and⍞000D    each 9-item column⍞000D⍞000Dcontains each of the 9 numbers with no repeats.⍞000D⍞000DA solution to the above problem might be:⍞000D⍞000D    ┌─────┬─────┬─────┐⍞000D    │3 8 1│6 9 4│5 7 2│⍞000D    │4 6 9│2 7 5│3 8 1│⍞000D    │2 7 5│8 1 3│4 9 6│⍞000D    ├─────┼─────┼─────┤⍞000D    │7 9 4│5 6 2│1 3 8│⍞000D    │6 5 8│4 3 1│9 2 7│⍞000D    │1 3 2│7 8 9│6 5 4│⍞000D    ├─────┼─────┼─────┤⍞000D    │5 4 6│9 2 7│8 1 3│⍞000D    │9 2 3│1 4 8│7 6 5│⍞000D    │8 1 7│3 5 6│2 4 9│⍞000D    └─────┴─────┴─────┘⍞000D⍞000DThe  puzzle  may  be generalised to accept problems of shape other than 3×3×3×3,⍞000Dsee examples below.⍞000D⍞000DArgument  matrix [prob] contains numbers 1-9 in occupied cells and 0s otherwise.⍞000DOptional  left argument [shape] specifies the box shape for non-square problems.⍞000DThe result is a vector of all solution matrices.⍞000D⍞000DTechnical notes:⍞000D⍞000DThis solution was supplied by Veli-Matti Jantunen, who says:⍞000D⍞000D⍺ may be used to denote the sudoku rectangle, the default is 2/(↑⍴⍵)*0.5 (eg. if⍞000D"mat" is a 6x6 matrix and the sub area is 2 3, the call must be 2 3 sudoku mat).⍞000D⍞000DThe result is a vector of all the solutions found, or ⍬ (no solutions) or ''''⍞000D(error - should not happen, but if there are zillions of results)⍞000D⍞000DThe algorithm is simple:⍞000D   handle the matrix as a vector⍞000D   the rows, columns and sudoku areas are denoted by index vectors⍞000D   do the basic checking for the puzzle (i.e. polish) and with the main function⍞000D    check one alternative from the list at time:⍞000D     filter all the possible elements for all the cells⍞000D      if at least one cell is empty = no solution -> take the next from the list⍞000D      if one cell contains more than one number -> select the cell from the⍞000D         tightest group and add every combination (from this cell) to the list⍞000D      if all cells contain one number = solution -> take the next from the list.⍞000D⍞000DVeli-Matti  also  provides this new-from-old problem shuffler:⍞000D⍞000D    Shuffle←{⍞000D    ⍝| Shuffle the original sudoku table to another one ;)⍞000D    ⍝| ⍺: sudoku box (use for e.g. 6x6 tables, like 2 3 Shuffle table).⍞000D⍞000D        ⍺←(⍴⍵)*0.5 ⋄ (⎕IO ⎕ML ⎕RL)←1 3(⎕TS+.*2)⍞000D        (¯1+?3⍴2){(⌽⍣(↑⍺))(⍉⍣(↑1⌽⍺))(⊖⍣(↑⌽⍺))⍵}⍵{(0,(↑⍴⍺)?↑⍴⍺)[⍵⌷⍺+1]}(↑⍴⍵){∊{⍵[(⍴⍵)?⍴⍵]}{⍵[(⍴⍵)?⍴⍵]}¨⍵⊂⍳⍺}¨⍺/¨⍳¨⌽⍺⍞000D    }⍞000D⍞000DDavid Crossley supplies an alternative coding:⍞000D⍞000D    sudoku←{⎕IO ⎕ML←0 1⍞000D        ⍝ Sudoku - ⍵: N×N setup where box size N*÷2 is integral⍞000D        ⍝ The setup is a valid arrangement in some cells of numbers from 1-N; the rest are 0´s.⍞000D        ⍝ Each row, column and the N boxes of each result must contain all numbers 1 to N.⍞000D·⍞000D        valid←{                                 ⍝ Validate.  ⍵ be...⍞000D            (2≠⍴⍴⍵)∨(≠/2↑⍴⍵)∨0≠1|(⊃⍴⍵)*÷2:1     ⍝ a square matrix with an integral box size⍞000D            ((⍴⍵)⍴0)≢⊃1↑0⍴⊂⍵:1                  ⍝ numeric N×N matrix⍞000D            1∊~⍵∊⍳1+⊃⍴⍵:1                       ⍝ numbers 0-N only⍞000D            0=+/,⍵                              ⍝ at least one number⍞000D        }⍞000D        box←{⍵⌿(⍵×⍳⍵)∘.+⍵/⍳⍵}                   ⍝ Box template ⍵:sq root of size⍞000D        chk←{1∊1<+⌿(1+⍳⊃⍴⍵)∘.=⍵}                ⍝ Check for duplicates of 1-9 in ⍵⍞000D        sets←{⍉⍺{(⍺=+⌿⍵)/⍵}(⍵⍴2)⊤⍳2*⍵}          ⍝ LM sets of ⍺ unique nrs from 1 to ⍵⍞000D        iv←{⍵/⍳⍴⍵}                              ⍝ idiom⍞000D        un←{(⍳⍴⍵)=⍵⍳⍵}                          ⍝ LV of first unique items in vector⍞000D        indx←{⍺[⍵]}                             ⍝ index ⍺ by ⍵⍞000D        search←{                                ⍝ Search possibilities for a cell⍞000D            r p←⍵⍞000D            p←⍺ adjust p                        ⍝ adjust possibles for current cell⍞000D            ~0∊⊃(r p)←rules r p:r               ⍝ resolve using logical tests⍞000D            (next p)∇¨⊂r p                      ⍝ search cell with minimum possibilities⍞000D        }⍞000D        adjust←{                                ⍝ Adjust cell to single value⍞000D            0>⊃⍺:⍵                              ⍝ no cell⍞000D            p←⍵ ⋄ p[;⊃⍺]←⍺[1]=⍳⊃⍴⍵ ⋄ p          ⍝ item ⍺ in to 1, rest of cell to 0⍞000D        }⍞000D        next←{                                  ⍝ Cell-value pairs for possible values⍞000D            ⍵{⍵,¨iv ⍺[;⍵]                       ⍝ in the cell with the minimum nr of⍞000D            }{1⍳⍨⍺\{⍵=⌊/⍵}⍺/⍵}/{(⍵>1)⍵}+⌿⍵      ⍝ possibilities (2 or more)⍞000D        }⍞000D        rules←{                                 ⍝ Apply logic tests to resolve cells⍞000D            ~0∊⊃z←sole ⍵:z                      ⍝ detect single-value possibilities⍞000D            ~0∊⊃z←↑singles/(⍳⊃⍴RCB),⊂z:z        ⍝ single-valued cells in row/col/box⍞000D            ~0∊⊃z←↑uniques/(⍳(⍴⊃z)*÷2),⊂z:z     ⍝ values unique to one row/col of a box⍞000D            ~0∊⊃z←↑NinN/4 3 2,⊂z:z              ⍝ detect N vals in N cells⍞000D            ~0∊⊃z←↑matches/4 3 2,⊂z:z           ⍝ matches of N vals in N cells of r/c/b⍞000D            z≡⍵:⍵                               ⍝ finish if no state change⍞000D            ∇ z                                 ⍝ otherwise repeat rules⍞000D        }⍞000D        sole←{                                  ⍝ Resolve sole value cells. ⍺:soln, ⍵:possibles⍞000D            ~0∊⊃r p←⍵:⍵                         ⍝ pass through⍞000D            0∊n←+⌿p:⍬ ⍬                         ⍝ no go⍞000D            (⍴r)=i←1⍳⍨n×r=0:⍵                   ⍝ no remaining single value cells⍞000D            r[i]←1+p[;i]⍳1                      ⍝ set result value⍞000D            p[¯1+i⊃r;i~⍨iv i⊃Masks]←0           ⍝ remove as possible value in related cells⍞000D            ∇ r p                               ⍝ check for further single-value cells⍞000D        }⍞000D        singles←{                               ⍝ Fix box cells that resolve to single value⍞000D            ~0∊⊃r p←⍵:⍵                         ⍝ pass through⍞000D            i←RCB[⍺;]                           ⍝ cells in row, col or box⍞000D            b←i/p                               ⍝ possibles for cells⍞000D            ~1∊l←(1=+/b)∧~(1+⍳⊃⍴p)∊i/r:⍵        ⍝ values that occur just once ex result values⍞000D            c←(iv i)[(↓l⌿b)⍳¨1]                 ⍝ cells where they occur⍞000D            p[;c]←(⍳⊃⍴p)∘.=iv l                 ⍝ modify to just the single value⍞000D            sole r p                            ⍝ resolve the sole values⍞000D        }⍞000D        uniques←{                               ⍝ Unique to one row/col of the ⍺´th box⍞000D            ~0∊⊃r p←⍵:⍵                         ⍝ pass through⍞000D            b←p[;⍺⊃Box]                         ⍝ box cell values⍞000D            i←(⍴i)⊤iv,(i>1)∧i=⍉(⌽⍴i)⍴+/i←+/b    ⍝ 2 or more unique to a row⍞000D            j←(⍴j)⊤iv,(j>1)∧j=⍉(⌽⍴j)⍴+/j←+/[1]b ⍝ 2 or more unique to a column⍞000D            (0∊⍴i)∧0∊⍴j:⍵                       ⍝ none found⍞000D            s←⊃⌽⍴b                              ⍝ box size⍞000D            p[(s(⍺ rinds)↓i),s(⍺ cinds)↓j]←0    ⍝ remove vals from cols of other boxes⍞000D            sole r p                            ⍝ resolve sole values⍞000D        }⍞000D        rinds←{                                 ⍝ uniques: row pick inds to update⍞000D            0=⍴⊃⍵:0⍴⊂0 0⍞000D            ↑,/(0⊃⍵),¨¨((⍺*2)×(1⊃⍵)+¨⍺×⌊⍺⍺÷⍺)+⊂(⍳⍺*2)~(⍺×⍺|⍺⍺)+⍳⍺⍞000D        }⍞000D        cinds←{                                 ⍝ uniques: column pick inds to update⍞000D            0=⍴⊃⍵:0⍴⊂0 0⍞000D            ↑,/(0⊃⍵),¨¨((1⊃⍵)+¨⍺×⍺|⍺⍺)+⊂(⍺*2)×(⍳⍺*2)~(⍺×⌊⍺⍺÷⍺)+⍳⍺⍞000D        }⍞000D        matches←{                               ⍝ Resolve exact matches on ⍺ possible values⍞000D            ~0∊⊃r p←⍵:⍵                         ⍝ pass through⍞000D            0∊n←+⌿p:⍬ ⍬                         ⍝ no go if no possibilities for a cell⍞000D            i←(n=⍺){iv ⍺\un 2⊥⍺/⍵}p             ⍝ cells with ⍺ possible values⍞000D            sole↑(⍺ match)/i,⊂⍵                 ⍝ resolve each ⍺-set then sole values⍞000D        }⍞000D        match←{                                 ⍝ Resolve exact matches in row/col/box⍞000D            ~0∊⊃r p←⍵:⍵                         ⍝ pass through⍞000D            ⍺⍺≠+/p[;⍺]:⍵                        ⍝ cell no longer has ⍺⍺ values⍞000D            ⍺⍺>+/l←p[;⍺]∧.=p:⍵                  ⍝ occurrences of matches with the ⍺´th cell⍞000D            1∊⍺⍺<n←+/l/RCB:⍬ ⍬                  ⍝ no go if >⍺⍺ matches in any row/col/box⍞000D            ~1∊n=⍺⍺:⍵                           ⍝ no r/c/b´s with exactly ⍺⍺ matches⍞000D            p←↑(l do_matches)/(iv n=⍺⍺),⊂p      ⍝ remove matched vals from related cells⍞000D            sole r p                            ⍝ resolve singles then sole values⍞000D        }⍞000D        do_matches←{                            ⍝ Remove vals from other row/col/box cells⍞000D            p←⍵                                 ⍝ ⍺⍺ marks all occurrences of match⍞000D            p[iv p[;⍺⍺⍳1];iv RCB[⍺;]∧~⍺⍺]←0     ⍝ filter occurrences in the ⍺´th row/col/box⍞000D            p⍞000D        }⍞000D        NinN←{                                  ⍝ Reduce ⍺-sets in exactly ⍺ cells of a row/col/box⍞000D            ~0∊⊃r p←⍵:⍵                         ⍝ pass through⍞000D            s←⍺ sets(⍴r)*÷2                     ⍝ all combns of sets of ⍺ values⍞000D            l←r=0                               ⍝ non-singular cells⍞000D            n←(⍺=(s∨.∧p)+.∧⍉RCB)∧⍺=(s∨.∧l\l/p)+.∧⍉RCB ⍝ set-RCB combinations with ⍺ occurrences⍞000D            i←↓[0](⍴n)⊤iv,n                     ⍝ indices of set-RCB combns⍞000D            sole↑(s do_NinN)/i,⊂⍵               ⍝ reduce non-set values from cells then sole values⍞000D        }⍞000D        do_NinN←{                               ⍝ Remove values not in set ⊃⍺ from identified cells⍞000D            i←⍺⍺[0⊃⍺;] ⋄ j←RCB[1⊃⍺;]            ⍝ set values / row-col-box mask⍞000D            r p←⍵ ⋄ p[iv~i;iv j∧i∨.∧p]←0 ⋄ r p  ⍝ [vals not in set;cells in set and in row/col/box]⍞000D        }⍞000D        setup←{                                 ⍝ Setup LM possibilities per cell⍞000D            p←(⊂1+⍳⊃⍴⍵)~¨Masks/¨⊂,⍵             ⍝ possibles per cell, except...⍞000D            ((0≠,⍵)/p)←0~⍨,⍵                    ⍝ adjust given cells to single value⍞000D            (1+⍳⊃⍴⍵)∘.∊p                        ⍝ convert to LM vals×cells⍞000D        }⍞000D        res←(⍴⍵)∘{⍺∘⍴¨((⍴⍵)⍴(×/⍺)↑1)⊂⍵}         ⍝ Shape result(s)⍞000D·⍞000D        valid ⍵:''Invalid setup''                 ⍝ Validate⍞000D        RCB←{,¨(⍵/⍳⍵)(⍵ ⍵⍴⍳⍵)(box ⍵*÷2)}⊃⍴⍵     ⍝ Rows-Columns-Boxes⍞000D        Masks←↓↑∨/{⍵∘.=⍵}¨RCB                   ⍝ Sets per cell of related row/col/box cells⍞000D        RCB←↑⍪/(⊂⍳⊃⍴⍵)∘.=¨RCB                   ⍝ Selection vectors for rows,columns,boxes⍞000D        Box←((⍴⍵)*÷2)∘⍴¨(↓RCB[(2×⊃⍴⍵)+⍳⊃⍴⍵;])/¨⊂⍳×/⍴⍵ ⍝ Box indices⍞000D        1∊chk¨Masks/¨⊂,⍵:''Invalid setup''        ⍝ Duplicates in row/column/box⍞000D·⍞000D        res∊¯1 0 search(,⍵)(setup ⍵)⍞000D    ⍝:  ADC 5Jun2005⍞000D    }⍞000D⍞000DFinally, here is Arthur Whitney''s amazing solution in K 5:⍞000D⍞000D    x(,/{@[x;y;]''(!10)^x*|/p[;y]=p,:,3/:-3!p:!9 9}'')/&~*x⍞000D⍞000DTranslated by Phil Last into a D-function:⍞000D⍞000D    sudoku←{⎕io←0       ⍝ Whitney/Last⍞000D        p←{(↑⍵)∘{(⍺∨.=⍵)/⍳n×n}¨,⍵},(n*÷2){⍵,⍺⊥⌊⍵÷⍺}¨⍳n n←⍴⍵⍞000D        m←{(⊂⍵)⌈(⊂⍺=⍳⍴⍵)×(1+⍳n)~⍵[⍺⊃p]}⍞000D        (⍴⍵)∘⍴¨⊃{⊃,/⍺ m¨⍵}/{((⍵=0)/⍳⍴⍵),⊂⊂⍵},⍵⍞000D    }⍞000D⍞000DMorten Kromberg''s recasting defines some of K''s  constructs explicitly and so is⍞000Dcloser to the original.  Note that, like the K version, it takes and returns 81-⍞000Dvectors, rather than matrices.⍞000D⍞000D    sudoku←{⍞000D    ⍝ Define one k fn and one op missing from APL⍞000D         wh←{(⍵≠0)/⍳⍴⍵}         ⍝ k ''&'' function⍞000D         mg←{a←⍺ ⋄ a[⍺⍺]←⍵ ⋄ a} ⍝ merge operator: r←old (indexes mg) new⍞000D⍞000D         rcq←(↑,⍳9 9),3/,3⌿3 3⍴⍳9   ⍝ Row, Column, Quadrant⍞000D         p←{wh rcq∨.=⍵}¨↓rcq        ⍝ Cells in same row, col or quadrant⍞000D         nzd←1+⍳9                   ⍝ Non-zero digits for a little more speed⍞000D         ⊃{⊃,/⍺{⍵∘(⍺ mg)¨nzd~⍵[⍺⊃p]}¨⍵}/(wh ⍵=0),⊂⊂⍵ ⍝ kapow!⍞000D    }⍞000D⍞000DRoger Hui presents this in the following more beautiful form, generalised for⍞000Dnon-square puzzles:⍞000D⍞000D    Sudoku←{⍺←(⍴⍵)*÷2                   ⍝ Solutions of shape-⍺ Sudoku puzzle ⍵.⍞000D        svec ← {⊃pvex/(emt ⍵),⊂⊂⍵}      ⍝ solution vector⍞000D        pvex ← {⊃,/⍺∘pvec¨⍵}            ⍝ vector of placements⍞000D        pvec ← {(⍺ avl ⍵)(⍺ at)¨⊂⍵}     ⍝ placements⍞000D        avl  ← {(⍳⊃⍴⍵)~⍵×⊃⍺⌷CMAP}       ⍝ list of available numbers⍞000D        at   ← {⍵+⍺×(⍳⍴⍵)∊⊂⍺⍺}          ⍝ ⍺ at cell ⍺⍺ in ⍵⍞000D        emt  ← {(,⍵=0)/,⍳⍴⍵}            ⍝ row & column indices of empty cells⍞000D⍞000D        rcb  ← {(⍳⍴⍵),¨⍺ box(⍴⍵)÷⍺}     ⍝ row/column/box numbers⍞000D        box  ← {(⊃⍺)⌿(⊃⌽⍺)/⍵⍴⍳×/⍵}      ⍝ box numbers for a puzzle of size ⍵*2⍞000D        cmap ← {⊂[⍳2]1∊¨⍵∘.=⍵}          ⍝ contention map for puzzle ⍵⍞000D        CMAP ← cmap ⍺ rcb ⍵             ⍝ contention map for puzzle⍞000D⍞000D        svec ⍵                          ⍝ vector of solutions.⍞000D    }⍞000D⍞000DSee →sudoku_bfs← for an illustration of this algorithm.⍞000DSee "Learn" in: http://www.TryAPL.org for step-by-step demonstration.⍞000DWatch: http://www.youtube.com/watch?v=DmT80OseAGs to see it in action.⍞000D⍞000DThanks also to Maurice Jordan and John R. Clark for suggestions.⍞000D⍞000DExamples:⍞000D⍞000D    s33                                 ⍝ sample 3×3 problem.⍞000D0 0 1 6 9 0 5 0 0⍞000D4 0 0 2 7 0 0 0 1⍞000D0 7 0 0 0 0 0 9 0⍞000D0 0 0 0 0 0 0 3 0⍞000D0 0 0 4 3 0 0 0 7⍞000D0 0 0 7 8 0 6 0 0⍞000D0 0 6 0 0 0 8 0 0⍞000D0 2 0 1 4 0 0 6 0⍞000D0 1 0 3 5 0 0 4 0⍞000D⍞000D    sudoku s33                          ⍝ ... has 3 solutions.⍞000D┌─────────────────┬─────────────────┬─────────────────┐⍞000D│3 8 1 6 9 4 5 7 2│2 8 1 6 9 3 5 7 4│2 8 1 6 9 3 5 7 4│⍞000D│4 6 9 2 7 5 3 8 1│4 6 9 2 7 5 3 8 1│4 6 9 2 7 5 3 8 1│⍞000D│2 7 5 8 1 3 4 9 6│3 7 5 8 1 4 2 9 6│5 7 3 8 1 4 2 9 6│⍞000D│7 9 4 5 6 2 1 3 8│7 9 2 5 6 1 4 3 8│7 9 2 5 6 1 4 3 8│⍞000D│6 5 8 4 3 1 9 2 7│6 5 8 4 3 9 1 2 7│6 5 8 4 3 9 1 2 7│⍞000D│1 3 2 7 8 9 6 5 4│1 3 4 7 8 2 6 5 9│1 3 4 7 8 2 6 5 9│⍞000D│5 4 6 9 2 7 8 1 3│5 4 6 9 2 7 8 1 3│3 4 6 9 2 7 8 1 5│⍞000D│9 2 3 1 4 8 7 6 5│9 2 3 1 4 8 7 6 5│9 2 5 1 4 8 7 6 3│⍞000D│8 1 7 3 5 6 2 4 9│8 1 7 3 5 6 9 4 2│8 1 7 3 5 6 9 4 2│⍞000D└─────────────────┴─────────────────┴─────────────────┘⍞000D⍞000D⍝ This function separates inner boxes for easier reading:⍞000D⍞000D    sbox←{⎕IO ⎕ML←0 1                       ⍝ Box sudoku grids.⍞000D        ⍺←(⍴⍵)*÷2                           ⍝ default square cells.⍞000D        vp hp←0=⍺|⍳¨⍴⍵                      ⍝ vert and horiz partition vectors.⍞000D        numbs←⍉↑vp∘(⊂[0])¨hp⊂⍵              ⍝ numeric sub-areas.⍞000D        width←2+⌊10⍟⌈/1,,⍵                  ⍝ digits per number.⍞000D        fmt←width∘{⍵=0:⌽⍺↑''·'' ⋄ ⍺ 0⍕⍵}      ⍝ dots for zeros.⍞000D        cells←0 1∘↓¨↑∘(,/)¨fmt¨¨numbs       ⍝ char matrix sub-areas.⍞000D        hv←⍺⍴¨⊂¨⌽(⍴⊃cells)/¨''│─''            ⍝ vert and horiz boundaries.⍞000D        in←{↑⍺{⍺,⍺⍺,⍵}/⍵}                   ⍝ ⍺ separates ⍵.⍞000D        (t m b)lr←''┬┼┴'' ''├┤''in¨∘⊂¨hv        ⍝ bordering lines.⍞000D        body←m in⍉¨⊂[1 2]''│''in cells        ⍝ collected cells.⍞000D        (⍉body in t b)in lr in¨''┌└'' ''┐┘''    ⍝ boxed grid.⍞000D    }⍞000D⍞000D    sbox¨ sudoku s33                    ⍝ formatted solutions⍞000D ┌─────┬─────┬─────┐  ┌─────┬─────┬─────┐  ┌─────┬─────┬─────┐⍞000D │3 8 1│6 9 4│5 7 2│  │2 8 1│6 9 3│5 7 4│  │2 8 1│6 9 3│5 7 4│⍞000D │4 6 9│2 7 5│3 8 1│  │4 6 9│2 7 5│3 8 1│  │4 6 9│2 7 5│3 8 1│⍞000D │2 7 5│8 1 3│4 9 6│  │3 7 5│8 1 4│2 9 6│  │5 7 3│8 1 4│2 9 6│⍞000D ├─────┼─────┼─────┤  ├─────┼─────┼─────┤  ├─────┼─────┼─────┤⍞000D │7 9 4│5 6 2│1 3 8│  │7 9 2│5 6 1│4 3 8│  │7 9 2│5 6 1│4 3 8│⍞000D │6 5 8│4 3 1│9 2 7│  │6 5 8│4 3 9│1 2 7│  │6 5 8│4 3 9│1 2 7│⍞000D │1 3 2│7 8 9│6 5 4│  │1 3 4│7 8 2│6 5 9│  │1 3 4│7 8 2│6 5 9│⍞000D ├─────┼─────┼─────┤  ├─────┼─────┼─────┤  ├─────┼─────┼─────┤⍞000D │5 4 6│9 2 7│8 1 3│  │5 4 6│9 2 7│8 1 3│  │3 4 6│9 2 7│8 1 5│⍞000D │9 2 3│1 4 8│7 6 5│  │9 2 3│1 4 8│7 6 5│  │9 2 5│1 4 8│7 6 3│⍞000D │8 1 7│3 5 6│2 4 9│  │8 1 7│3 5 6│9 4 2│  │8 1 7│3 5 6│9 4 2│⍞000D └─────┴─────┴─────┘  └─────┴─────┴─────┘  └─────┴─────┴─────┘⍞000D⍞000D    s22                                 ⍝ sample 2×2 problem.⍞000D0 2 3 4⍞000D3 0 0 0⍞000D2 0 0 0⍞000D4 0 0 0⍞000D⍞000D    sbox¨ sudoku s22                    ⍝ ... has 3 solutions.⍞000D ┌───┬───┐  ┌───┬───┐  ┌───┬───┐⍞000D │1 2│3 4│  │1 2│3 4│  │1 2│3 4│⍞000D │3 4│2 1│  │3 4│1 2│  │3 4│1 2│⍞000D ├───┼───┤  ├───┼───┤  ├───┼───┤⍞000D │2 1│4 3│  │2 1│4 3│  │2 3│4 1│⍞000D │4 3│1 2│  │4 3│2 1│  │4 1│2 3│⍞000D └───┴───┘  └───┴───┘  └───┴───┘⍞000D⍞000D    3 4 sbox s34                        ⍝ sample 3×4 problem.⍞000D┌───────────┬───────────┬───────────┐⍞000D│ 9  6  ·  ·│10  ·  ·  8│ 2  ·  ·  4│⍞000D│ ·  1  · 11│ · 12  ·  ·│ ·  ·  3  5│⍞000D│ ·  ·  ·  ·│ 6  ·  7 11│12  ·  ·  ·│⍞000D├───────────┼───────────┼───────────┤⍞000D│ ·  · 10  7│ ·  ·  ·  ·│ 4  ·  9  ·│⍞000D│ 1  ·  6  ·│12 11  ·  4│ ·  3  ·  ·│⍞000D│ ·  ·  9  ·│ · 10  8  1│ ·  ·  6  ·│⍞000D├───────────┼───────────┼───────────┤⍞000D│ ·  7  ·  ·│11  2  1  ·│ · 12  ·  ·│⍞000D│ 2  · 12  ·│ 4  ·  6  5│ ·  1  · 11│⍞000D│ · 10  ·  5│ ·  ·  ·  ·│ 3  4  ·  ·│⍞000D├───────────┼───────────┼───────────┤⍞000D│ ·  ·  · 10│ 5  8  ·  7│ ·  ·  ·  ·│⍞000D│ 5  3  ·  ·│ ·  · 11  ·│ 9  ·  ·  ·│⍞000D│ 7  ·  ·  ·│ 3  ·  ·  6│ ·  ·  4  2│⍞000D└───────────┴───────────┴───────────┘⍞000D⍞000D    3 4∘sbox¨ 3 4 sudoku s34            ⍝ ... has 2 solutions.⍞000D ┌───────────┬───────────┬───────────┐  ┌───────────┬───────────┬───────────┐⍞000D │ 9  6  5 12│10  1  3  8│ 2  7 11  4│  │ 9  6  5 12│10  1  3  8│ 2  7 11  4│⍞000D │ 8  1  7 11│ 9 12  4  2│ 6 10  3  5│  │ 8  1  7 11│ 9 12  4  2│ 6 10  3  5│⍞000D │10  4  2  3│ 6  5  7 11│12  9  1  8│  │10  4  2  3│ 6  5  7 11│12  9  1  8│⍞000D ├───────────┼───────────┼───────────┤  ├───────────┼───────────┼───────────┤⍞000D │12 11 10  7│ 2  6  5  3│ 4  8  9  1│  │12 11 10  7│ 2  6  5  3│ 4  8  9  1│⍞000D │ 1  2  6  8│12 11  9  4│ 7  3  5 10│  │ 1  2  6  8│12 11  9  4│10  3  5  7│⍞000D │ 3  5  9  4│ 7 10  8  1│11  2  6 12│  │ 3  5  9  4│ 7 10  8  1│11  2  6 12│⍞000D ├───────────┼───────────┼───────────┤  ├───────────┼───────────┼───────────┤⍞000D │ 4  7  3  6│11  2  1 10│ 5 12  8  9│  │ 4  7  3  6│11  2  1 10│ 5 12  8  9│⍞000D │ 2  8 12  9│ 4  3  6  5│10  1  7 11│  │ 2  8 12  9│ 4  3  6  5│ 7  1 10 11│⍞000D │11 10  1  5│ 8  7 12  9│ 3  4  2  6│  │11 10  1  5│ 8  7 12  9│ 3  4  2  6│⍞000D ├───────────┼───────────┼───────────┤  ├───────────┼───────────┼───────────┤⍞000D │ 6  9  4 10│ 5  8  2  7│ 1 11 12  3│  │ 6  9  4 10│ 5  8  2  7│ 1 11 12  3│⍞000D │ 5  3  8  2│ 1  4 11 12│ 9  6 10  7│  │ 5  3  8  2│ 1  4 11 12│ 9  6  7 10│⍞000D │ 7 12 11  1│ 3  9 10  6│ 8  5  4  2│  │ 7 12 11  1│ 3  9 10  6│ 8  5  4  2│⍞000D └───────────┴───────────┴───────────┘  └───────────┴───────────┴───────────┘⍞000D⍞000DSee also: queens sudoku_bfs X sudokuX⍞000DSee also: http://www.ams.org/notices/200904/rtx090400460p.pdf⍞000DSee also: http://www.TryAPL.org⍞000DSee also: http://www.youtube.com/watch?v=DmT80OseAGs⍞000D⍞000DIndex:diversions|sudoku, game of|K|YouTube⍞000DIndex;Jantunen V-M.|Crossley A.D.|Clark J.R.|Jordan M.|Whitney A.|Kromberg M.' 
