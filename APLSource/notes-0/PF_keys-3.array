'────────────────────────────────────────────────────⍞000DUtility functions on Programmable Function (PF) Keys⍞000D────────────────────────────────────────────────────⍞000DA number of the functions in this workspace lend themselves to being attached to⍞000Dfunction keys F1, F2, ··· etc.⍞000D⍞000DAmong the candidates are:⍞000D⍞000D    wsdiff''''        ⍝ What changes have I made so far this session?⍞000D    attrib ⎕nl 3 4  ⍝ Which fns and ops have I changed recently?⍞000D    tree ⎕cs''''      ⍝ What does this namespace look like?⍞000D⍞000DOne of many ways to achieve this, is to copy and execute the function dynamical-⍞000Dly from the saved workspace into ⎕SE (for example). This has the advantage that,⍞000Din  exchange for a small hit in execution time, which for these types of utilit-⍞000Dies is probably acceptable, we get the following benefits:⍞000D⍞000D  * Less permanent space is consumed in the ⎕SE namespace.⍞000D  * No additional copy of the utility need be maintained.⍞000D⍞000D⎕shadow may be used to create a temporary local name to receive the copied func-⍞000Dtion.  However,  in  this case, it must be called from a traditional function as⍞000DD-functions don''t support it.⍞000D⍞000DMany  utilities  are  "namespace sensitive". This means they must execute inside⍞000D(attrib) or outside (wsdiff) the current space or take it as an argument (tree).⍞000DThe following (⎕SE) function uses variable: ''home'' to distinguish such cases.⍞000D⍞000D        ∇ pfkey key;cmd;home                          ⍝ Respond to PFKEY ⍵.⍞000D    [1]   cmd←{                                       ⍝ execute string to:⍞000D    [2]       shad←''⎕shadow'''''',⍺,''''''''                 ⍝   shadow utility name,⍞000D    [3]       copy←'''''''',⍺,''''''⎕cy''''dfns''''''             ⍝   copy utility,⍞000D    [4]       shad,''⋄'',copy,''⋄'',⍵                     ⍝   call utility.⍞000D    [5]   }                                           ⍝⍞000D    [6]   home←⊃⍬⍴⎕NSI                                ⍝ calling space.⍞000D    [7]   :Select key                                 ⍝ Key:⍞000D    [8]   :Case 1 ⋄ ⍎''wsdiff''cmd''wsdiff''''''''''          ⍝   F1: wsdiff''''⍞000D    [9]   :Case 2 ⋄ ⍎''tree  ''cmd''tree home''           ⍝   F2: tree⊃⍬⍴⎕nsi⍞000D    [10]  :Case 3 ⋄ home⍎''attrib''cmd''attrib ⎕nl 3 4''  ⍝   F3: attrib ⎕nl 3 4⍞000D    [11]  :EndSelect⍞000D        ∇⍞000D⍞000DCalling this function:⍞000D⍞000D    ⎕se.pfkey 1     ⍝ executes: wsdiff''''        from within ⎕SE.⍞000D    ⎕se.pfkey 2     ⍝ executes: tree home       from within ⎕SE.⍞000D    ⎕se.pfkey 3     ⍝ executes: attrib ⎕nl 3 4  from within ''home''.⍞000D⍞000DNote that there is a little name pollution: the →attrib← function always appears⍞000Din  its own output. To avoid this, we could modify attrib to take a target space⍞000Das an extra parameter, while it executes from within ⎕SE.⍞000D⍞000DNext,  to  arrange  that pressing a function key generates the required call, we⍞000Dattach the session ''Create'' event to a callback function that loads the function⍞000Dkeys:⍞000D⍞000D    ''⎕se''⎕ws''Event'' ''Create'' ''⎕se.pfk_init''         ⍝ Attach Session Create to:⍞000D⍞000D        ∇ pfk_init                                  ⍝ Initialise PF keys.⍞000D    [1]   {⍞000D    [2]       (''⎕se.pfkey '',(⍕⍵),⊂''ER'')⎕pfkey ⍵     ⍝ load key ⍵,⍞000D    [3]   }¨1 2 3                                   ⍝ for each key.⍞000D        ∇⍞000D⍞000DAs dfns can''t currently be used for callbacks, pfk_init is coded as a tradition-⍞000Dal function⍞000D⍞000DWarning: If you have modified APL''s command line to include a starting workspace⍞000Dsuch  as  "C:\dyalog90\dyalog.exe C:\MYWS.DWS", the Session Create event will be⍞000Dlost  during  workspace  load  and PF keys will not be set. You can monitor this⍞000Dprocess by having pfk_init output a message to the session as it runs:⍞000D⍞000D    pfk_init[4] ⎕←''PF keys loaded''⍞000D⍞000DAfter  defining  these  functions and setting the callback, don''t forget to save⍞000Dthe session by clicking on Session->Save in the session menu.⍞000D⍞000DSee also: attrib keyboards⍞000D⍞000DIndex:programmable function keys' 
