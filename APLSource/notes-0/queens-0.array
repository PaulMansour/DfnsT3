'cmats ← ##.queens N                         ⍝ The N-Queens Problem⍞000D⍞000DPlace  N  Queens on an N×N chessboard such that no queen is attacking any other.⍞000DThis  coding  returns  all  unique solutions for the given board as a  vector of⍞000Dcharacter matrices with ''⍟'' representing a queen. Trivially equivalent solutions⍞000Dthat represent rotations and reflections are omitted.⍞000D⍞000DTechnical notes:⍞000D⍞000DThere  are  many  ways  to  approach this problem. A simple but rather expensive⍞000Dmethod  is  to  generate all permutations (see →pmat←) of ⍳⍵ and then filter out⍞000Dthose that represent a solution. The approach used here is a tree search: First,⍞000Dplace  a queen anywhere in the first row (or "rank" in chess-speak). Next, place⍞000Da second  queen in the second rank on any square not attacked  by the first one.⍞000DContinue  placing  queens on "safe" squares in successive ranks until either all⍞000Dranks have been covered (a configuration that constitutes a solution) or until a⍞000Drank  is  reached where all squares are attacked by previously placed queens. In⍞000Dthe  latter  case,  "back track" to the last rank where all squares have not yet⍞000Dbeen tried and after moving that queen to a different square, try again.⍞000D⍞000DFor  a  standard 8×8 chessboard, there are 96 solutions but these include 2 ref-⍞000Dlections  and 4 rotations of each "distinct" solution, so in fact there are only⍞000D12 interesting solutions. Part of the challenge is to avoid generating or to re-⍞000Dmove these duplicates.⍞000D⍞000DDuring the search, the current state of play is represented by two vectors, each⍞000Ditem  of which corresponds to a rank. The first is a simple vector of placements⍞000Dalready  made  and the second, a vector of vectors of remaining free squares per⍞000Drank.  For  example,  after  placing the first 4 queens, the state of play might⍞000Dlook like this:⍞000D⍞000D    file:    0 1 2 3 4 5 6 7⍞000D            ┌───────────────┐   ⍟ placed queen.⍞000D    rank: 0 │· ⍟ · · · · · ·│   ○ free square.⍞000D          1 │· · · ⍟ · · · ·│⍞000D          2 │· · · · · · ⍟ ·│⍞000D          3 │⍟ · · · · · · ·│⍞000D          4 │· · ○ · · · · ○│⍞000D          5 │· · · · ○ ○ · ·│⍞000D          6 │· · · · ○ ○ · ·│⍞000D          7 │· · ○ · · ○ · ○│⍞000D            └───────────────┘⍞000D⍞000DThe  vector  of  placements is 1 3 6 0, and the vector of free squares is (2 7),⍞000D(4 5)(4 5)(2 5 7). Placing the next queen in column 2, would render the state of⍞000Dplay:⍞000D⍞000D    file:    0 1 2 3 4 5 6 7⍞000D            ┌───────────────┐   ⍟ placed queen.⍞000D    rank: 0 │· ⍟ · · · · · ·│   ○ free square.⍞000D          1 │· · · ⍟ · · · ·│⍞000D          2 │· · · · · · ⍟ ·│⍞000D          3 │⍟ · · · · · · ·│⍞000D          4 │· · ⍟ · · · · ·│⍞000D          5 │· · · · ○ ○ · ·│⍞000D          6 │· · · · · ○ · ·│⍞000D          7 │· · · · · · · ○│⍞000D            └───────────────┘⍞000D⍞000Dwith placement vector: 1 3 6 0 2, and free-square vector: (4 5)(5)(7).⍞000D⍞000DThe  search  is implemented by passing the placement vector as left argument and⍞000Dfree-square vector as right argument to inner function [search]: The tree search⍞000Dconsists  of  appending  in  turn,  each  free square from the next rank, to the⍞000Dplacement  vector  and  recursively calling search with a reduced vector of free⍞000Dsquares. Search returns if either any of the  ranks  contain  no  free  squares:⍞000D(⊂⍬)∊⍵,  or  no ranks remain: 0=⍴⍵, which constitutes a solution. Notice a small⍞000Ddetail:  the  result  when  there are no free squares must be suitably enclosed:⍞000D0⍴⊂⍬,  so that in the three cases where there are no solutions queens¨0 2 3, the⍞000Doverall result is a vector of _matrices_ in common with all other cases.⍞000D⍞000D    search←{                        ⍝ Search for all solutions.⍞000D        (⊂⍬)∊⍵:0⍴⊂⍬                 ⍝ stitched: abandon this branch.⍞000D        0=⍴⍵:rmdups ⍺               ⍝ all done: solution!⍞000D        hd tl←(⊃⍵)(1↓⍵)             ⍝ head ''n tail of remaining ranks.⍞000D        next←⍺∘,¨hd                 ⍝ possible next steps.⍞000D        rems←hd free¨⊂tl            ⍝ unchecked squares.⍞000D        ↑,/next ∇¨rems              ⍝ ... in following ranks.⍞000D    }⍞000D⍞000D[Free]  returns  a new vector of free-squares after those in check from the next⍞000Dplacement have been removed:⍞000D⍞000D    free←{⍵~¨⍺+(⍴⍵)↑cvex}           ⍝ Unchecked squares.⍞000D⍞000DAs [cvex], is invariant during the search, it is computed initially as an optim-⍞000Disation.⍞000D⍞000D    cvex←(1+⍳⍵)×⊂¯1 0 1             ⍝ Checking vectors.⍞000D⍞000DGiven that the final solution vector must contain no duplicates, a further opti-⍞000Dmisation  is to start the tree search from only half of the squares in the first⍞000Drank.  Any  solution resulting from a search starting from the remaining squares⍞000Dmust constitute a "reflected" solution. So instead of:⍞000D⍞000D    squares←⍵⍴⊂⍳⍵                   ⍝ (0 1 2 3 4 5 6 7) (0 1 2 3 4 5 6 7) ···⍞000D⍞000Dwe have:⍞000D⍞000D    squares←(⊂⍳⌈⍵÷2),1↓⍵⍴⊂⍳⍵        ⍝ (0 1 2 3)         (0 1 2 3 4 5 6 7) ···⍞000D⍞000Dwhich _halves_ the total search time.⍞000D⍞000D[rmdups]  discards  "boring"  equivalent solutions by generating all 4 rotations⍞000Dand  2  reflections  and  then  rejecting  the putative solution if it isn''t the⍞000Dmost attractive member of this set:⍞000D⍞000D    rmdups←{                        ⍝ Ignore duplicate solution.⍞000D        rots←{{⍒⍵}\4/⊂⍵}            ⍝ 4 rotations.⍞000D        refs←{{⍋⍵}\2/⊂⍵}            ⍝ 2 reflections.⍞000D        best←{(⊃⍋↑⍵)⊃⍵}             ⍝ best (=lowest) solution.⍞000D        all8←,↑refs¨rots ⍵          ⍝ all 8 orientations.⍞000D        (⍵≡best all8)⊃⍬(,⊂⍵)        ⍝ ignore if not best.⍞000D    }⍞000D⍞000DFinally, [fmt] renders each solution as a character matrix with ''·'' for an empty⍞000Dsquare  and  ''⍟'' for an occupied one. Each matrix is spread horizontally to make⍞000Dit appear more square-shaped on the screen.⍞000D⍞000D    fmt←{                           ⍝ Format solution.⍞000D        chars←''·⍟''[(↑⍵)∘.=⍳⍺]       ⍝ char array of placed queens.⍞000D        expd←1↓,↑⍺⍴⊂0 1             ⍝ expansion mask.⍞000D        ↑¨↓↓expd\chars              ⍝ vector of char matrices.⍞000D    }⍞000D⍞000DAlternative Codings⍞000D-------------------⍞000DThe  following,  perhaps  rather  opaque  coding, is  remarkable in that it is a⍞000D_single expression_  for  the  vector  of unique solutions to the problem in the⍞000Dsame  way  that  {+/⍵÷⍴⍵} is a single expression for the mean value of a numeric⍞000Dvector.  It  contains  no guards; just applications of operators to operands and⍞000Dfunctions to arguments.  The code assumes an index-origin and migration-level of⍞000D0.⍞000D⍞000D      {⍵{↑¨↓↓(2|1↓⍳2×⍺)\((↑⍵)∘.=⍳⍺)⊃¨⊂''·⍟''}∪{{(⊃⍋↑⍵)⊃⍵},↑⍵}¨{{⍋⍵}\2/⊂⍵}¨∘{{⍒⍵}\4/⊂⍵}¨⍵{(⍺=,↑⍴¨⍵)/⍵},¨↑⍬{↑(⍺⍺,⍺)∇∇(1↓⍵⍵~¨⍺+(1+⍳⍴⍵⍵)×⊂¯1 0 1)/((⊃⍵⍵)~⍺+¯1 0 1),⊂⍵,⊂⍺⍺,⍺}(1↓⍵⍴⊂⌽⍳⍵)/(⌽⍳⌈⍵÷2),⊂0⍴⊂⍬}⍞000D⍞000DWe can prove that it works by pasting it into the session and appending an argu-⍞000Dment  (such  as 8) after remembering to set ⎕io ⎕ml←0. To examine it further, we⍞000Dmight  find  it  helpful  to  assign  a name and use the editor to split it up a⍞000Dlittle:⍞000D⍞000D    qn←{⍞000D        ⍵{⍞000D            ↑¨↓↓(2|1↓⍳2×⍺)\((↑⍵)∘.=⍳⍺)⊃¨⊂''·⍟''⍞000D        }∪{⍞000D            {(⊃⍋↑⍵)⊃⍵},↑⍵⍞000D        }¨{⍞000D            {⍋⍵}\2/⊂⍵⍞000D        }¨∘{⍞000D            {⍒⍵}\4/⊂⍵⍞000D        }¨⍵{⍞000D            (⍺=,↑⍴¨⍵)/⍵⍞000D        },¨↑⍬{⍞000D            ↑(⍺⍺,⍺)∇∇(1↓⍵⍵~¨⍺+(1+⍳⍴⍵⍵)×⊂¯1 0 1)/((⊃⍵⍵)~⍺+¯1 0 1),⊂⍵,⊂⍺⍺,⍺⍞000D        }(1↓⍵⍴⊂⌽⍳⍵)/(⌽⍳⌈⍵÷2),⊂0⍴⊂⍬⍞000D    }⍞000D⍞000DThe left side (top in the wrapped version) of the expression is much the same as⍞000D[queens], except that the slightly shorter and quicker: ''·⍟''[(↑⍵)∘.=⍳⍺] has been⍞000Dreplaced by the slightly purer ((↑⍵)∘.=⍳⍺)⊃¨⊂''·⍟'', in order to avoid APL''s argu-⍞000Dably anomalous square-bracket syntax.⍞000D⍞000DThe  main  difference  is  in  the  search sub-expression, which uses _reduce /_⍞000Drather than _each ¨_ to recur along ranks.⍞000D⍞000D    ↑⍬{⍞000D        ↑(⍺⍺,⍺)∇∇(1↓⍵⍵~¨⍺+(1+⍳⍴⍵⍵)×⊂¯1 0 1)/((⊃⍵⍵)~⍺+¯1 0 1),⊂⍵,⊂⍺⍺,⍺⍞000D    }(1↓⍵⍴⊂⌽⍳⍵)/(⌽⍳⌈⍵÷2),⊂0⍴⊂⍬⍞000D⍞000DThe  operand of the  outer reduction is a function derived from the inner dyadic⍞000Doperator  whose  left and right array operands are the placement and free-square⍞000Dvectors respectively:⍞000D⍞000D    ↑···                ⍝ disclose result of reduction.⍞000D    ·⍬{                 ⍝ left operand: placement vector.⍞000D        ···             ⍝ inner dyadic operator.⍞000D    }(1↓⍵⍴⊂⌽⍳⍵)···      ⍝ right operand: free-square vector.⍞000D    ···········/···     ⍝ reduction with above derived function.⍞000D⍞000DThe  argument  to  the  reduction is the vector of squares in the first rank and⍞000Demulates  queens  in representing only half of the files as an optimisation. The⍞000Dfinal  item  is  the  vector  of  solutions so-far and is enclosed to ensure the⍞000Dcorrect rank for the three cases where there are no solutions.⍞000D⍞000D    ············(⌽⍳⌈⍵÷2),⊂0⍴⊂⍬⍞000D⍞000DThe inner dyadic operator then, has operands/arguments:⍞000D⍞000D    Left argument:  next square in current rank.⍞000D    Left operand:   current placement vector.⍞000D    Right operand:  free-square vector.⍞000D    Right argument: vector of solutions-so-far.⍞000D⍞000DThis  leaves  just  the  code  _inside_ the operator, which is another reduction⍞000Dusing a recursive call with new values for the left and right operands:⍞000D⍞000D    ↑(⍺⍺,⍺)∇∇(1↓⍵⍵~¨⍺+(1+⍳⍴⍵⍵)×⊂¯1 0 1)/((⊃⍵⍵)~⍺+¯1 0 1),⊂⍵,⊂⍺⍺,⍺⍞000D⍞000DThis breaks down as a reduction:⍞000D⍞000D    ↑···································  ⍝ disclose result of reduction.⍞000D    ·······∇∇···························  ⍝ recursive call on operator with⍞000D    ·(⍺⍺,⍺)·····························  ⍝ operands: extended placement vector⍞000D    ·········(1↓⍵⍵~¨⍺+(1+⍳⍴⍵⍵)×⊂¯1 0 1)·  ⍝ and reduced free-square vector.⍞000D    ···································/  ⍝ ... reduction.⍞000D⍞000DThe  argument  to  the reduction is the vector of solutions-so-far extended with⍞000Dthe new path and prefixed with the vector of remaining squares in the next rank:⍞000D⍞000D    ····································((⊃⍵⍵)~⍺+¯1 0 1),⊂⍵,⊂⍺⍺,⍺⍞000D⍞000DThe  new  path:  _⍺⍺,⍺_  does  not  constitute a solution if it''s shorter than ⍵⍞000Ditems.  These  ''short''  solutions are removed later when full-length vectors are⍞000Dfiltered out by the next function:⍞000D⍞000D        ⍵{                  ⍝ board size.⍞000D            (⍺=,↑⍴¨⍵)/⍵     ⍝ filter out full-length solutions.⍞000D        }⍞000D⍞000D⍞000DRoger Hui  suggests  this  coding. Transliterated from J, it finds all solutions⍞000Dincluding reflections and rotations:⍞000D⍞000D    queens←{⍵{((+/b)⌿⍵),⍺|(,b)/⍳×/⍴b←~↑(⊂⍳⍺)∊¨(↓⍵)+[0]¨⊂(c-⍳c←1↓⍴⍵)∘.×¯1 0 1}⍣⍵⍳1 0}⍞000D⍞000DSee: http://jsoftware.com/jwiki/Essays/N_Queens_Problem⍞000D⍞000D⍞000DThis coding, which includes reflections and rotations, uses depth-first travers-⍞000Dal operator →trav←:⍞000D⍞000D    qtrav←{                             ⍝ N-queens using trav DFS.⍞000D        subs←{(⊂⍵),¨(⍳⍴⊃⍺)~atk ⍵}       ⍝ sub-trees of tree-node ⍵.⍞000D        accm←{⍺,((⍴⍵)=⍴⊃⍺)/⊂⍵}          ⍝ accumlation of N-placement.⍞000D        atk←{↑(⊂⍵)+¯1 0 1×⊂⌽⍳⍴⍵}        ⍝ columns under attack in row 1+⍵.⍞000D        fmt←{⍵∘.=⍳⍴⍵}                   ⍝ formatted as bool matrix.⍞000D        fmt¨(↓0 ⍵⍴0)accm trav subs ⍬    ⍝ formatted solutions.⍞000D    }⍞000D⍞000DExamples:⍞000D⍞000D    1 disp∘queens¨0 1 2 3 4 5 6         ⍝ solutions for small boards.⍞000D┌───┬───┬─────┬───────┬─────────┬─────────────────────┬─────────────┐⍞000D│┌⊖┐│┌→┐│┌⊖──┐│┌⊖────┐│┌→──────┐│┌→────────┬─────────┐│┌→──────────┐│⍞000D││ ⌽││⍟↓││   ⌽││     ⌽││· ⍟ · ·│││⍟ · · · ·│· ⍟ · · ·│││· ⍟ · · · ·││⍞000D│└⊖┘│└→┘│└──→┘│└────→┘││· · · ⍟│││· · ⍟ · ·│· · · · ⍟│││· · · ⍟ · ·││⍞000D│   │   │     │       ││⍟ · · ·│││· · · · ⍟│· · ⍟ · ·│││· · · · · ⍟││⍞000D│   │   │     │       ││· · ⍟ ·↓││· ⍟ · · ·│⍟ · · · ·│││⍟ · · · · ·││⍞000D│   │   │     │       │└──────→┘││· · · ⍟ ·↓· · · ⍟ ·↓││· · ⍟ · · ·││⍞000D│   │   │     │       │         │└────────→┴────────→┘││· · · · ⍟ ·↓│⍞000D│   │   │     │       │         │                     │└──────────→┘│⍞000D└───┴───┴─────┴───────┴─────────┴─────────────────────┴─────────────┘⍞000D⍞000D    queens 7⍞000D┌─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────┐⍞000D│⍟ · · · · · ·│⍟ · · · · · ·│· ⍟ · · · · ·│· ⍟ · · · · ·│· ⍟ · · · · ·│· ⍟ · · · · ·│⍞000D│· · ⍟ · · · ·│· · · ⍟ · · ·│· · · ⍟ · · ·│· · · · ⍟ · ·│· · · · ⍟ · ·│· · · · · ⍟ ·│⍞000D│· · · · ⍟ · ·│· · · · · · ⍟│⍟ · · · · · ·│⍟ · · · · · ·│· · · · · · ⍟│· · ⍟ · · · ·│⍞000D│· · · · · · ⍟│· · ⍟ · · · ·│· · · · · · ⍟│· · · ⍟ · · ·│· · · ⍟ · · ·│· · · · · · ⍟│⍞000D│· ⍟ · · · · ·│· · · · · ⍟ ·│· · · · ⍟ · ·│· · · · · · ⍟│⍟ · · · · · ·│· · · ⍟ · · ·│⍞000D│· · · ⍟ · · ·│· ⍟ · · · · ·│· · ⍟ · · · ·│· · ⍟ · · · ·│· · ⍟ · · · ·│⍟ · · · · · ·│⍞000D│· · · · · ⍟ ·│· · · · ⍟ · ·│· · · · · ⍟ ·│· · · · · ⍟ ·│· · · · · ⍟ ·│· · · · ⍟ · ·│⍞000D└─────────────┴─────────────┴─────────────┴─────────────┴─────────────┴─────────────┘⍞000D⍞000D    3 4⍴ queens 8⍞000D┌───────────────┬───────────────┬───────────────┬───────────────┐⍞000D│⍟ · · · · · · ·│⍟ · · · · · · ·│· ⍟ · · · · · ·│· ⍟ · · · · · ·│⍞000D│· · · · ⍟ · · ·│· · · · · ⍟ · ·│· · · ⍟ · · · ·│· · · · ⍟ · · ·│⍞000D│· · · · · · · ⍟│· · · · · · · ⍟│· · · · · ⍟ · ·│· · · · · · ⍟ ·│⍞000D│· · · · · ⍟ · ·│· · ⍟ · · · · ·│· · · · · · · ⍟│⍟ · · · · · · ·│⍞000D│· · ⍟ · · · · ·│· · · · · · ⍟ ·│· · ⍟ · · · · ·│· · ⍟ · · · · ·│⍞000D│· · · · · · ⍟ ·│· · · ⍟ · · · ·│⍟ · · · · · · ·│· · · · · · · ⍟│⍞000D│· ⍟ · · · · · ·│· ⍟ · · · · · ·│· · · · · · ⍟ ·│· · · · · ⍟ · ·│⍞000D│· · · ⍟ · · · ·│· · · · ⍟ · · ·│· · · · ⍟ · · ·│· · · ⍟ · · · ·│⍞000D├───────────────┼───────────────┼───────────────┼───────────────┤⍞000D│· ⍟ · · · · · ·│· ⍟ · · · · · ·│· ⍟ · · · · · ·│· ⍟ · · · · · ·│⍞000D│· · · · ⍟ · · ·│· · · · · ⍟ · ·│· · · · · ⍟ · ·│· · · · · · ⍟ ·│⍞000D│· · · · · · ⍟ ·│⍟ · · · · · · ·│· · · · · · · ⍟│· · ⍟ · · · · ·│⍞000D│· · · ⍟ · · · ·│· · · · · · ⍟ ·│· · ⍟ · · · · ·│· · · · · ⍟ · ·│⍞000D│⍟ · · · · · · ·│· · · ⍟ · · · ·│⍟ · · · · · · ·│· · · · · · · ⍟│⍞000D│· · · · · · · ⍟│· · · · · · · ⍟│· · · ⍟ · · · ·│· · · · ⍟ · · ·│⍞000D│· · · · · ⍟ · ·│· · ⍟ · · · · ·│· · · · · · ⍟ ·│⍟ · · · · · · ·│⍞000D│· · ⍟ · · · · ·│· · · · ⍟ · · ·│· · · · ⍟ · · ·│· · · ⍟ · · · ·│⍞000D├───────────────┼───────────────┼───────────────┼───────────────┤⍞000D│· ⍟ · · · · · ·│· · ⍟ · · · · ·│· · ⍟ · · · · ·│· · ⍟ · · · · ·│⍞000D│· · · · · · ⍟ ·│· · · · ⍟ · · ·│· · · · ⍟ · · ·│· · · · · ⍟ · ·│⍞000D│· · · · ⍟ · · ·│· ⍟ · · · · · ·│· · · · · · · ⍟│· ⍟ · · · · · ·│⍞000D│· · · · · · · ⍟│· · · · · · · ⍟│· · · ⍟ · · · ·│· · · · ⍟ · · ·│⍞000D│⍟ · · · · · · ·│⍟ · · · · · · ·│⍟ · · · · · · ·│· · · · · · · ⍟│⍞000D│· · · ⍟ · · · ·│· · · · · · ⍟ ·│· · · · · · ⍟ ·│⍟ · · · · · · ·│⍞000D│· · · · · ⍟ · ·│· · · ⍟ · · · ·│· ⍟ · · · · · ·│· · · · · · ⍟ ·│⍞000D│· · ⍟ · · · · ·│· · · · · ⍟ · ·│· · · · · ⍟ · ·│· · · ⍟ · · · ·│⍞000D└───────────────┴───────────────┴───────────────┴───────────────┘⍞000D⍞000D    {⊃⍴queens ⍵}¨0 to 16            ⍝ Number of solutions for various boards.⍞000D0 1 0 0 1 2 1 6 12 46 92 341 1787 9233 45752 285053 1846955⍞000D⍞000DSee also: kt sudoku pmat queensX trav X⍞000D⍞000DIndex:diversions|chess puzzle|tree searching|pure function|N-Queens' 
