'rslt ← (fn ##.vwise) ref    ⍝ Variable-wise: apply ⍺⍺ to each var in space ⍵.⍞000D⍞000DSuggested by Paul Mansour, [vwise] applies its operand function to each variable⍞000Din the namespace referenced by right argument ⍵.⍞000D⍞000DNote  that  any  non-primitive  functions in vwise''s operand will execute in the⍞000D_calling_, rather than the _target_ space.⍞000D⍞000DPaul  suggests some related operators: "Furthermore, we need a way to operate on⍞000Deach sub namespace in a namespace, which suggests swise, or "space wise":⍞000D⍞000D    swise←{         ⍝ Space wise⍞000D        ⍺⍺¨refs ⍵   ⍝ Apply to each space⍞000D    }⍞000D⍞000DIt is convenient to have variations of these operators that do replacement:⍞000D⍞000D    vwiser←{                    ⍝ Var wise, with Replacement⍞000D        n←↓⍵.⎕NL 2              ⍝ Var Names⍞000D        v←⍺⍺¨⍵∘⍎¨n              ⍝ Apply to each⍞000D        ⍵⊣n ⍵.{⍎⍺,''←⍵''}¨v       ⍝ Reset vars⍞000D    }⍞000D⍞000Dand⍞000D⍞000D    swiser←{            ⍝ Space wise with replacement⍞000D        ↑⍺⍺¨refs ⍵      ⍝ Apply to each space⍞000D    }⍞000D⍞000DNote  that we could have one version of each operator and control their behavior⍞000Dwith a left argument, but this increases the complexity of the syntax when call-⍞000Ding them.⍞000D⍞000DWith  operator  "saw" (simple-array-wise) and these new operators, we can get to⍞000Dwork  on an arbitrary namespace structure. Here is an example that finds and re-⍞000Dplaces "words" in each simple text vector of a namespace ns:⍞000D⍞000D    f←ft rt∘ssword      ⍝ Find and replace⍞000D    g←f saw             ⍝ ... in each simple array⍞000D    h←g vwiser          ⍝ ... in every variable⍞000D    h swiser ns         ⍝ ... in every space⍞000D⍞000Dwhere  ft is the find text, rt is the replace text, and ssword is a slightly re-⍞000Dworked version of its DFNS namesake.⍞000D⍞000DOr simply rotate every variable in and under namespace A:⍞000D⍞000D    ⌽ vwiser swiser A⍞000D⍞000Dor display the contents all variables in and under A:⍞000D⍞000D    ⊢ vwise swise A⍞000D⍞000DIt  appears vwise and swise are used in together a lot, so it might be useful to⍞000Dcombine them in a single operator:⍞000D⍞000D    vswise←{                ⍝ Var and Space Wise⍞000D        ⍺⍺ vwise swise ⍵    ⍝ ...⍞000D    }⍞000D⍞000Dand⍞000D⍞000D    vswiser←{               ⍝ Var and Space Wise⍞000D        ⍺⍺ vwiser swiser ⍵  ⍝ ...⍞000D    }⍞000D⍞000DCount the number of simple matrices in every item of every variable in and under⍞000DA:⍞000D⍞000D    +/∊{2=⍴⍴⍵}saw vswise A⍞000D⍞000DRotate every matrix, simple or nested, in and under A:⍞000D⍞000D    {2=⍴⍴⍵:⌽⍵ ⋄ ⍵} vswiser A⍞000D⍞000DExamples:⍞000D⍞000D      +/{82=⎕dr ⍵}vwise notes       ⍝ number of simple char vars in #.⍞000D150⍞000D      ∧/{⍵≡vtrim ⍵}vwise notes      ⍝ check that all notes have been trimmed.⍞000D1⍞000D      ~1∊('' '',⎕tc)∊{⊃⌽⍵}vwise notes ⍝ check no trailing white space in notes.⍞000D1⍞000D      ∪{⊢⎕cs''''}vwise notes          ⍝ operand function runs in calling space.⍞000D#⍞000D⍞000DSee also: refs xrefs saw⍞000D⍞000DIndex:variable-wise⍞000DIndex;Mansour P.' 
