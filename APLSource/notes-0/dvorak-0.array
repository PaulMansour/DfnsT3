'(muse:⍞000D⍞000D    Programmer Dvorak  http://www.kaufmann.no/roland/dvorak⍞000D    ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯⍞000D    ┌────┬────┬────┬────┬────┬────┬────┬────┬────┬────┬────┬────┬────┬─────────┐⍞000D    │~   │%   │7   │5   │3   │1   │9   │0   │2   │4   │6   │8   │`   │Backspace│⍞000D    │$   │&   │[   │{   │}   │(   │=   │*   │)   │+   │]   │!   │#   │         │⍞000D    ├────┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬──────┤⍞000D    │Tab    │:   │<   │>   │P   │Y   │F   │G   │C   │R   │L   │?   │∧   │Enter │⍞000D    │       │;   │,   │.   │p   │y   │f   │g   │c   │r   │l   │/   │@   │      │⍞000D    ├───────┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┐     │⍞000D    │Caps    │A   │O   │E   │U   │I   │D   │H   │T   │N   │S   │_   │|   │     │⍞000D    │Lock    │a   │o   │e   │u   │i   │d   │h   │t   │n   │s   │-   │\   │     │⍞000D    ├──────┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴────┴─────┤⍞000D    │Shift │    │"   │Q   │J   │K   │X   │B   │M   │W   │V   │Z   │Shift       │⍞000D    │      │    │''   │q   │j   │k   │x   │b   │m   │w   │v   │z   │            │⍞000D    ├──────┴┬───┴─┬──┴───┬┴────┴────┴────┴────┴────┴┬───┴──┬─┴────┼─────┬──────┤⍞000D    │ctrl   │Win  │Alt   │                          │Alt Gr│Win   │Menu │Ctrl  │⍞000D    │       │     │      │                          │      │      │     │      │⍞000D    └───────┴─────┴──────┴──────────────────────────┴──────┴──────┴─────┴──────┘⍞000D⍞000D    Where should we allocate APL symbols on a Dvorak keyboard? The spirit of the⍞000D    layout  is  to  ignore mnemonic association in favour of arranging keys with⍞000D    respect to the frequency of occurrence of key-sequences. Among other consid-⍞000D    erations,  the keys are placed so as to minimise the total distance that our⍞000D    fingers travel from their home positions in the centre of the keyboard.⍞000D⍞000D    The guiding assumption is that, while mnemonic associations (⍴ on R, ⍳ on I,⍞000D    and so forth)  are  handy  while  we''re learning the keyboard, with a little⍞000D    practice, our _fingers_ soon remember where the characters are located with-⍞000D    out  resort to the mnemonic.  This "muscle memory" phenomenon can be seen in⍞000D    action  when we drive a stick-shift or dance the quickstep;  we delegate the⍞000D    changes  to  our  hands  and  feet without having to think consciously about⍞000D    them.⍞000D⍞000D    If  we  accept  this,  then mnemonic placement of keys soon becomes counter-⍞000D    productive  compared  with  schemes that try to minimise hand movements. The⍞000D    (arguably)  most  mnemonic  keyboard of all: ABCDEF..., doesn''t seem to have⍞000D    given  QWERTY  much  of  a run for its money even though such keyboards are,⍞000D    these days, no more expensive to produce.⍞000D⍞000D    (muse:⍞000D⍞000D        For  what  it''s  worth,  this typist finds it significantly easier spell⍞000D        BRAM(ley) on those ticket machines in Reading Railway Station that sport⍞000D        QWERTY touch-screens, than on the few that offer ABCDEF.⍞000D    )⍞000D⍞000D    http://mkweb.bcgsc.ca/carpalx/?home is an excellent website, which addresses⍞000D    many  of  the  issues  of efficient keyboard layout.  In particular, see the⍞000D    section on "typing effort".⍞000D⍞000D    Frequency of Characters in this Workspace⍞000D    ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯⍞000D    Here  is a frequency sample (as of 2009-03-22) of _single_ APL characters in⍞000D    source  code in this workspace. It excludes workspace notes and test-scripts⍞000D    but includes APL characters in function comments:⍞000D⍞000D        apl←''⍫⍒⍋⌽⍉⊖⍟⍱⍲⌹⋄¨¯≤≥≠∨×÷⍣⍞235E⍬⊣⍵∊⍴↑↓⍳○←→⊢≡⍪⍺⌈⌊∇∆∘⎕⍎⍕⍷⍙⍨⊂⊃∩∪⊥⊤⍝⍀⌿⌷''⍞000D⍞000D        code←↑,/,∘⎕cr¨↓⎕nl 3 4                  ⍝ source code chars.⍞000D⍞000D        freq ← {(∪⍵){⍺{(↓⍉↑⍺⍵)[⍒⍵]}+/⍺∘.=⍵}⍵}⍞000D⍞000D        4 40 cols freq code∩apl                 ⍝ apl char-frequency.⍞000D    ⍝ 4468    ∇ 426    → 111    ≥ 44    ∩ 14⍞000D    ⍵ 4011    ∘ 402    ⌈ 99     ⍋ 42    ⍒ 13⍞000D    ← 3159    ¯ 336    ⍉ 99     ∪ 42    ⊣ 7⍞000D    ⍺ 2705    ∊ 323    ⌊ 97     ⍪ 41    ⌹ 5⍞000D    ⍴ 811     × 318    ⍕ 81     ⊥ 40    ⍱ 4⍞000D    ⎕ 799     ⌽ 297    ∆ 81     ⊖ 38    ⌷ 3⍞000D    ¨ 717     ⍳ 279    ⌿ 70     ⊤ 36    ⍲ 3⍞000D    ↑ 623     ⋄ 268    ⍙ 68     ⍟ 32    ⊢ 1⍞000D    ⊂ 563     ⍬ 150    ⍎ 64     ≤ 25    ⍣ 1⍞000D    ↓ 532     ÷ 140    ⍷ 60     ⍫ 25⍞000D    ⊃ 523     ≠ 128    ⍨ 57     ⍞235E 16⍞000D    ≡ 444     ∨ 127    ○ 54     ⍀ 15⍞000D⍞000D    It  _could_  be  argued that we should also reassign non-APL, non-alphameric⍞000D    chars:⍞000D⍞000D        other←''~%`$&[{}(=*)+]!#:<>?∧;,./@_|-\"''''''⍞000D⍞000D        4 40 cols freq code∩apl∪other           ⍝ non-alphameric frequency.⍞000D    ⍝ 4468    = 618    \ 259    # 71    ⍫ 25⍞000D    ⍵ 4011    + 592    < 233    ⌿ 70    ! 22⍞000D    . 3936    ⊂ 563    > 227    ? 69    ⍞235E 16⍞000D    '' 3411    ↓ 532    | 206    ⍙ 68    ⍀ 15⍞000D    ← 3159    ⊃ 523    ∧ 193    ⍎ 64    ∩ 14⍞000D    ⍺ 2705    ≡ 444    ⍬ 150    ⍷ 60    ⍒ 13⍞000D    ) 1988    ∇ 426    " 142    ⍨ 57    ⊣ 7⍞000D    : 1985    ∘ 402    ÷ 140    ○ 54    % 6⍞000D    ( 1981    ¯ 336    ≠ 128    ≥ 44    ⌹ 5⍞000D    , 1859    [ 324    ∨ 127    ⍋ 42    ⍱ 4⍞000D    { 1779    ] 324    * 116    ∪ 42    ⌷ 3⍞000D    } 1771    ∊ 323    → 111    ⍪ 41    ⍲ 3⍞000D    - 1178    × 318    ⌈ 99     ⊥ 40    @ 3⍞000D    / 954     _ 307    ⍉ 99     ⊖ 38    $ 1⍞000D    ⍴ 811     ~ 298    ⌊ 97     ⊤ 36    ⊢ 1⍞000D    ⎕ 799     ⌽ 297    ⍕ 81     ⍟ 32    ` 1⍞000D    ¨ 717     ⍳ 279    ∆ 81     & 30    ⍣ 1⍞000D    ↑ 623     ⋄ 268    ; 75     ≤ 25⍞000D⍞000D    but doing so would win us few friends among (any) existing Programmer Dvorak⍞000D    users.⍞000D⍞000D    Character sequences⍞000D    ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯⍞000D    The incidence of character _sequences_ is as important as that of individual⍞000D    characters.  For  example, it is beneficial to allocate frequently occurring⍞000D    sequences so that, where possible, the characters are typed with alternating⍞000D    hands or,  failing that, single-hand "finger runs" from the outer (pinky) to⍞000D    the  inner  (index)  side  with  the  same  hand. Regarding this last point,⍞000D    http://en.wikipedia.org/wiki/Dvorak_Simplified_Keyboard notes that we gener-⍞000D    ally drum our fingers on the table in this direction.⍞000D⍞000D    (muse:⍞000D⍞000D        In the same Wikipedia article, Dvorak also recommends:  "Digraphs should⍞000D        not be typed with adjacent fingers.".  This seems a bit rich, given that⍞000D        he  allocates  one of the most frequent digraphs in English: "th" to the⍞000D        second  and  index finger of the right hand.  Presumably this was as the⍞000D        result of a compromise, which avoided an even worse combination.⍞000D    )⍞000D⍞000D    The  following  function returns a list, for each APL character, of the most⍞000D    frequent  non-alphameric  characters that (a) precede and (b) follow it. The⍞000D    list is returned in order of individual APL character frequency, as above.⍞000D⍞000D    cseqs←{                                 ⍝ ⍵-char-sequence table.⍞000D        code←{(⍵≠1⌽⍵)/⍵}↑,/,∘⎕CR¨↓⎕NL 3 4   ⍝ source code chars.⍞000D        atab←{+/⍵⍷code}¨∘.,⍨⍺,⍵             ⍝ adjacency count table.⍞000D        pops←{{⍵⍳⌈/⍵}¨↓⍵⍉atab}              ⍝ indices of popular pairs.⍞000D        pqx←pops¨(2 1)(1 2)                 ⍝ popular ⍺⍵ and ⍵⍺ indices.⍞000D        chars←⍺,⍵                           ⍝ apl and other chars.⍞000D        achar←{⍺⊃¨¨(⊂chars){⍺ ⍵}¨↓⍵⍉atab}   ⍝ popular adjacent char and count.⍞000D        pqvex←pqx achar¨(2 1)(1 2)          ⍝ preceding and following counts.⍞000D        fmt←{                               ⍝ format:⍞000D            (pc pn)(qc qn)←⍵                ⍝ preceding count and char,⍞000D            pn pc(,⍺)qc(⍕qn)                ⍝    -  char  -⍞000D        }                                   ⍝ following char and count.⍞000D        list←⍺ fmt¨(⍴⍺)↑↓⍉↑pqvex            ⍝ list of char adjacencies.⍞000D        sort←{⍺{⍺[⍒⍵]}+/⍺∘.=⍵}              ⍝ sorted in order of frequency.⍞000D        freq←{(∪⍵)sort ⍵}code∩⍺             ⍝ char frequency.⍞000D        ↓⍕↑list[⍺⍳freq]                     ⍝ list by frequency.⍞000D    }⍞000D⍞000D    For example, in the output below (arranged in four columns, so as to be easy⍞000D    on the eye), the _third_ item in the first column: "129 ⍺ ← { 1015" indicat-⍞000D    es  that ''←'', the _third_ most popular APL character, is preceded most often⍞000D    (128) by an ''⍺'' and followed most often (1015) by a ''{''.⍞000D⍞000D                ┌───────── ←, the third-most frequently occurring APL character,⍞000D          129 ⍺ ← { 1015⍞000D          └───┤   └────┴── is followed most (1015) frequently by {.⍞000D              └─────────── and preceded most (129) frequently by ⍺.⍞000D⍞000D    This suggests that it might be (1015)-attractive to site the ''←'' key so that⍞000D    Programmer-Dvorak ''{'' may easily follow it.⍞000D⍞000D    Of course, an analysis of a more traditional workspace, where D-function us-⍞000D    age was less prevalent, might yield quite different results!   ;-)⍞000D⍞000D    NB: Take care not to infer from the above item, anything about the frequency⍞000D    of occurrence of the sequence ''⍺←{''. In fact, it occurs only 21 times, while⍞000D    ''⍺←'' occurs 129 times and ''←{'' occurs 1015 times.⍞000D⍞000D    Note also that, in the first line of cseqs, function {(⍵≠1⌽⍵)/⍵} deliberate-⍞000D    ly  removes adjacent identical characters from the analysis. A frequent occ-⍞000D    urrence of,  say,  double-each ¨¨ wouldn''t help us to locate the ¨ symbol on⍞000D    the keyboard.⍞000D⍞000D    Here are the results for the code in this workspace (as of 2009-03-22):⍞000D⍞000D          4 60 cols apl cseqs other         ⍝ adjacent char frequencies.⍞000D     28 '' ⍝ '' 34      51 ⍵ ∊ '' 47    19 + ⌿ ⍵ 18    5 ⍺ ⍫ ← 4⍞000D    302 ⍴ ⍵ } 619     22 . × ⍵ 43     9 '' ⍙ _ 61    8 } ⍞235E ← 10⍞000D    129 ⍺ ← { 1015    42 ⊃ ⌽ ⍵ 53    14 ( ⍎ ⍵ 17    3 '' ⍀ . 4⍞000D    193 ← ⍺ ) 243     34 ( ⍳ ⍴ 82    17 '' ⍷ ⍵ 30    7 [ ⍒ ⍵ 5⍞000D    112 { ⎕ ← 14       5 '' ⋄ '' 9      5 ∊ ⍨ ∘ 8     6 ⍵ ∩ '' 4⍞000D    111 ( ⍴ ⍵ 302     22 ← ⍬ ⍴ 22     2 × ○ ⍵ 36    3 ⍺ ⊣ ⍵ 3⍞000D    137 } ¨ ⍵ 111     27 ) ÷ ⍵ 10     6 ⍺ ≥ ⍴ 13    2 '' ⌹ '' 2⍞000D     71 ) ↑ ⍵ 101     24 ⍵ ≠ '' 21    13 ← ∪ , 10    2 ) ⍱ ⌽ 2⍞000D    165 , ⊂ '' 145     21 ( ∨ \ 34     8 ) ⍪ ( 9     2 ) ⌷ ¨ 1⍞000D     70 ) ↓ ⍵ 129     12 '' → '' 11     2 '' ⊥ ⍉ 5     1 ⍱ ⍲ ⍒ 1⍞000D     62 ) ⊃ ⍵ 112     45 ↓ ⍉ ↑ 46    10 [ ⍋ ↑ 16    1 { ⊢ } 1⍞000D    137 '' ≡ ⍺ 85      10 ← ⌈ / 25     8 { ⊖ ⍵ 9     1 ⍞235E ⍣ ⍫ 0⍞000D     85 ) ∇ ¨ 60      21 ← ⌊ / 19    13 ) ⊤ ⍵ 15⍞000D     78 } ∘ { 75      14 ( ⍕ ¨ 15     3 × ⍟ ⍵ 6⍞000D     37 ( ¯ '' 14      15 '' ∆ ← 5      4 < ≤ = 4⍞000D⍞000D    Happily, many of the above rankings confirm our expectations:⍞000D⍞000D        ← is often followed by {, for function definition,⍞000D        ¨ is most often preceded by }, as in "dfn-each",⍞000D        ⍵ is often followed by },⍞000D        ⍵ often follows a primitive function,⍞000D        ) often precedes a primitive function,⍞000D        ⍋ and ⍒ are often preceded by [,⍞000D        ⍉ is often preceded by ↓ and often followed by ↑ (as in ↓⍉↑),⍞000D        ⊥ is often followed by ⍉,⍞000D        ... and so on.⍞000D⍞000D    NB: Before  attempting to use the above results to design an APL/Dvorak key-⍞000D    board,  it  might  be better to adjust function cseqs to report not just the⍞000D    single  highest-frequency  predecessor  and  successor character. Perhaps we⍞000D    should consider a "top ten" popular neighbour chart for each character. This⍞000D    would  permit us a little "wiggle room" when trying to optimise the allocat-⍞000D    ion of APL symbols to keys.⍞000D⍞000D    With the advent of Input Method Editors (IMEs), it is relatively easy to ex-⍞000D    periment with alternative keyboard layouts. Here is one that has attracted a⍞000D    modest following:⍞000D⍞000D    "Colemak"  http://colemak.com⍞000D⍞000D        ┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───────┐⍞000D        │ ` │ 1 │ 2 │ 3 │ 4 │ 5 │ 6 │ 7 │ 8 │ 9 │ 0 │ - │ = │Backspc│⍞000D        ├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─────┤⍞000D        │Tab  │ Q │ W │ F │ P │ G │ J │ L │ U │ Y │ ; │ [ │ ] │ \   │⍞000D        ├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴─────┤⍞000D        │Caps  │ A │ R │ S │ T │ D │ H │ N │ E │ I │ O │ '' │ Enter  │⍞000D        ├──────┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴────────┤⍞000D        │Shift   │ Z │ X │ C │ V │ B │ K │ M │ , │ . │ / │ Shift    │⍞000D        ├────┬───┴┬──┴──┬┴───┴───┴───┴───┴───┴┬──┴─┬─┴───┼────┬─────┤⍞000D        │Ctrl│Win │Alt  │                     │AltG│Win  │Menu│Ctrl │⍞000D        └────┴────┴─────┴─────────────────────┴────┴─────┴────┴─────┘⍞000D⍞000D    Finally, here is the physical layout of a pretty little keyboard: the Happy⍞000D    Hacking Professional JP, from PFU-Fujitsu. Notice that the narrow space bar⍞000D    leaves room for some additional mode keys, which is just the ticket for APL.⍞000D    For example, the keys adjacent to the space bar, which are pressed with the⍞000D    thumbs, could be used for APL and APL+Shift.⍞000D⍞000D         Happy Hacking Professional2 JP (PD-KB420B)⍞000D        ┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┐⍞000D        │esc│   │   │   │   │   │   │   │   │   │   │   │   │   │bs │⍞000D        ├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴───┤⍞000D        │tab  │   │   │   │   │   │   │   │   │   │   │   │   │enter│⍞000D        ├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┐    │⍞000D        │ctrl  │   │   │   │   │   │   │   │   │   │   │   │   │    │⍞000D        ├──────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬───┤⍞000D        │shift  │   │   │   │   │   │   │   │   │   │   │   │ ↑ │sft│⍞000D        ├───┬┬──┴┬──┴┬──┴┬──┴┬──┴───┴──┬┴──┬┴──┬┴──┬┴──┬┼───┼───┼───┤⍞000D        │fn ││   │   │alt│   │  space  │   │   │alt│fn ││ ← │ ↓ │ → │⍞000D        └───┴┴───┴───┴───┴───┴─────────┴───┴───┴───┴───┴┴───┴───┴───┘⍞000D         http://www.pfu.fujitsu.com/hhkeyboard⍞000D         http://www.youtube.com/watch?v=kWGsxxV1k0A⍞000D)⍞000D⍞000DSee also: http://en.wikipedia.org/wiki/Keyboard_layout⍞000DSee also: cols⍞000D⍞000DIndex:Dvorak|Colemak|QWERTY|Happy Hacking Keyboard⍞000DIndex:quickstep|muscle memory|keyboard layout|YouTube⍞000DIndex;Dvorak A.' 
