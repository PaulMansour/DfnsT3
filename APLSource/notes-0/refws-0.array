'ref ← ##.refws wsid                         ⍝ Ref to saved ws ⍵.⍞000D⍞000DReturns  a ref to a namespace containing a copy of workspace [wsid]. This may be⍞000Dused to simulate remote expression execution. Refws is similar to Unix''s _mount_⍞000Dcommand, where a device (workspace) is mounted at a particular node (ref) in the⍞000Dname  tree.  Note however, that changes made via the resulting ref are not saved⍞000Din  the  target  workspace.  In  this sense the mount is read-only (but gives no⍞000Dwarning that updates are ignored - see example below).⍞000D⍞000DAs a convenience (in common with →wsdiff←) an argument wsid of '''' is interpreted⍞000Das ⎕WSID, so that refws'''' refers to the saved version of the active workspace.⍞000D⍞000DExamples:⍞000D                                        ⍝ starting with a clear ws:⍞000D      )clear⍞000Dclear ws⍞000D⍞000D      )copy dfns refws⍞000D··saved··⍞000D⍞000D      dfns←refws''dfns.dws''              ⍝ ref to copy of dfns ws.⍞000D⍞000D      1 dfns.disp ⍳2 2                  ⍝ "remote" execute.⍞000D┌→──┬───┐⍞000D↓1 1│1 2│⍞000D├~─→┼~─→┤⍞000D│2 1│2 2│⍞000D└~─→┴~─→┘⍞000D⍞000D⍝ Temporary ws-refs need not be named:⍞000D⍞000D      (refws''eval'').⎕ed''tasman''         ⍝ open remote edit window.⍞000D      (refws''tube'').(⎕ed ⎕nl 3)         ⍝ view all fns in saved workspace.⍞000D      (refws'''').⎕ed''refws''              ⍝ look at saved version of function.⍞000D⍞000D      (refws''tube'').(london trip ''Kings'' ''Queens'')      ⍝ remote execution.⍞000Dcompiling graph ...⍞000DKingsbury⍞000D    Kingsbury      Jubilee⍞000D    Wembley Park   Jubilee⍞000DWembley Park⍞000D    Wembley Park   Metropolitan⍞000D    Finchley Road  Metropolitan⍞000D    Baker Street   Metropolitan⍞000DBaker Street⍞000D    Baker Street   Jubilee⍞000D    Bond Street    Jubilee⍞000DBond Street⍞000D    Bond Street    Central⍞000D    Marble Arch    Central⍞000D    Lancaster Gate Central⍞000D    Queensway      Central⍞000DQueensway⍞000D⍞000D      (refws''util'').⎕cr''DOIF''⍞000D R←DOIF TEST       ⍝ Return next line number,⍞000D R←TEST↓1+1↑1↓⎕LC  ⍝ ...  if TEST false⍞000D⍞000D⍝ Note that changes made using refws are not saved in the reffed workspace:⍞000D⍞000D      (refws''display'').aa←99            ⍝ make var in copy of DISPLAY ws.⍞000D⍞000D      (refws''display'').⎕nc''aa''          ⍝ var was not saved in ws.⍞000D0⍞000D⍞000D⍝ We can create and append to ⎕PATH, a ref to a copy of a saved utility work⍞000D⍝ space.  The advantage of this approach is that changes in the saved WS are⍞000D⍝ immediately available to the next APL session.⍞000D⍞000D      )cs ⎕se⍞000D⍞000D      CreateRefs←{⍞000D          refws←{}⍞000D          sink←⍎''''''refws''''⎕CY''''dfns'''' ⋄ 0''⍞000D          dfns∘←refws''dfns'' ⋄ ⎕path,←'' dfns''    ⍝ ⎕se.dfns.(...)⍞000D          util∘←refws''util'' ⋄ ⎕path,←'' util''    ⍝ ⎕se.util.(...)⍞000D      }⍞000D⍞000D      onCreate←''CreateRefs''⍞000D⍞000D      ⍝ ... now save the session [Session->Save]⍞000D⍞000DSee also: wsdiff exit⍞000D⍞000DIndex:references, workspace|external workspace|workspace|remote execution' 
