'rslt ← (f ##.and g) arg                     ⍝ Sequential test.⍞000Drslt ← (f ##.or  g) arg⍞000D⍞000DSometimes, we must test conditions in sequence.  For example, if we want to know⍞000Dwhether ⍵ is a scalar number, greater than zero, we need to check in order:⍞000D⍞000D        that ⍵ is a simple scalar⍞000D    and that ⍵ is numeric⍞000D    and that ⍵ is greater than zero.⍞000D⍞000DIn other words:⍞000D⍞000D        0=≡⍵        ⍝ simple scalar⍞000D    and ⍬≡0/⍵       ⍝ numeric⍞000D    and 0<⍵         ⍝ greater than 0⍞000D⍞000DUnfortunately,  we  can''t  code this test using APL''s primitive function "∧" be-⍞000Dcause it unconditionally evaluates both of its arguments (APL''s primitive dyadic⍞000Dfunctions are said to be "strict in both arguments").⍞000D⍞000D    gt0 ← {                                             ⍝ DON''T TRY THIS!⍞000D        (0=≡⍵) ∧ (⍬≡0/⍵) ∧ (0<⍵): ''YEP'' ⋄ ''NOPE''        ⍝ IT WON''T WORK!⍞000D    }⍞000D⍞000D... and, in general, changing the order of these tests won''t help.⍞000D⍞000DWe have to resort to complex guards, along the lines of:⍞000D⍞000D    gt0 ← {⍞000D        {⍞000D            0≠≡⍵:0          ⍝ not a simple scalar⍞000D            ~⍬≡0/⍵:0        ⍝ not numeric⍞000D            ⍵>0             ⍝ > 0⍞000D        }⍵:''YEP'' ⋄ ''NOPE''⍞000D    }⍞000D⍞000DPhil Last''s [and] and [or] operators encapsulate this sequential testing, allow-⍞000Ding us to use the simpler:⍞000D⍞000D    gt0 ← {⍞000D        {0=≡⍵} and {⍬≡0/⍵} and (0∘<) ⍵: ''YEP'' ⋄ ''NOPE''  ⍝ sequential testing.⍞000D    }⍞000D⍞000DSimilarly, using "or":⍞000D⍞000D    gt0 ← {⍞000D        {0≠≡⍵} or {⍬≢0/⍵} or (<∘0) ⍵: ''NOPE'' ⋄ ''YEP''    ⍝ ditto, using "or".⍞000D    }⍞000D⍞000DTechnical note:⍞000D⍞000DNotice that  [and]  and [or]  share much of the semantics of the C-language''s &&⍞000Dand ||.⍞000D⍞000DExamples:⍞000D⍞000D    gt0←{ {0=≡⍵} and {⍬≡0/⍵} and (0∘<) ⍵: ''YEP'' ⋄ ''NOPE''}⍞000D⍞000D    gt0¨ 3 ¯1 ''7'' (''ding'' ''bat'')⍞000D YEP  NOPE  NOPE  NOPE⍞000D⍞000DSee also: else cond⍞000D⍞000DIndex:lazy evaluation|sequential test⍞000DIndex;Last P.' 
