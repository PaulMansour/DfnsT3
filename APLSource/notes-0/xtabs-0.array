'cvec ← {tabstops←8} ##.xtabs cvec           ⍝ Expand/compress HT chars.⍞000D⍞000DThe optional left argument (default 8) defines "tabstop" increments.⍞000D⍞000DFor  a  positive  left argument, horizontal tab characters in the right argument⍞000Dare  replaced  with  appropriate  blanks  and  for a negative left argument, the⍞000Dreverse happens. Mnemonic:⍞000D⍞000D    +ive -> expand      ⍝ replace tabs with blanks⍞000D    -ive -> compress    ⍝ replace blanks with tabs⍞000D⍞000D[xtabs] accommodates linefeed characters in its right argument, so a line-vector⍞000Dor the content of a whole text file may be converted in one call.⍞000D⍞000DTechnical note:⍞000D⍞000DIn the coding of the compression case, two subfunctions may be of general inter-⍞000Dest.  The first, suggested by Morten Kromberg, identifies runs of adjacent 1s in⍞000Dits boolean vector argument:⍞000D⍞000D    runs ← {s←+\⍵ ⋄ s-⌈\s×~⍵}       ⍝ runs of adjacent 1s.⍞000D⍞000D    runs ← {⍵{⍵-⌈\⍵×~⍺}+\⍵}         ⍝ ditto, but with no local variable.⍞000D⍞000D    runs 0 1 1 1 0 1 0 1 1 0        ⍝ runs of adjacent 1s.⍞000D0 1 2 3 0 1 0 1 2 0⍞000D⍞000Dand  the  second, by Nicolas Delcros, returns the effect of a state being set ON⍞000Dby  1s from its boolean left argument, and OFF by 1s from its right argument. In⍞000Delectronics, this function is known as the "SR (set-reset) flip flop".⍞000D⍞000D    onoff ← {1↓⊃,/∨\¨(1,⍵)⊂0,⍺}     ⍝ on where ⍺=1, off where ⍵=1.⍞000D⍞000D    ons ⋄ offs ⋄ ons onoff offs     ⍝ show ons, offs and resulting state.⍞000D0 0 1 1 0 0 0 0 1 0 0 0 0⍞000D0 0 0 0 0 1 0 1 0 0 0 1 0⍞000D0 0 1 1 1 0 0 0 1 1 1 0 0⍞000D⍞000DAlthough this does not arise in the coding of xtabs, in general there is a prob-⍞000Dlem in deciding what to do if ON and OFF bits coincide.  Nicolas gives the foll-⍞000Dowing alternatives:⍞000D⍞000D    onoff ← {1↓⊃,/∨\¨(1,⍵)⊂1,⍺}     ⍝ priority given to ON, starting ON⍞000D    onoff ← {1↓⊃,/∨\¨(1,⍵)⊂0,⍺}     ⍝ priority given to ON, starting OFF⍞000D    onoff ← {1↓⊃,/∧\¨(1,⍺)⊂1,~⍵}    ⍝ priority given to OFF, starting ON⍞000D    onoff ← {1↓⊃,/∧\¨(1,⍺)⊂0,~⍵}    ⍝ priority given to OFF, starting OFF⍞000D⍞000Dand this one,  where coincident ON and OFF signals are ignored, may have pleased⍞000DGérard Langlet. The function starts in state OFF (to start in state ON, we could⍞000Djust invert the logic: on=0, off=1).⍞000D⍞000D    onoff ← {n←⍺≠⍵ ⋄ ≠\n\2≠/¯1,n/⍺-⍵}⍞000D⍞000Dor, with an inner dfn instead of a local variable:⍞000D⍞000D    onoff ← {(⍺≠⍵){≠\⍺\2≠/¯1,⍺/⍵}⍺-⍵}⍞000D⍞000D(muse:⍞000D·⍞000D    There is an intriguing story surrounding the coding of onoff:⍞000D·⍞000D    Jim  Weigang says: "In his APL85 paper (on pg. 82), Clark Wiedmann describes⍞000D    a  programming  problem  posed  to  STSC  employees. The task was to model a⍞000D    state-switching device that toggled state based on signals from two separate⍞000D    "on"  and  "off"  wires.  The device can be modeled trivially with a program⍞000D    that  loops.  Clark  wrote:  "Over  a period of 10 days, 12 programmers con-⍞000D    tributed  14  distinct solutions. Nine of the first ten were incorrect. [The⍞000D    correct  one  was  the  looping  version.]  The  eleventh  solution (by Jeff⍞000D    Chilton) was the first correct one that was non-iterative. It was:⍞000D·⍞000D        1↓((1,OFF>ON)PORSCAN 0,ON>OFF)≠(1,OFF≠ON)PNESCAN 0,ON∧OFF⍞000D⍞000D    The  two  subroutines  [are  partitioned or-scan and notequal-scan, from Bob⍞000D    Smith''s  APL79  paper]."  Clark  estimated that the "quest for a non-looping⍞000D    solution  cost about $13,000 in programming time and correspondence." A year⍞000D    or two after this description was published, someone sent Clark a stunningly⍞000D    short  solution  that  everyone had missed. One should not underestimate the⍞000D    amount  of work it sometimes takes to find noniterative solutions in APL, or⍞000D    assume  that  finding  such  solutions  is worth the amount of time spent on⍞000D    them. "⍞000D⍞000D    Presumably, the "stunningly short solution" predated nested arrays and part-⍞000D    itioned reduction.⍞000D)⍞000D⍞000DExample:⍞000D⍞000D    text⍞000Dwhistles        far     and wee⍞000D⍞000D    ht ← (9+⎕io)⊃⎕av                        ⍝ horizontal tab char.⍞000D⍞000D    st ← ht''→''∘subs                         ⍝ show tabs as →.⍞000D⍞000D    st ¯8 xtabs text                        ⍝ compress using 8-tabs⍞000Dwhistles→far→and wee⍞000D⍞000D    st ¯4 xtabs text                        ⍝ compress using 4-tabs⍞000Dwhistles→→far→→and→wee⍞000D⍞000D    text ≡ 4 xtabs ¯4 xtabs text            ⍝ full circle⍞000D1⍞000D    {⍵≡4 xtabs ¯4 xtabs ⍵} #.notes.xtabs    ⍝ text with embedded linefeeds.⍞000D1⍞000D⍞000DSee also: Line_vectors getfile⍞000D⍞000DIndex:tab expansion|horizontal tabs|adjacent 1s|flip flop (RS)⍞000DIndex;Weigang J.|Wiedmann C.|Smith R.A.|Chilton J.|Langlet G.⍞000DIndex;Kromberg M.|Delcros N.' 
