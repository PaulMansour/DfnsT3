'rslt ← {larg} (func ##.trace) rarg          ⍝ Trace function application.⍞000D⍞000DTrace  applies  its function operand to (or between) its argument(s). As a side-⍞000Deffect the argument(s), function and result are displayed in the session.⍞000D⍞000DTrace  can  be used as a debugging aid and to observe the behaviour of primitive⍞000Dor defined operators.⍞000D⍞000DIn  the case of a _primitive_ operator, trace shows its _formal_ reduction sequ-⍞000Dence.  When  unobserved by trace, the interpreter is free to "cheat" in a number⍞000Dof  ways. For example, +/ of a boolean array is actually performed 8-items-at-a-⍞000Dtime,  and for associative functions such as + and ×, scan (\) operates cumulat-⍞000Dively in one pass from left to right.⍞000D⍞000DTechnical note:⍞000D⍞000D    trace←{⍺←⊢                          ⍝ Trace of function application.⍞000D        fn←⍺⍺{⍙←⍺⍺ ⋄ ~∘'' ⍙''⍕⊂⎕OR''⍙''}⍵   ⍝ function representation.⍞000D        ↑⊢/⎕←⍺ fn ⍵''=>'',⊂⍺ ⍺⍺ ⍵         ⍝ display and result.⍞000D    }⍞000D⍞000DAs ''⍺⍺'' is outside the domain of ⎕OR, the function representation is produced by⍞000Dnaming the operand function within an inner operator.⍞000D⍞000D        fn←⍺⍺{⍙←⍺⍺ ⋄ ········⎕OR''⍙''}⍵   ⍝ function representation.⍞000D⍞000DThe other part of this inner function:⍞000D⍞000D        fn←⍺⍺{·······~∘'' ⍙''⍕⊂······}⍵   ⍝ function representation.⍞000D⍞000DRemoves the assigned name (⍙) and superfluous blanks  from the format of the ⎕OR⍞000Dof a defined function, leaving it represented by a single ∇ character.⍞000D⍞000DExamples:⍞000D⍞000D      1 2 3 +trace 4 5 6            ⍝ vector addition.⍞000D 1 2 3  +  4 5 6  =>  5 7 9⍞000D5 7 9⍞000D⍞000D      1 2 3 +trace¨ 4 5 6           ⍝ item-wise addition.⍞000D1  +  4  =>  5⍞000D2  +  5  =>  7⍞000D3  +  6  =>  9⍞000D5 7 9⍞000D⍞000D      ⍳trace¨2 3                    ⍝ monadic function application.⍞000D ⍳  2  =>  1 2⍞000D ⍳  3  =>  1 2 3⍞000D┌───┬─────┐⍞000D│1 2│1 2 3│⍞000D└───┴─────┘⍞000D⍞000D      ×trace/⍳5                     ⍝ reduce⍞000D4  ×  5  =>  20⍞000D3  ×  20  =>  60⍞000D2  ×  60  =>  120⍞000D1  ×  120  =>  120⍞000D120⍞000D      ×trace\⍳5                     ⍝ scan⍞000D1  ×  2  =>  2⍞000D2  ×  3  =>  6⍞000D1  ×  6  =>  6⍞000D3  ×  4  =>  12⍞000D2  ×  12  =>  24⍞000D1  ×  24  =>  24⍞000D4  ×  5  =>  20⍞000D3  ×  20  =>  60⍞000D2  ×  60  =>  120⍞000D1  ×  120  =>  120⍞000D1 2 6 24 120⍞000D⍞000D    0 +trace foldl ⍳5               ⍝ +foldl: fold from left⍞000D0  +  1  =>  1⍞000D1  +  2  =>  3⍞000D3  +  3  =>  6⍞000D6  +  4  =>  10⍞000D10  +  5  =>  15⍞000D15⍞000D      +trace/⍳5                     ⍝ compare with reduce (fold from right).⍞000D4  +  5  =>  9⍞000D3  +  9  =>  12⍞000D2  +  12  =>  14⍞000D1  +  14  =>  15⍞000D15⍞000D⍞000D      {⍵ ⍵}trace¨⍳3                 ⍝ non-primitive operand represented as ''∇''⍞000D ∇  1  =>  1 1⍞000D ∇  2  =>  2 2⍞000D ∇  3  =>  3 3⍞000D┌───┬───┬───┐⍞000D│1 1│2 2│3 3│⍞000D└───┴───┴───┘⍞000D⍞000DSee also: foldl scan⍞000D⍞000DIndex:monitor|debugging' 
