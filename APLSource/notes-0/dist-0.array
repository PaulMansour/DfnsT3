'd ← L ##.dist R                             ⍝ Levenshtein distance.⍞000D⍞000DFrom Jay Foad, [dist] returns the "distance" between simple vectors L and R.⍞000D⍞000DThe O(m×n) algorithm compares sequences, calculating the minimum number of edits⍞000Drequired to transform one into the other. The notional costs of the edit operat-⍞000Dions are:⍞000D⍞000D    Insert item:  1⍞000D    Delete item:  1⍞000D    Replace item: 1⍞000D    Copy item:    0⍞000D⍞000DFor example, comparing vectors ''Sunday'' and  ''Saturday'' implies  the  following⍞000Dtable, where each item is:⍞000D⍞000D    0 + its NW neighbour, if the corresponding items match.⍞000D    1 + the minimum of its N, W and NW neighbours, otherwise.⍞000D⍞000D      S a t u r d a y⍞000D    S 0 1 2 3 4 5 6 7⍞000D    u 1 1 2 2 3 4 5 6⍞000D    n 2 2 2 3 3 4 5 6⍞000D    d 3 3 3 3 4 3 4 5⍞000D    a 4 3 4 4 4 4 3 4⍞000D    y 5 4 4 5 5 5 4 3⍞000D⍞000DEach number in the table is the edit distance between the sub-strings above  and⍞000Dto its left.  For example, the 2 in the second  row, fourth column, is the dist-⍞000Dance from ''Su'' to ''Satu'': two copies and two insertions.⍞000D⍞000DNote that, as the cost of insertion  and  deletion  is the same, the function is⍞000Dcommutative. ''Satu'' → ''Su'' : two copies and two deletions.⍞000D⍞000DThe Levenshtein distance between the two sequences is thus the lower-right table⍞000Ditem (3 in the above example).⍞000D⍞000DSee: http://en.wikipedia.org/wiki/Levenshtein_distance⍞000D⍞000DTechnical note:⍞000D⍞000D    dist←{⎕ML←0                     ⍝ Levenshtein distance.⍞000D        a←(n+1)⍴(⍴⍺)+n←⍴⍵           ⍝ first row of matrix⍞000D        f←⍵{⌊\⍵⌊(⊃⍵),(¯1↓⍵)-1+⍺=⍺⍺} ⍝ iteration step⍞000D        z←⊃f/(⌽⍺),⊂a                ⍝ last row of matrix⍞000D        ⊃⌽z⍞000D    }⍞000D⍞000D[dist] calculates a row of the matrix at a time.  The / iterates over successive⍞000Dcharacters from ⍺, generating a new matrix row each time. The ⌊\ is key to calc-⍞000Dulating a whole row quickly.⍞000D⍞000DExamples⍞000D⍞000D    ''Sunday'' dist ''Saturday''                ⍝ distance between strings.⍞000D3⍞000D    ''sitting'' dist ''kitten''                 ⍝ examples from Wikipedia.⍞000D3⍞000D    mons ← ''January'' ''February'' ''March''⍞000D    mons,← ''April''   ''May''      ''June''⍞000D    mons,← ''July''    ''August''   ''September''⍞000D    mons,← ''October'' ''November'' ''December''⍞000D⍞000D    mons ∘.dist mons                        ⍝ distances between months⍞000D0 4 6 7 5 5 4 6 9 7 8 8⍞000D4 0 7 7 6 7 6 7 8 7 8 7⍞000D6 7 0 4 3 5 5 6 9 7 8 8⍞000D7 7 4 0 5 5 5 5 8 7 8 8⍞000D5 6 3 5 0 4 3 6 9 7 8 8⍞000D5 7 5 5 4 0 2 5 8 6 7 7⍞000D4 6 5 5 3 2 0 5 9 7 8 8⍞000D6 7 6 5 6 5 5 0 9 7 8 8⍞000D9 8 9 8 9 8 9 9 0 5 4 3⍞000D7 7 7 7 7 6 7 7 5 0 5 4⍞000D8 8 8 8 8 7 8 8 4 5 0 3⍞000D8 7 8 8 8 7 8 8 3 4 3 0⍞000D⍞000D    fuzzy←{({⍵⍳⌊/⍵}(lcase ⍺)∘dist∘lcase¨⍵)⊃⍵}   ⍝ fuzzy selection⍞000D⍞000D    fuzzy∘mons¨ ''dcmbr'' ''marching'' ''febury''     ⍝ fuzzy matches⍞000D December  March  February⍞000D⍞000DSee also: lcase⍞000D⍞000DIndex:string comparison|fuzzy⍞000DIndex;Levenshtein V.|Foad J.' 
