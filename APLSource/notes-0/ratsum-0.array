'sum ← {larg} (digs ##.ratsum) rarg          ⍝ ⍺⍺-rational sum of ⍺ and ⍵.⍞000Dcmp ←        (digs ##.ratsum) rarg          ⍝ ⍺⍺-complement (negative) of ⍵.⍞000D⍞000DOperator [ratsum] returns the sum of arguments [larg] and [rarg], which are each⍞000Drational scalars in the number system defined by [digs].⍞000D⍞000DCalled  without  a left argument,  [ratsum] returns the complement (negative) of⍞000D[rarg].⍞000D⍞000DThis  operator  codes  some  of  the ideas presented in LeRoy Eide''s magnificent⍞000Drepresentation scheme for rational numbers.⍞000D⍞000D    See: →ratrep←.⍞000D⍞000D[digs] is a character vector of the digits used by the number system. The digits⍞000Dmay be any characters, except that:⍞000D⍞000D    - They must distinct from each other,⍞000D    - Exactly one of them must be ''0'',⍞000D    - They must not include any of the special characters '' {}[]()<>\|/,:.''⍞000D⍞000DThe digits vector may, but need not, be embraced by braces.⍞000D⍞000DArguments  [larg]  and  [rarg]  are character vectors of the form <lru|man|rru>,⍞000Dwhere lru, man and rru are vectors of [digs] and man may additionally contain an⍞000Dembedded ''.'' radix point.⍞000D⍞000DFor example, if [digs] is⍞000D⍞000D        0123456789      (decimal numbers)⍞000Dthen⍞000D        <0|123|0>  is 123⍞000D        <0|98.4|0> is 98.4⍞000D        <0|0|0>    is 0⍞000D        <0|4|9>    is 4.99..⍞000D        <9|9|0>    is ..999⍞000D⍞000DLeRoy''s  paper →ratrep← makes it all clear and function →esh← provides an inter-⍞000Dactive shell for exploring these numbers.⍞000D⍞000DTechnical notes on the coding of [ratsum]⍞000D-----------------------------------------⍞000DCalled dyadically, [ratsum] compiles its rational-number-expression (rexp) argu-⍞000Dments into an "lmrs" triple of 2-row matrices, which represents the sum.⍞000D⍞000D    (lrus mans rrus)   ⍝ :: lmrs⍞000D⍞000Dwhere:⍞000D⍞000D    lrus: 2-row left replication units matrix.⍞000D    mans: 2-row mantissas matrix.⍞000D    rrus: 2-row right replication units matrix.⍞000D⍞000Dfor example:⍞000D⍞000D        ''<0|123.45|7>'' compile ''<14|2.3|789>''⍞000D    ┌──┬──────┬───┐⍞000D    │00│123.45│777│⍞000D    │14│142.37│897│⍞000D    └──┴──────┴───┘⍞000D⍞000DAddition Table⍞000D--------------⍞000DInner  function [atab] returns an addition table for a number system with digits⍞000D⍺⍺. Each item in the table is the 2-vector: carry-out and sum.⍞000D⍞000D        7 10↑disp atab ''012''    ⍝ (partial) addition table for regular ternary.⍞000D    ┌──┬──┬──┬⍞000D    │00│01│02│⍞000D    ├──┼──┼──┼⍞000D    │01│02│10│⍞000D    ├──┼──┼──┼⍞000D    │02│10│11│⍞000D    ├──┼──┼──┼⍞000D⍞000D        7 10↑disp atab ''-0+''    ⍝ (partial) addition table for balanced ternary.⍞000D    ┌──┬──┬──┬⍞000D    │-+│0-│00│⍞000D    ├──┼──┼──┼⍞000D    │0-│00│0+│⍞000D    ├──┼──┼──┼⍞000D    │00│0+│+-│⍞000D    ├──┼──┼──┼⍞000D⍞000DIt is convenient for the addition table to accept numbers containing an embedded⍞000Dradix point. This requires only one extra row and column for the dots:⍞000D⍞000D      i   j  ...  k   .⍞000D    ·   ·   ·   ·   ┬───┐⍞000D  i ·   ·   ·   ·   │i .│   In other words:⍞000D    ·   ·   ·   ·   ┼───┤⍞000D  j ·   ·   ·   ·   │j .│   "Dot add dot is dot, carry 0".⍞000D    ·   ·   ·   ·   ┼───┤   "Dot add thing is dot, carry thing".⍞000D ...·   ·   ·   ·   │   │⍞000D    ·   ·   ·   ·   ┼───┤       0 1 1 0   ← carries⍞000D  k ·   ·   ·   ·   │k .│       1 2 . 3 4⍞000D    ├───┼───┼───┼───┼───┤       4 5 . 7 5 +⍞000D  . │i .│j .│   │k .│0 .│       ---------⍞000D    └───┴───┴───┴───┴───┘       5 8 . 0 9⍞000D⍞000Dgiving:⍞000D⍞000D        atab ''012''          ⍝ full addition table for regular ternary.⍞000D    ┌──┬──┬──┬──┐⍞000D    │00│01│02│0.│⍞000D    ├──┼──┼──┼──┤⍞000D    │01│02│10│1.│⍞000D    ├──┼──┼──┼──┤⍞000D    │02│10│11│2.│⍞000D    ├──┼──┼──┼──┤⍞000D    │0.│1.│2.│0.│⍞000D    └──┴──┴──┴──┘⍞000D⍞000D        atab ''-0+''          ⍝ full addition table for balanced ternary.⍞000D    ┌──┬──┬──┬──┐⍞000D    │-+│0-│00│-.│⍞000D    ├──┼──┼──┼──┤⍞000D    │0-│00│0+│0.│⍞000D    ├──┼──┼──┼──┤⍞000D    │00│0+│+-│+.│⍞000D    ├──┼──┼──┼──┤⍞000D    │-.│0.│+.│0.│⍞000D    └──┴──┴──┴──┘⍞000D⍞000DHere''s the code:⍞000D⍞000D    atab←{⎕io ⎕ml←0                         ⍝ addition table for digits ⍵.⍞000D        min←⍵⍳''0''                           ⍝ - minimum value.⍞000D        vals←-min-⍳⍴⍵                       ⍝ numeric values of digits.⍞000D        ntab←vals∘.+vals                    ⍝ all sums larg vs. rarg.⍞000D        base←2/⍴⍵                           ⍝ 2-digit encode/decode vector.⍞000D        vtab←-min-base⊤base⊥min+base⊤ntab   ⍝ base-⍵:  2-digit addition values.⍞000D        ptab←↓(min+(¯1⌽⍳3)⍉vtab)⊃¨⊂⍵        ⍝ array of (carry_out result) pairs,⍞000D        {(ptab,⍵)⍪⍵,⊂''0.''}⍵,¨''.''            ⍝ with additional rows/cols for ''.''.⍞000D    }                                       ⍝ :: [[carry sum];] ← ∇ [digits]⍞000D⍞000DAPL likes to do things in parallel:  armed with our addition table, we can sum a⍞000D2-row  matrix  of digits in one pop by indexing the table with a vector of pairs⍞000Dof  digits  to  be summed. The result is a vector of carry-out, sum-digit pairs,⍞000Dwhich  idiom ↓⍉↑ renders as a pair of carry-out, sum-digit vectors. Then, if the⍞000Dcarry-out  vector is all-zeros, we''re done; otherwise, we recursively [rsum] the⍞000Dleft-shifted carry-out vector with the total and try again:⍞000D⍞000D    rsum←(atab digs){⎕io ⎕ml←0              ⍝ row sum of matrix ⍵, carry_in ⍺.⍞000D        cov itot←↓⍉↑⍺⍺[↓⍉digs⍳⍵]            ⍝ carry vector and initial total.⍞000D        ''0''∧.=cov,⍺:''0''itot                 ⍝ all-zero carry: done.⍞000D        co tot←''0''∇↑(1↓cov,⍺)itot           ⍝ total with shifted carry vector.⍞000D        (⊃⊃⌽''0''∇↑co,⊂1↑cov)tot              ⍝ aggregate carry and total.⍞000D    }                                       ⍝ :: d [d] ← ∇ [d;]⍞000D⍞000DNotice  how we snuck the initial carry-in ⍺ into the process on the right of the⍞000Dfirst left-shift of the carry vector.⍞000D⍞000DHere is a trace of rsum: 147258369.147258369 + 123456789.987654321  with initial⍞000Dcarry-in ''1'':⍞000D⍞000D  + 147258369.147258369 1   initial carry-in ''1'' (waiting in the wings).⍞000D    123456789.987654321⍞000D    -------------------     digit-wise sum produces ...⍞000D  < 0010111110111011001 1   carry-out vector (initial carry-in still waiting).⍞000D    260604048.024802680     and total vector.⍞000D                            shifting carry vector left and absorbing carry-in:⍞000D  + 0101111101110110011 0   carry-out shifted left, initial carry-in absorbed.⍞000D    260604048.024802680⍞000D    -------------------     digit-wise sum produces ...⍞000D  < 0000000001000000000 0   carry-out vector.⍞000D    270715158.134912691     and total vector.⍞000D                            shifting carry vector left produces ...⍞000D  + 0000000010000000000 0   carry-out shifted left (zero appended).⍞000D    270715158.134912691⍞000D    -------------------     digit-wise sum produces ...⍞000D    0000000000000000000     all-zero carry-out vector⍞000D    270715159.134912691     and final total.⍞000D⍞000DHence, using vector addition, in this case we were able to sum a pair of 18-dig-⍞000Dit numbers in just three iterations. The very worst case would be to sum ''0..01''⍞000Dwith ''9..99'', which would require one iteration per digit.⍞000D⍞000DNotice  how  a  carry is just passed along by the ''.'' column. The inclusion of a⍞000Drow  and column for ''.'' in the addition table effectively renders the dot invis-⍞000Dible  to  the  process, except as in the above case, where it occasions a single⍞000Dextra iteration.⍞000D⍞000DNotice finally that [rsum] is a derived function, whose left operand (atab digs)⍞000Dis  evaluated  just once (per call on ratsum), when rsum is defined, rather than⍞000Deach time [rsum] is called.⍞000D⍞000D(muse:⍞000D⍞000D    [ratsum]  would be a good candidate for conversion to a function returning a⍞000D    "closure",  should such a mechanism become available.  In this case, instead⍞000D    of:⍞000D            ↑ ⎕d ratsum/ ⎕d     ⍝ reduction using derived function.⍞000D        45⍞000D⍞000D    if ratsum returned a closure, we would type:⍞000D⍞000D            ↑ (ratsum ⎕d)/ ⎕d   ⍝ reduction using closure.⍞000D        45⍞000D⍞000D    the  advantage  of using a closure is that we could arrange for the addition⍞000D    table  for a particular number system to be generated just once, at closure-⍞000D    formation  time,  rather  than each time the derived function is applied. In⍞000D    the  first example above, [atab] is called nine times, whereas in the second⍞000D    example, it is called just once.⍞000D⍞000D    For more on closures, see: http://dfns.dyalog.com/downloads/fre.pdf⍞000D)⍞000D⍞000DInner  functions  [clru] and [fmt] make use of auxiliary function [repl],  which⍞000Dtakes a left argument pair (to from) of strings to find and replace in its right⍞000Dargument ⍵:⍞000D⍞000D        posh ← ''oun'' ''in'' ∘ repl    ⍝ Talk like the Duke of Edinburgh.⍞000D⍞000D        '''' ⋄ posh ''A bounder in the grounds? Release the hounds!''⍞000D⍞000D    A binder in the grinds? Release the hinds!⍞000D⍞000D(muse:⍞000D    In  some treatments of the lambda calculus, this (to from) order of items is⍞000D    preferred  to  the more common (from to).  Syntax "[to/fm]expr" means "expr"⍞000D    with each occurrence of "fm" replaced with "to". A pleasing mnemonic for the⍞000D    syntax is to think of [to/fm] as a fraction applied to expr; it cancels "fm"⍞000D    and multiplies by "to". We could vocalise [to/fm]... as "to for fm in ...".⍞000D)⍞000D⍞000DReplication Unit Alignment⍞000D--------------------------⍞000DNote that, when aligning LLUs and RRUs, as in:⍞000D⍞000D    <12|3|456> + <123|4|56>⍞000D⍞000Dthe  resulting  RUs  should each contain a number of digits equal to the lowest-⍞000Dcommon-multiple  (LCM)  of those of its corresponding summands. In the above ex-⍞000Dample, this is 6 in each case:⍞000D⍞000D    <12|3|456>              ⍝ LRU and RRU misaligned    :-(⍞000D    <123|4|56> +⍞000D⍞000Drewrite:⍞000D⍞000D    <121212|3|456456>       ⍝ LRU and RRU aligned       :-)⍞000D    <123123|4|565656> +⍞000D⍞000DNormal form of numbers⍞000D----------------------⍞000D[ratsum] attempts to normalise its result in a number of ways.⍞000D⍞000D    Internal contraction of LRU and RRU:        <123123|45|676767> → <123|45|67>⍞000D                                                 ¯¯¯¯¯¯    ¯¯¯¯¯¯     ¯¯¯    ¯¯⍞000D    External absorption from the mantissa:      <231|23456|76> → <123|45|67>⍞000D                                                 ¯¯¯ ¯¯  ¯        ¯¯¯⍞000D    Clearing the LRU to 0 or ~0:                <12|34|56> → <0|22|4>⍞000D                                                 ¯¯⍞000D    Replacing the RRU if it is ~0:              <0|4|9> → <0|5|0>⍞000D                                                   ¯ ¯       ¯⍞000D    Using an external ''¯'' where appropriate:    <9|726.85|0> → ¯273.15⍞000D                                                 ¯⍞000Dwhere  ~0  is the complement of 0 (e.g., 9 in the decimal system).  See →ratrep←⍞000Dfor details.⍞000D⍞000DExamples⍞000D--------⍞000D⍞000D⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝ Decimal⍞000D⍞000D    sum ← neg ← ⎕d ratsum               ⍝ standard decimal sum and negation fns.⍞000D⍞000D    ''<0|92|34>''sum''<0|8.6|1>''           ⍝ 92.3434... + 8.611... → 100.95454...⍞000D<0|100.9|54>⍞000D⍞000D    ''<9|9|0>''sum''<0|1|0>''               ⍝ ¯1 + 1 → 0                    →ratrep←⍞000D<0|0|0>⍞000D⍞000D    ''<0|0|3>''sum neg''<0|0|6>''           ⍝ (1÷3) + - (2÷3) → -(1÷3)      →ratrep←⍞000D<9|9|6>⍞000D⍞000D⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝ Balanced Ternary⍞000D⍞000D    sum ← ''-0+''ratsum                   ⍝ balanced ternary sum.⍞000D⍞000D    ''<|0|+-|0>''sum''<0|+0|0>''            ⍝ balanced ternary 2 + 3 → 5⍞000D<0|+--|0>⍞000D⍞000D    ''<0|0|+>''sum''<0|+|->''               ⍝ balanced ternary 0.5 + 0.5 → 1⍞000D<0|+|0>⍞000D⍞000D⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝ Binary⍞000D⍞000D    sum ← ''01''ratsum                    ⍝ binary sum.⍞000D⍞000D    ''<0|1001|0>''sum''<0|111|0>''          ⍝ binary 9 + 7 → 16⍞000D10000⍞000D⍞000D⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝ Positively-skewed four⍞000D⍞000D    e←{''<0|'',⍵,''|0>''}                   ⍝ Eidify simple number.⍞000D⍞000D    ''-0+#''ratsum\e¨''0++++++++''          ⍝ ⍳9 in positively-skewed four {-0+#}.⍞000D┌───────┬───────┬───────┬────────┬────────┬────────┬────────┬────────┬────────┐⍞000D│<0|0|0>│<0|+|0>│<0|#|0>│<0|+-|0>│<0|+0|0>│<0|++|0>│<0|+#|0>│<0|#-|0>│<0|#0|0>│⍞000D└───────┴───────┴───────┴────────┴────────┴────────┴────────┴────────┴────────┘⍞000D⍞000D⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝ Negatively-skewed four⍞000D⍞000D    ''=-0+''ratsum\e¨''0+++++++''           ⍝ ⍳8 in negatively-skewed four {=-0+}.⍞000D┌───────┬───────┬────────┬────────┬────────┬────────┬─────────┬─────────┐⍞000D│<0|0|0>│<0|+|0>│<0|+=|0>│<0|+-|0>│<0|+0|0>│<0|++|0>│<0|+==|0>│<0|+=-|0>│⍞000D└───────┴───────┴────────┴────────┴────────┴────────┴─────────┴─────────┘⍞000D⍞000D⍝ Here''s a handy little function to convert an array of regular integers into⍞000D⍝ ⍺-numbers:⍞000D⍞000D    encode←{⎕IO ⎕ML←0                           ⍝ ⍺-encode of int array ⍵.⍞000D        u←(2⊥''0''=2↑¯1⌽⍺)⊃0 1 ¯1                 ⍝ extremal ''0'': unsigned.⍞000D        (|u)∧u∊-×⍵:((0>u××⍵)/¨''¯''),¨⍺ ∇ u×|⍵    ⍝ explicit ''¯'', where needed.⍞000D        min←⍺⍳''0''                               ⍝ - minimum value.⍞000D        width←1+⌈(⍴⍺)⍟⌈/1⌈,|⍵                   ⍝ upper bound for no of digits.⍞000D        base←width/⍴⍺                           ⍝ encode/decode vector.⍞000D        vals←-min-base⊤base⊥min+base⊤⍉⍵         ⍝ base-⍺ integers.⍞000D        nlz←{(-1⌈+/∨\⍵≠''0'')↑⍵}                  ⍝ without surplus leading zeros.⍞000D        nlz¨↓⍺[min+⍉vals]                       ⍝ array of ⍺-numbers.⍞000D    }⍞000D⍞000D    ''-0+''encode ¯9 to 10                        ⍝ balanced ternary ¯9..10⍞000D┌───┬───┬───┬───┬───┬──┬──┬──┬─┬─┬─┬──┬──┬──┬───┬───┬───┬───┬───┬───┐⍞000D│-00│-0+│-+-│-+0│-++│--│-0│-+│-│0│+│+-│+0│++│+--│+-0│+-+│+0-│+00│+0+│⍞000D└───┴───┴───┴───┴───┴──┴──┴──┴─┴─┴─┴──┴──┴──┴───┴───┴───┴───┴───┴───┘⍞000D⍞000D    ⍝ Various number systems:⍞000D⍞000D    bases ← ⎕d ''-0+'' ''01'' ''-0+#'' ''=-0+'' ''≡=-0+#'' ''210'' (16↑⎕d,⎕a)⍞000D⍞000D    disp bases⍞000D┌──────────┬───┬──┬────┬────┬──────┬───┬────────────────┐⍞000D│0123456789│-0+│01│-0+#│=-0+│≡=-0+#│210│0123456789ABCDEF│⍞000D└──────────┴───┴──┴────┴────┴──────┴───┴────────────────┘⍞000D⍞000D    ↑bases encode¨⊂¯5 to 12                      ⍝ ¯5..12 per number system.⍞000D┌────┬────┬───┬───┬──┬─┬──┬──┬───┬───┬───┬───┬───┬────┬────┬────┬────┬────┐⍞000D│¯5  │¯4  │¯3 │¯2 │¯1│0│1 │2 │3  │4  │5  │6  │7  │8   │9   │10  │11  │12  │⍞000D├────┼────┼───┼───┼──┼─┼──┼──┼───┼───┼───┼───┼───┼────┼────┼────┼────┼────┤⍞000D│-++ │--  │-0 │-+ │- │0│+ │+-│+0 │++ │+--│+-0│+-+│+0- │+00 │+0+ │++- │++0 │⍞000D├────┼────┼───┼───┼──┼─┼──┼──┼───┼───┼───┼───┼───┼────┼────┼────┼────┼────┤⍞000D│¯101│¯100│¯11│¯10│¯1│0│1 │10│11 │100│101│110│111│1000│1001│1010│1011│1100│⍞000D├────┼────┼───┼───┼──┼─┼──┼──┼───┼───┼───┼───┼───┼────┼────┼────┼────┼────┤⍞000D│--  │-0  │-+ │-# │- │0│+ │# │+- │+0 │++ │+# │#- │#0  │#+  │##  │+-- │+-0 │⍞000D├────┼────┼───┼───┼──┼─┼──┼──┼───┼───┼───┼───┼───┼────┼────┼────┼────┼────┤⍞000D│--  │-0  │-+ │=  │- │0│+ │+=│+- │+0 │++ │+==│+=-│+=0 │+=+ │+-= │+-- │+-0 │⍞000D├────┼────┼───┼───┼──┼─┼──┼──┼───┼───┼───┼───┼───┼────┼────┼────┼────┼────┤⍞000D│-+  │-#  │≡  │=  │- │0│+ │# │+≡ │+= │+- │+0 │++ │+#  │#≡  │#=  │#-  │#0  │⍞000D├────┼────┼───┼───┼──┼─┼──┼──┼───┼───┼───┼───┼───┼────┼────┼────┼────┼────┤⍞000D│12  │11  │10 │2  │1 │0│¯1│¯2│¯10│¯11│¯12│¯20│¯21│¯22 │¯100│¯101│¯102│¯110│⍞000D├────┼────┼───┼───┼──┼─┼──┼──┼───┼───┼───┼───┼───┼────┼────┼────┼────┼────┤⍞000D│¯5  │¯4  │¯3 │¯2 │¯1│0│1 │2 │3  │4  │5  │6  │7  │8   │9   │A   │B   │C   │⍞000D└────┴────┴───┴───┴──┴─┴──┴──┴───┴───┴───┴───┴───┴────┴────┴────┴────┴────┘⍞000D⍞000D    ⍝ Various answers to the meaning of Life, the Universe, and Everything:⍞000D⍞000D    ↑bases encode¨42⍞000D┌──┬─────┬──────┬───┬────┬───┬─────┬──┐⍞000D│42│+---0│101010│###│+--=│++0│¯1120│2A│⍞000D└──┴─────┴──────┴───┴────┴───┴─────┴──┘⍞000D⍞000D    ⍝ For more examples see test script: ##.scripts.ratsum⍞000D⍞000DSee also: ratrep esh JitSub⍞000DSee also: ary rats nats⍞000D⍞000DIndex:Eide numbers|rational number|balanced ternary|skewed four⍞000DIndex:Function Results Edition|closure|posh⍞000DIndex;Eide L.N.|Edinburgh, Duke of' 
