'match ← this ##.refmatch that           ⍝ Space reference match.⍞000D⍞000DThe  arguments are references to namespaces to be compared. [refmatch] deems the⍞000Drefs matching iff:⍞000D⍞000D[1.0] They are refs to the same space, or⍞000D[2.1] The namelists for all classes are identical, and⍞000D[2.2] Variables in both spaces match, and⍞000D[2.3] Those System variables with namespace extent in both spaces match.⍞000D[2.4] Function and operator source (⎕CR) in both spaces match, and⍞000D[2.5] Any sub-spaces match, using the same criteria.⍞000D⍞000DNote that in comparing namespaces, this function ignores:⍞000D⍞000D- GUI properties, such as Posn, Size, Handle, ···⍞000D- Timestamps and User IDs in functions.⍞000D- ⎕stop, ⎕trace, ⎕monitor settings on functions.⍞000D⍞000DExample:⍞000D⍞000D    notes refmatch notes        ⍝ match on criterion [1]⍞000D1⍞000D    notes refmatch ⎕ns notes    ⍝ clone matches on criteria [2].⍞000D1⍞000D    notes refmatch {⍵⊣⍵.⎕io←0} ⎕ns notes    ⍝ disturbed clone: mismatch.⍞000D0⍞000D    ''x.z'' ''y.z''⎕ns¨⊂''''          ⍝ create spaces.⍞000D    (x y).hello←⊂''hello''        ⍝ identical vars in x & y.⍞000D    (x y).z.world←⊂''world''      ⍝   ..      ..   in x.z & y.z.⍞000D    (x y).z.(dup←{⍵ ⍵})         ⍝   ..      fns     ..      ..⍞000D⍞000D    tree¨ x y⍞000D┌───────────────┬───────────────┐⍞000D│#.x            │#.y            │⍞000D│·   ~ hello    │·   ~ hello    │⍞000D│·   z          │·   z          │⍞000D│·   ·   ~ world│·   ·   ~ world│⍞000D│·   ·   ∇ dup  │·   ·   ∇ dup  │⍞000D└───────────────┴───────────────┘⍞000D⍞000D    x refmatch y    ⍝ spaces match.⍞000D1⍞000D    x.z.world←''''    ⍝ zap x.z''s world.⍞000D⍞000D    x refmatch y    ⍝ spaces no longer match.⍞000D0⍞000D⍞000DSee also: le tree⍞000D⍞000DIndex:compare namespaces|namespace comparison' 
