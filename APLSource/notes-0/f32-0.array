'v83 ← ##.f32 nums                       ⍝ Conversion to 32-bit floats as ⎕DR 83.⍞000D⍞000DFrom Tomas Gustafsson, this function takes a simple numeric array and returns an⍞000Dequivalent numeric vector suitable for sending to an  external  process that ex-⍞000Dpects 32-bit IEEE floating point numbers.⍞000D⍞000DEach number in argument [nums] is  mapped  to  four  ⎕DR-type-83  numbers in the⍞000Drange ¯128..127.⍞000D⍞000DRef: https://en.wikipedia.org/wiki/Single-precision_floating-point_format⍞000D⍞000DGeoff Streeter suggests this alternative coding, which uses ⎕NA function MEMCPY:⍞000D⍞000D    f32a←{                              ⍝ Conversion to 32-bit floats as ⎕DR 83.⍞000D        bytes←4×≢∊⍵                     ⍝ bytes count⍞000D        xx←⍕{2×⎕SIZE''⍵''}⍬               ⍝ ''32'' or ''64''⍞000D        libfn←''dyalog'',xx,''|MEMCPY''     ⍝ library|function name⍞000D        MEMCPY←⊢                        ⍝ local name for ⎕NA''d function⍞000D        _←⎕NA libfn,'' >I1[] <F4[] P''    ⍝ link to library fn⍞000D        MEMCPY bytes(∊⍵)bytes           ⍝ conversion of numeric array⍞000D    }⍞000D⍞000DExamples:⍞000D⍞000D    f32 1 2 3                           ⍝ 3 numbers => 3×4 bytes⍞000D0 0 ¯128 63 0 0 0 64 0 0 64 64⍞000D⍞000D    f32¨ 1 2 3                          ⍝ each number separately⍞000D┌───────────┬────────┬─────────┐⍞000D│0 0 ¯128 63│0 0 0 64│0 0 64 64│⍞000D└───────────┴────────┴─────────┘⍞000D⍞000D    ⌽∘f32¨ 1 2 3                        ⍝ byte-reversed for Intel machine⍞000D┌───────────┬────────┬─────────┐⍞000D│63 ¯128 0 0│64 0 0 0│64 64 0 0│⍞000D└───────────┴────────┴─────────┘⍞000D⍞000D    hex∘⌽∘f32¨ 1 2 3                    ⍝ hexadecimal format, see →hex←⍞000D┌─────────────┬─────────────┬─────────────┐⍞000D│┌──┬──┬──┬──┐│┌──┬──┬──┬──┐│┌──┬──┬──┬──┐│⍞000D││3f│80│00│00│││40│00│00│00│││40│40│00│00││⍞000D│└──┴──┴──┴──┘│└──┴──┴──┴──┘│└──┴──┴──┴──┘│⍞000D└─────────────┴─────────────┴─────────────┘⍞000D⍞000D    ∊∘hex∘⌽∘f32¨ 1 2 3                  ⍝ enlisted hex per number⍞000D┌────────┬────────┬────────┐⍞000D│3f800000│40000000│40400000│⍞000D└────────┴────────┴────────┘⍞000D⍞000D    ↑ ∊∘hex∘⌽∘f32¨ 1 2 3                ⍝ hex of 32-bit floating point: 1 2 3⍞000D3f800000⍞000D40000000⍞000D40400000⍞000D⍞000D    x32 ← ↑ ∊∘hex∘⌽∘f32¨                ⍝ 32-bit hex formatter⍞000D    x32 1 2 3⍞000D3f800000⍞000D40000000⍞000D40400000⍞000D⍞000D    x32 0 1 ¯2, ÷3                      ⍝ examples from Wikipedia⍞000D00000000⍞000D3f800000⍞000Dc0000000⍞000D3eaaaaaa⍞000D⍞000D    x64 ← ↑ hexf¨                       ⍝ 64-bit hex formatter, see →hexf←⍞000D    x64 1 2 3⍞000D3FF0000000000000⍞000D4000000000000000⍞000D4008000000000000⍞000D⍞000D    cmp ← x32, '' '', x64                 ⍝ 32/64-bit comparison⍞000D    cmp 1 to 10                         ⍝ 1..10⍞000D3f800000 3FF0000000000000⍞000D40000000 4000000000000000⍞000D40400000 4008000000000000⍞000D40800000 4010000000000000⍞000D40a00000 4014000000000000⍞000D40c00000 4018000000000000⍞000D40e00000 401C000000000000⍞000D41000000 4020000000000000⍞000D41100000 4022000000000000⍞000D41200000 4024000000000000⍞000D⍞000D    cmp 2* 1 to 10                      ⍝ 2 4 8 .. 1024⍞000D40000000 4000000000000000⍞000D40800000 4010000000000000⍞000D41000000 4020000000000000⍞000D41800000 4030000000000000⍞000D42000000 4040000000000000⍞000D42800000 4050000000000000⍞000D43000000 4060000000000000⍞000D43800000 4070000000000000⍞000D44000000 4080000000000000⍞000D44800000 4090000000000000⍞000D⍞000D      cmp * 1 to 10                     ⍝ *1, *2, ...⍞000D402df854 4005BF0A8B145769⍞000D40ec7325 401D8E64B8D4DDAE⍞000D41a0af2d 403415E5BF6FB106⍞000D425a6481 404B4C902E273A58⍞000D431469c4 40628D389970338F⍞000D43c9b6e2 407936DC5690C08F⍞000D44891442 409122885AAEDDAA⍞000D453a4f53 40A749EA7D470C6E⍞000D45fd38ab 40BFA7157C470F82⍞000D46ac14ee 40D5829DCF950560⍞000D⍞000DSee also: hex hexf to⍞000D⍞000DIndex: 32-bit floating point⍞000DIndex; Gustafsson T.|Streeter G.⍞000D' 
