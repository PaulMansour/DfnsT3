'nvec ← from ##.to unto                      ⍝ Sequence ⍺ .. ⍵⍞000D⍞000DReturns a vector of numbers ⍺ to ⍵ inclusive. ⍺ is the _first_ value in the seq-⍞000Duence, and ⍵ the _last_. More generally, ⍺ may be a 2-item vector, which determ-⍞000Dines the first two items of the sequence and hence the _step_ size.⍞000D⍞000DNotice  that  any of _first_, _step_ and _last_ may be positive, negative and/or⍞000Dfractional.  If  _last_  is  not  a  whole  number  of _step_s from _first_, the⍞000Dsequence will stop short of _last_.⍞000D⍞000DTechnical notes:⍞000D⍞000DThe following simple function suffices for the ascending sequence ⍺, ⍺+1, ··· ⍵.⍞000DNotice how (·-⎕io) makes it independent of index origin:⍞000D⍞000D    to←{(⍺-⎕io)+⍳1+⍵-⍺}⍞000D⍞000DUseful  refinements  to  the  function allow _descending_ sequences and optional⍞000D_step_ sizes other than 1:⍞000D⍞000D    to←{⎕io←0                                   ⍝ Sequence ⍺ .. ⍵⍞000D        from step←1 ¯1×-\2↑⍺,⍺+×⍵-⍺             ⍝ step default is +/- 1.⍞000D        from+step×⍳0⌈1+⌊(⍵-from)÷step+step=0    ⍝ ⍺ thru ⍵ inclusive.⍞000D    }⍞000D⍞000DAttempts to re-cast the function as a one-liner, include:⍞000D⍞000D    to←{From+0,+\Step⍴⍨0⌈⌊Inc÷Step←--/2⍴⍺,From+×Inc←⍵-From←1⍴⍺}⍞000D⍞000D    to←{↑+/⍵{⍵×{⍵-⎕IO}⍳1+0⌈⌊(⍺⍺-⍺)÷⍵+⍵=0}\1 ¯1×-\2↑⍺,⍺+×⍵-⍺}⍞000D⍞000D    to←{(⍬⍴⍺)+(|-/⌽2↑⍺,⍺+1){⍺×(×⍵)×(-⎕IO)+⍳1+⌊|⍵÷⍺}⍵-⍬⍴⍺}⍞000D⍞000DVMJ  suggests the following extension, which accepts an optional explicit _step_⍞000Dsize  as  a second item of its _right_ argument. _step_ defers to _next_ if both⍞000Dare supplied.⍞000D⍞000D    to←{⍞000D        ⎕IO←0 ⋄ ⍺←1 ⋄ z←0.0000000001⍞000D        (a n)←2↑⍺,⍺ ⋄ (b s)←2↑⍵,1⍞000D        d←|s{⍵≠0:⍵ ⋄ ⍺≠0:⍺ ⋄ 1}n-a⍞000D        {⍵×z<|0-⍵}a+d{(⍺××⍵)×⍳1+⌊|⍵÷⍺}b-a⍞000D    }⍞000D⍞000D    1 3 to 5      ⍝ using: _next_⍞000D1 3 5⍞000D⍞000D    1 to 5 2      ⍝ using: _step_⍞000D1 3 5⍞000D⍞000DBob Smith suggests this extension for nested sequences:⍞000D⍞000D    to←{                                    ⍝ Sequence ⍺ .. ⍵⍞000D        from step←⊂¨1 ¯1×-\2↑⍺,⍺+×⍵-⍺       ⍝ step default is +/- 1.⍞000D        size←0⌈1+⌊⊃(⍵-from)÷step+step=0     ⍝ shape of result⍞000D        from+step×(⍳size)-⎕io               ⍝ ⍺ thru ⍵ inclusive.⍞000D    }⍞000D⍞000D    1 disp (¯1 6)(0 4) to ⊂3 ¯2⍞000D┌→───┬────┬────┬────┬─────┐⍞000D↓¯1 6│¯1 4│¯1 2│¯1 0│¯1 ¯2│⍞000D├~──→┼~──→┼~──→┼~──→┼~───→┤⍞000D│0 6 │0 4 │0 2 │0 0 │0 ¯2 │⍞000D├~──→┼~──→┼~──→┼~──→┼~───→┤⍞000D│1 6 │1 4 │1 2 │1 0 │1 ¯2 │⍞000D├~──→┼~──→┼~──→┼~──→┼~───→┤⍞000D│2 6 │2 4 │2 2 │2 0 │2 ¯2 │⍞000D├~──→┼~──→┼~──→┼~──→┼~───→┤⍞000D│3 6 │3 4 │3 2 │3 0 │3 ¯2 │⍞000D└~──→┴~──→┴~──→┴~──→┴~───→┘⍞000D⍞000DWe could extend Bob''s idea to accommodate character and complex arguments:⍞000D⍞000D    to←{                                    ⍝ Sequence ⍺ .. ⍵⍞000D        type←10|⎕DR ⍺,⍵                     ⍝ item type.⍞000D        type∊0 2:⎕UCS(⎕UCS ⍺)∇ ⎕UCS ⍵       ⍝ char sequences.⍞000D        type=9:⍺ ∇{                         ⍝ complex arg⍞000D            j←1 0J1∘(+.×)                   ⍝ number from (re im) pair⍞000D            p←9 11∘○¨                       ⍝ (re im) pair from number⍞000D            j¨(p ⍺)⍺⍺ p ⍵                   ⍝ complex sequence via nested pairs.⍞000D        }⍵                                  ⍝⍞000D        from step←⊂¨1 ¯1×-\2↑⍺,⍺+×⍵-⍺       ⍝ step default is +/- 1.⍞000D        size←0⌈1+⌊⊃(⍵-from)÷step+step=0     ⍝ shape of result⍞000D        from+step×(⍳size)-⎕IO               ⍝ ⍺ thru ⍵ inclusive.⍞000D    }⍞000D⍞000D    ''a'' to ''z''⍞000Dabcdefghijklmnopqrstuvwxyz⍞000D⍞000D    ''AC'' to ''Z''⍞000DACEGIKMOQSUWY⍞000D⍞000D    0 to 3j4⍞000D0 0J1 0J2 0J3 0J4⍞000D1 1J1 1J2 1J3 1J4⍞000D2 2J1 2J2 2J3 2J4⍞000D3 3J1 3J2 3J3 3J4⍞000D⍞000DExamples:⍞000D⍞000D      3 to 10               ⍝ Inclusive ascending sequence.⍞000D3 4 5 6 7 8 9 10⍞000D⍞000D      10 to 3               ⍝ Descending sequence.⍞000D10 9 8 7 6 5 4 3⍞000D⍞000D      7 to 7                ⍝ Single-item sequence.⍞000D7⍞000D      5 7 to 13             ⍝ 2-item start determines step.⍞000D5 7 9 11 13⍞000D⍞000D      ¯10 ¯15 to ¯25        ⍝ Negative start and step.⍞000D¯10 ¯15 ¯20 ¯25⍞000D⍞000D      1.5 1.7 to 2.5        ⍝ Fractional start and step.⍞000D1.5 1.7 1.9 2.1 2.3 2.5⍞000D⍞000D      0 3 to 10             ⍝ Sequence may stop short of _last_.⍞000D0 3 6 9⍞000D⍞000DSee also: sieve⍞000D⍞000DIndex:sequence|stepping⍞000DIndex;Jantunen V-M.|Smith R.A.' 
