'##.esh digits                               ⍝ Shell for Eide-number sums.⍞000D⍞000D[esh] is an interactive shell for Eide-number sums (see →ratrep←).  [esh] inter-⍞000Dprets  each line of ⍞235E-input as a vector of numbers in the current base and disp-⍞000Dlays its sum by using →ratsum← reduction. This input-eval-display loop continues⍞000Duntil a terminating '')'' is input.⍞000D⍞000DThe  right  argument  provides the [digits] for the initial number base (radix).⍞000DThe digits, and therefore the base, may subsequently be changed by an input line⍞000Dof the form {···0···}.⍞000D⍞000DTo start in decimal, we could call [esh] so:⍞000D⍞000D    esh ⎕D      ⍝ start in decimal.⍞000D⍞000DIn  addition to the formal syntax of numbers required by →ratsum←, [esh] accepts⍞000Dand displays numbers in a more informal style, using these five substitutions:⍞000D⍞000D                   nnn.fff  ←→  <0|nnn.fff|0>       ⍝ plain num → enum.⍞000D⍞000D                  ¯nnn.fff  ←→  comp''<0|nnn.fff|0>'' ⍝ negative num → complement.⍞000D⍞000D            ..lrulrunnn.fff ←→  <lru|nnn.fff|0>     ⍝ .. precedes repeated lru.⍞000D⍞000D            nnn.fffrrurru.. ←→ <0|nnn.fff|rru>      ⍝ .. follows repeated rru.⍞000D⍞000D    ..lrulrunnn.fffrrurru.. ←→ {lru|nnn.fff|rru}    ⍝ combination of the above.⍞000D⍞000DThe  "double-dot" digraph is a notational device, which captures its longest ad-⍞000Djacent twice-repeated string for the appropriate replication unit (RU).⍞000D⍞000DFor example:⍞000D⍞000D            123.45  ←→  <0|123.45|0>        ⍝ Simple number.⍞000D           ¯123.45  ←→  <9|876.55|0>        ⍝ Explicit negative sign absorbed.⍞000D        ..12123.45  ←→  <12|3.45|0>         ⍝ Non-zero LRU.⍞000D        123.4545..  ←→  <0|123|45>          ⍝ Non-zero RRU.⍞000D   ..121234.5656..  ←→  <12|34|56>          ⍝ Both RUs non-zero.⍞000D⍞000DNotice  that, with a number such as "0.233766233766..", it is the _whole_ of the⍞000D"233766" that is repeated indefinitely (not just the "6" on the end). When read-⍞000Ding such numbers, we must learn to spot the _longest_ twice-repeated sequence.⍞000D⍞000DInformally, .. means "the adjacent sequence repeated indefinitely". For example,⍞000Done third may be represented in decimal thus:⍞000D⍞000D    0.33..      ⍝ decimal one-third.⍞000D⍞000DNB: Double-dots do not confer any vagueness of value.  Such numbers have perfect⍞000Daccuracy (unlike the beguiling decimal "0.1" in your PC''s spreadsheet).⍞000D⍞000DFor example, the interaction:⍞000D⍞000D        4.99..      ⍝ display number.⍞000D    5⍞000D⍞000Ddoes not constitute a rounding; "5" and "4.99.." are alternative representations⍞000Dof the _same_ decimal number; it''s just that esh''s (actually →ratsum←''s) display⍞000Dcode favours the shorter form.⍞000D⍞000DThis may come as a bit of a surprise:⍞000D⍞000D        ..999⍞000D    ¯1⍞000D        ..998⍞000D    ¯2⍞000D⍞000Dalthough, after a moment''s reflection, it seems reasonable that adding 1 to ..99⍞000Dwould cause carried "1"s to ripple ever leftwards, leaving ..00.  An alternative⍞000Dway  to come to terms with this might be to imagine a brand new odometer with an⍞000Dunspecified number of digit positions: [..00]. What would we expect to happen if⍞000Dwe wound the odometer backwards by one click?⍞000D⍞000DFormal syntax:                                                   Examples⍞000D                                                                 ¯¯¯¯¯¯¯¯⍞000D    num :=            seq                   ⍝ whole number       03102405⍞000D         |  .. seqseq seq                   ⍝   non-zero LRU     ..121234⍞000D         |            seq . seq             ⍝ fractional number       123.456⍞000D         |            seq . seq seqseq ..   ⍝   non-zero RRU          123.455..⍞000D         |  .. seqseq seq . seq seqseq ..   ⍝   non-zero RUs       ..1123.4566..⍞000D    where:⍞000D        seq is a seqence of digits drawn from the current base {digs}.  012⍞000D        seqseq is a twice-repeated sequence.                            012012⍞000D⍞000DExamples:⍞000D⍞000D      esh ⎕d                    ⍝ start in decimal.⍞000D⍞000D⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝ Decimal⍞000D⍞000D    1 2 3 4                     ⍝ sum some nums.⍞000D10⍞000D    4.99..                      ⍝ normalised display.⍞000D5⍞000D    0.142857142857..  0.0909..  ⍝ 1/7 + 1/11 → 18/77⍞000D0.233766233766..⍞000D⍞000D    5 ¯12 ¯4.5                  ⍝ APL has a nice "neg" sign.⍞000D¯11.5⍞000D⍞000D    <12|3|45>                   ⍝ esh accepts formal input.⍞000D2.2424..⍞000D⍞000D    ⍝ Note the subtle differences in these four examples:⍞000D⍞000D    2.33   5.66⍞000D7.99⍞000D⍞000D    2.33.. 5.66⍞000D7.9933..⍞000D⍞000D    2.33   5.66..⍞000D7.9966..⍞000D⍞000D    2.33.. 5.66..⍞000D8⍞000D⍞000D    ..0042.00..                 ⍝ double dots on left.⍞000D42⍞000D⍞000D    ..11                        ⍝ <1|1|0>  (see →ratrep←).⍞000D¯0.11..⍞000D⍞000D    0.1234..                    ⍝ error (no repeated string to left of "..").⍞000Dbad number⍞000D⍞000D⍝ Perhaps the following sequence will make you pause before⍞000D⍝ dismissing Euler''s preposterous claim (see →ratrep←).⍞000D⍞000D    ..99                            ⍝ (see note above)⍞000D¯1⍞000D    0.99..                          ⍝ (see note above)⍞000D1⍞000D    ..99  0.99..                    ⍝ ¯1 + 1 → 0⍞000D0⍞000D    ..99.99..                       ⍝   ..  ..⍞000D0⍞000D    ..33.33.. ..33.33.. ..33..33..  ⍝ 3 × ..33.33.. → ..99.99.. → 0⍞000D0⍞000D    ..33.33..                       ⍝ 0=3×⍵ implies ⍵=0⍞000D0⍞000D    ..11.11.. ..11.11.. ..11.11..   ⍝ 3 × ..11.11.. → ..33.33.. → 0⍞000D0⍞000D    ..11.11..                       ⍝ 0=3×⍵ implies ⍵=0⍞000D0⍞000D    ..0101.0101..                   ⍝ the sum of 11 of these gives ..1111.1111..⍞000D0⍞000D    ..001001.001001..               ⍝ the sum of 111 of these gives     ..⍞000D0⍞000D    ..123123.123123..               ⍝ 0=123×⍵ implies ⍵=0⍞000D0⍞000D⍞000D⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝ Balanced Ternary⍞000D⍞000D    {-0+}               ⍝ change base to balanced ternary.   See also →bt←⍞000D⍞000D    +--+  +-+-          ⍝ balanced ternary: 16 + 20 → 36⍞000D++00⍞000D⍞000D    + + + + +           ⍝ balanced ternary 5.⍞000D+--⍞000D⍞000D    0.++..  +.--..      ⍝ two representations of one-half.⍞000D+⍞000D    ..--                ⍝ ... and a third, perhaps less obvious, one.⍞000D0.++..⍞000D⍞000D⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝ Hexadecimal⍞000D⍞000D    {0123456789abcdef}          ⍝ change base to hexadecimal.⍞000D⍞000D    3e8 7d0 bb8 fa0             ⍝ sum of four hex numbers.⍞000D2710⍞000D⍞000D    3e8 ¯200                    ⍝ sum with explicit negative sign.⍞000D1e8⍞000D⍞000D    ffffffff 000003e8           ⍝ ffffffff is ¯1+2*32⍞000D1000003e7⍞000D⍞000D    ..ffffff 000003e8           ⍝ ..ffffff is ¯1⍞000D3e7⍞000D⍞000D    19d9c ¯dead⍞000Dbeef⍞000D⍞000D    ¯baad ¯3560⍞000D¯f00d⍞000D⍞000D    ..ffe⍞000D¯2⍞000D⍞000D⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝ Pos-skewed four⍞000D⍞000D    {-0+#}          ⍝ change base to pos-skewed four (# is double-plus).⍞000D⍞000D    # # # # # +     ⍝ 11        (2+2+2+2+2+1) → (4⊥1 ¯1 ¯1)⍞000D+--⍞000D⍞000D    0.#  0.#        ⍝ one-half plus one-half⍞000D+⍞000D⍞000D⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝ Neg-skewed four⍞000D⍞000D    {=-0+}          ⍝ change base to neg-skewed four (= is double-minus).⍞000D⍞000D    + + + + + +     ⍝ 6         (1+1+1+1+1+1) → (4⊥1 ¯2 ¯2)⍞000D+==⍞000D⍞000D    +.=  +.=        ⍝ one-half plus one-half⍞000D+⍞000D⍞000D    )   ⍝ quit.⍞000D⍞000DSee also: ratsum ratrep bt repl⍞000D⍞000DIndex:Eide numbers|rational number|balanced ternary|hexadecimal|shell|REPL⍞000DIndex;Eide L.N.|Euler L.' 
