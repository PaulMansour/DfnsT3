'table ← {opts←⍬} ##.cmpx exprs              ⍝ Approx expression timings.⍞000D⍞000D[exprs] is a vector of character vectors, each representing  a  result-returning⍞000Dexpression.  Each  expression  is compiled into a loop, and its evaluation timed⍞000Dfor  1, 2, 4, 8, 16, ···  iterations.  The  iteration count is doubled until the⍞000Dmean time to execute is more than [secs]. Finally, an empty loop is compiled and⍞000Dits execution time for the final number of iterations subtracted  to  give  nett⍞000Dexecution time in seconds for each expression.⍞000D⍞000DOptional left argument [opts] specifies a vector of 0-4 items.  Defaults are as-⍞000Dsumed if fewer than 4 items are supplied. The options are:⍞000D⍞000Draw:    0:graphical display as below (default); 1:raw numeric vector of seconds.⍞000Dcpu:    0:elapsed ⎕AI[3] time (default); 1:cpu ⎕AI[2] time.⍞000Dcols:   Maximum column-width for histogram. 0 implies the default width of 40.⍞000Dsecs:   Test period in seconds (default 1).⍞000D⍞000DBy default, [cmpx] returns a character matrix representing a 5-column table:⍞000D⍞000D      cmpx''⎕io⊃⎕a'' ''⎕a[⎕io]'' ''⍬⍴⎕a'' ''1↑⎕a''            ⍝ CoMPare eXpressions.⍞000D  ⎕io⊃⎕a  → 1.1E¯6 |   0% ⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⍞000D  ⎕a[⎕io] → 1.7E¯6 | +51% ⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⍞000D  ⍬⍴⎕a    → 1.0E¯6 |  -8% ⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⍞000D* 1↑⎕a    → 1.3E¯6 | +16% ⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⍞000D│ │         │         │   │⍞000D│ │         │         │   └─ Histogram for at-a-glance comparison.⍞000D│ │         │         └───── Percentage difference relative to first expression.⍞000D│ │         └─────────────── Approx time in seconds for a single iteration.⍞000D│ └───────────────────────── Subject expression.⍞000D└─────────────────────────── Warning for results not identical to the first one.⍞000D                             (The first three expressions return a scalar result⍞000D                             and the fourth, a 1-item vector).⍞000D⍞000DGiven a  _single_ expression, [cmpx] returns only the number of seconds taken to⍞000Dexecute it:⍞000D⍞000D        cmpx''⎕io⊃⎕a''        ⍝ Time single expression.⍞000D    1.3E¯6⍞000D⍞000DNB: expressions must not contain diamonds:⍞000D⍞000D        cmpx''t+t←2+3''       ⍝ this will work⍞000Dbut⍞000D        cmpx''t←2+3 ⋄ t+t''   ⍝ this will hang :-(⍞000D⍞000DTechnical notes:⍞000D⍞000DNotice in the coding of this function, that name conflicts are avoided by having⍞000Dthe  subject  expression  timings execute lexically _outside_ the main operator.⍞000DFurther,  the  small amount of code visible at execution (⍎) time has been care-⍞000Dfully chosen to be both ⎕IO and ⎕ML independent:⍞000D⍞000D    cmpx←{⍞000D        ···⍞000D        1{⍞000D            (⍎⍵)-⎕AI        ⍝ Execute expression outside⍞000D        }{⎕IO ⎕ML←0         ⍝ main operator so that no system variable⍞000D            times←⍺ ⍺⍺{     ⍝ or name conflicts occur.⍞000D⍞000DDifferences  in  the  expression results are detected by a final re-execution of⍞000Deach expression in the _right_ operand of the main operator, which is again out-⍞000Dside the main operator body and so ⎕IO and ⎕ML independent.⍞000D          ···⍞000D            diff←{⍵⊃'' *''}¨×{⍵⍳⍵},⍵⍵¨⍵   ⍝ result differences.⍞000D            ···⍞000D        }{                              ⍝ right operand:⍞000D            ⍎⍵                          ⍝ execute expr in its native envt.⍞000D        }⍵                              ⍝ vector of subject expressions.⍞000D⍞000DExamples:⍞000D⍞000D      cmpx''100⍴2'' ''100/2''               ⍝ / is slower (though easier to spell.⍞000D  100⍴2 → 9.5E¯7 |    0% ⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⍞000D  100/2 → 2.6E¯6 | +175% ⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⍞000D⍞000D      cmpx''⊃ ⊂⍬'' ''↑ ⊂⍬''                 ⍝ first quicker than mix for disclose.⍞000D  ⊃ ⊂⍬ → 4.2E¯7 |    0% ⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⍞000D  ↑ ⊂⍬ → 1.1E¯6 | +153% ⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⍞000D⍞000D⍝ Stranding (⍬ ⍬ ... ⍬) appears to be an O(n*2) operation:⍞000D⍞000D      cmpx    11/''⍬''    ⍝    10 strandings.⍞000D6.4E¯6⍞000D      cmpx   101/''⍬''    ⍝   100 strandings.⍞000D1.9E¯4⍞000D      cmpx  1001/''⍬''    ⍝  1000 strandings.⍞000D1.5E¯2⍞000D      cmpx 10001/''⍬''    ⍝ 10000 strandings⍞000D1.5E0⍞000D⍞000D      1 cmpx''⎕io⊃⎕a'' ''⎕a[⎕io]'' ''⍬⍴⎕a'' ''1↑⎕a''    ⍝ option: raw exprssion times.⍞000D4.472732544E¯7 5.502700806E¯7 4.024505615E¯7 5.06401062E¯7⍞000D⍞000D      (1 0)(1 1) cmpx¨ ⊂''osc¨⍳1e3''              ⍝ elapsed vs cpu ⎕AI times.⍞000D0.0673125 0.06725⍞000D⍞000DSee also: time mdf ticks cf⍞000D⍞000DIndex:performance|timing|expression comparison|histogram⍞000DIndex:⎕ML' 
