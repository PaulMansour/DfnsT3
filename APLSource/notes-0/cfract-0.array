'nvec ← {tolerance←⎕ct} ##.cfract numb   ⍝ Continued fraction approx of real ⍵.⍞000D⍞000DResult [nvec] is a simple numeric vector,  whose continued fraction reduction is⍞000Dwithin comparison tolerance of scalar argument [numb].⍞000D⍞000DAny real number ⍵ may be respresented by a continued fraction (CF) of the form:⍞000D⍞000D        ⍵ = n + 1⍞000D                ─────           where n is an integer and⍞000D                i + 1           where i j k ... are positive integers.⍞000D                    ─────⍞000D                    j + 1⍞000D                        ─────⍞000D                        k + 1⍞000D                            ─────⍞000D                             ...⍞000Dor:⍞000D        ⍵ = n + 1 ÷ i + 1 ÷ j + 1 ÷ k + 1 ÷ ...⍞000Dor:⍞000D        ⍵ = n +   ÷ i +   ÷ j +   ÷ k +   ÷ ...⍞000Dor:⍞000D        ⍵ = n + ∘ ÷ i + ∘ ÷ j + ∘ ÷ k + ∘ ÷ ...⍞000Dor:⍞000D        ⍵ = +∘÷/ n i j k ...⍞000D⍞000DGiven a (possibly infinite) CF, we can reconstitute a rational number  arbitrar-⍞000Dily  close to the real number it represents by reducing successively more terms.⍞000DRational numbers have finite CFs and  irrational  numbers  have  infinite though⍞000D(after ignoring the first term) possibly regular ones. For example:⍞000D⍞000D          cfract 123÷345        ⍝ rational number: finite CF.⍞000D    0 2 1 4 8⍞000D⍞000D          cfract *1             ⍝ irrational number: infinite, regular CF.⍞000D    2 1 2 1 1 4 1 1 6 1 1 8 1 1 10 1 1 12 ...⍞000D⍞000D          cfract ○1             ⍝ irrational number: infinite, irregular CF.⍞000D    3 7 15 1 292 1 1 1 2 1 3 1 14 ...⍞000D⍞000DReducing successively longer leading sequences of the CF, produces  increasingly⍞000Dcloser  approximations.  Here are reductions of the first 10 terms of the CF for⍞000De = 2.718281828459...:⍞000D⍞000D      +∘÷/¨ ,\ 10↑cfract *1⍞000D2 3 2.6666667 2.75 2.7142857 2.71875 2.7179487 2.7183099 2.7182796 2.7182836⍞000D⍞000DHere are the (base-10) log differences for successive terms of e, Pi sqrt(2) and⍞000DPhi.  The  last  rows  in  each  column  show  that reducing all terms in the CF⍞000Dproduces a difference that is within comparison tolerance;  in  this case with a⍞000Ddefault value of 10*¯14:⍞000D⍞000D    seq ← {+∘÷/¨,\cfract ⍵}                 ⍝ successive reductions.⍞000D    err ← {10⍟|(⍵-⍺⍺ ⍵)÷⍵}                  ⍝ base 10 log error factor⍞000D    col ← {6 2⍕⍪⍵}                          ⍝ formatted column.⍞000D⍞000D    vals ← (*1) (○1) (2*÷2) (0.5×1+5*÷2)    ⍝ exp, Pi, sqrt 2, phi.⍞000D⍞000D    col∘(seq err)¨ vals         ⍝ 10∘⍟ errors in successive approximations.⍞000D  ¯0.58   ¯1.35   ¯0.53   ¯0.42⍞000D  ¯0.98   ¯3.40   ¯1.22   ¯0.63⍞000D  ¯1.72   ¯4.58   ¯2.00   ¯1.14⍞000D  ¯1.93   ¯7.07   ¯2.76   ¯1.52⍞000D  ¯2.83   ¯9.74   ¯3.53   ¯1.95⍞000D  ¯3.76   ¯9.98   ¯4.29   ¯2.37⍞000D  ¯3.91  ¯10.41   ¯5.06   ¯2.79⍞000D  ¯4.99  ¯11.03   ¯5.82   ¯3.20⍞000D  ¯6.08  ¯11.56   ¯6.59   ¯3.62⍞000D  ¯6.19  ¯12.29   ¯7.35   ¯4.04⍞000D  ¯7.39  ¯14.15   ¯8.12   ¯4.46⍞000D  ¯8.61           ¯8.89   ¯4.88⍞000D  ¯8.69           ¯9.65   ¯5.29⍞000D  ¯9.99          ¯10.42   ¯5.71⍞000D ¯11.30          ¯11.18   ¯6.13⍞000D ¯11.37          ¯11.95   ¯6.55⍞000D ¯12.75          ¯12.71   ¯6.97⍞000D ¯14.13          ¯13.48   ¯7.38⍞000D                 ¯14.24   ¯7.80⍞000D                          ¯8.22⍞000D                          ¯8.64⍞000D                          ¯9.05⍞000D                          ¯9.47⍞000D                          ¯9.89⍞000D                         ¯10.31⍞000D                         ¯10.73⍞000D                         ¯11.14⍞000D                         ¯11.56⍞000D                         ¯11.98⍞000D                         ¯12.40⍞000D                         ¯12.82⍞000D                         ¯13.24⍞000D                         ¯14.07⍞000D⍞000DTechnical notes:⍞000D⍞000DThis recurrence relation defines the CF of a rational number P÷Q. The ''.'' intro-⍞000Dduces definitions,  which are local to an exdented antecedent (see max.dws), and⍞000D% is integer quotient {⌊⍺÷⍵}.⍞000D⍞000D    cf p÷1 = p              ⍝ whole number.⍞000D    cf p÷q = n, cf q÷r      ⍝ q>1⍞000D    .   n = p%q             ⍝ integer quotient,⍞000D    .   r = q|p             ⍝ and remainder.⍞000D⍞000Dwhich translates directly into code:⍞000D⍞000D    cfract←{                ⍝ Continued fraction approximation of real ⍵.⍞000D        ⍺←⎕CT ⋄ ⎕CT←⍺       ⍝ default comparison tolerance.⍞000D        ,↑{                 ⍝ cf from rational ⍺÷⍵:⍞000D            ⍵=1:⍺           ⍝ whole number: finished.⍞000D            n r←0 ⍵⊤⍺       ⍝ next term and remainder.⍞000D            n,⍵ ∇ r         ⍝ next term and cf of remainder.⍞000D        }/⌊⍵ 1÷1∨⍵          ⍝ whole number ratio. See →rational←⍞000D    }⍞000D⍞000DThe first line:⍞000D⍞000D        ⍺←⎕CT ⋄ ⎕CT←⍺       ⍝ default comparison tolerance.⍞000D⍞000Dhas a misleading symmetry. "⍺←···" is a special syntax, which supplies a default⍞000Dvalue for a missing left argument. The line means: If no left argument is given,⍞000Ddefault it to the current value of ⎕CT (comparison tolerance),  and then  make a⍞000Dlocal system variable ⎕CT with the explicit or  assumed  value.  In other words:⍞000Dif a left argument is given, use its value for comparison tolerance;  otherwise,⍞000Duse the current value of ⎕CT.⍞000D⍞000DWith finite-precision representation of real numbers, such as IEEE 64-bit float-⍞000Ding point,  [cfract] necessarily returns a finite vector  (though see the "muse"⍞000Dsection  below).  Therefore, the result always represents a _rational_ number ⍺-⍞000Dtolerably close to its "real" argument.⍞000D⍞000DThe left and right arguments of the inner function,  which is applied by reduct-⍞000Dion:⍞000D⍞000D        ,↑{                 ⍝ cf from rational ⍺÷⍵:⍞000D            ...⍞000D        }/⌊⍵ 1÷1∨⍵          ⍝ whole number ratio.  See →rational←⍞000D⍞000Dare integers whose quotient is a rational number ⎕CT-tolerably close to ⍵.  This⍞000Dinner  function  could  be  made  tail-recursive by passing the rational pair as⍞000Dright argument, thus freeing the left argument to be an accumulator:⍞000D⍞000D    cfract←{                ⍝ Continued fraction approximation of real ⍵.⍞000D        ⍺←⎕CT ⋄ ⎕CT←⍺       ⍝ default comparison tolerance.⍞000D        ⍬{                  ⍝ sequence accumulator.⍞000D            p q←⍵           ⍝ rational argument pair.⍞000D            q=1:⍺,p         ⍝ whole number: finished.⍞000D            n r←0 q⊤p       ⍝ next term and remainder.⍞000D            (⍺,n)∇ q r      ⍝ extended accumulator and new ratio.⍞000D        }⌊⍵ 1÷1∨⍵           ⍝ whole number ratio. See →rational←⍞000D    }⍞000D⍞000Dbut in this case, as the number of recursive  calls  is  relatively  small,  the⍞000Dsaving does not pay for the additional local name assignment and so the function⍞000Das a whole, runs marginally slower.⍞000D⍞000DHere is an alternative, slower coding, which generates the CF directly,  compar-⍞000Ding its value against the subject number at the generation of each term:⍞000D⍞000D    cfract←{                    ⍝ Continued fraction approximation of real ⍵.⍞000D        ⍺←⎕CT ⋄ ⎕CT←⍺           ⍝ default comparison tolerance.⍞000D        real←⍵                  ⍝ "real" number.⍞000D        ⍬{                      ⍝ starting with null sequence.⍞000D            whole part←0 1⊤⍵    ⍝ whole and fractional part of number.⍞000D            seq←⍺,whole         ⍝ sequence extended with next term.⍞000D            real=+∘÷/seq:seq    ⍝ continued fraction approximates real: done.⍞000D            seq ∇÷part          ⍝ otherwise: continued accumulation of terms.⍞000D        }⍵                      ⍝ starting with real number.⍞000D    }⍞000D⍞000DRef: http://en.wikipedia.org/wiki/Continued_fraction⍞000D⍞000D(muse:⍞000D⍞000D    Continued fractions have many properties that make them an attractive alter-⍞000D    native to regular decimals (3.1415...) and rationals (355÷113).⍞000D⍞000D    Bill Gosper''s  treatment of continued fraction arithmetic suggests that val-⍞000D    ues  be  represented as objects, each of which, when referenced, returns the⍞000D    next term in the CF sequence.⍞000D⍞000D    Implementing  "closures"  in Dyalog would give us an elegant way to do this.⍞000D    For  example,  a CF representation of "e" (*1) is the infinite regular sequ-⍞000D    ence:⍞000D⍞000D        1 0 1 1 2 1 1 4 1 1 6 1 1 8 1 1 10 1 1 12 ...⍞000D⍞000D    A closure-based  approach  to  providing  an  object that returns the next ⍵⍞000D    terms in this sequence might be:⍞000D⍞000D        cfe∆←{                          ⍝ continued fraction stream for *1.⍞000D            S←⍵                         ⍝ initial stream.⍞000D            {                           ⍝ closure:⍞000D                ⍵<⍴S:(S↓⍨←⍵)⊢⍵↑S        ⍝ draw ⍵ items from stream.⍞000D                S,←1 1,2+¯1↑S           ⍝ afix more items and⍞000D                ∇ ⍵                     ⍝ draw ⍵ items from extended stream.⍞000D            }⍞000D        }⍞000D⍞000D    then:⍞000D⍞000D        e_nxt← cfe∆ 1 0             ⍝ closure with a state for "stream".⍞000D⍞000D        e_nxt 10                    ⍝ first 10 terms in series.⍞000D    1 0 1 1 2 1 1 4 1 1⍞000D⍞000D        e_nxt 10                    ⍝ following 10 terms.⍞000D    6 1 1 8 1 1 10 1 1 12⍞000D⍞000D        e_nxt 10                    ⍝ ... and so on.⍞000D    1 1 14 1 1 16 1 1 18 1⍞000D⍞000D        (*1)=+∘÷/(cfe∆ 1 0) 20      ⍝ first 20 terms sufficient for default ⎕ct.⍞000D    1⍞000D⍞000D    Similarly, continued fractions for (irrational) square-roots have an initial⍞000D    value  followed by a repeated sequence.  We could write a more general clos-⍞000D    ure-generator for all square-root values.⍞000D⍞000D        cfseq∆←{                        ⍝ return sequence-generating closure.⍞000D            seq←⍵                       ⍝ regular sequence.⍞000D            S←⍺,⍵                       ⍝ initial stream.⍞000D            {                           ⍝ closure:⍞000D                ⍵<⍴S:(S↓⍨←⍵)⊢⍵↑S        ⍝ draw ⍵ items from stream.⍞000D                S,←seq                  ⍝ afix more items and try again.⍞000D                ∇ ⍵⍞000D            }⍞000D        }⍞000D⍞000D    Then:⍞000D⍞000D        r2 ← 1 cfseq∆ 2                 ⍝ Seqence for sqrt 2⍞000D        r3 ← 1 cfseq∆ 1 2               ⍝   ..      ..     3⍞000D        ...⍞000D⍞000D        r2 20                           ⍝ first 20 terms of CF for sqrt 2.⍞000D    1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2⍞000D⍞000D        (1 seq∆ 1 2)20                  ⍝ first 20 terms of CF for sqrt 19.⍞000D    1 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1⍞000D⍞000D    Finally,  we could generalise our sequence generator to return a closure for⍞000D    _any_ regular sequence.  This operator takes, as right argument, the initial⍞000D    terms of the sequence and as left operand, a function that generates further⍞000D    terms on demand:⍞000D⍞000D        seq∆←{                          ⍝ generate regular sequence closure.⍞000D            S←,⍵                        ⍝ initial sequence.⍞000D            s←⍴S                        ⍝ minimum size.⍞000D            ⍺⍺{                         ⍝ closure:⍞000D                ⍵<(⍴S)-s:(S↓⍨←⍵)⊢⍵↑S    ⍝ ⍵ items from sequence.⍞000D                S∘←⍺⍺ S                 ⍝ extended stream,⍞000D                ∇ ⍵                     ⍝   and try again.⍞000D            }⍞000D        }⍞000D⍞000D    Then:⍞000D⍞000D        fibs ← {⍵,+/¯2↑⍵} seq∆ 0 1      ⍝ Fibonacci numbers.⍞000D⍞000D        fibs 20                         ⍝ first 20 Fibonacci numbers.⍞000D    0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181⍞000D⍞000D        cfe ← {⍵,1 1,2+¯1↑⍵} seq∆ 1 0   ⍝ continued fraction sequence for e.⍞000D⍞000D        cfe 20                          ⍝ first 20 CF terms for e.⍞000D    1 0 1 1 2 1 1 4 1 1 6 1 1 8 1 1 10 1 1 12⍞000D⍞000D    Rational numbers,  whose continued fraction representation is finite, pose a⍞000D    small problem for this technique. On exhausting the finite part of the sequ-⍞000D    ence,  the generator must continue with terms that do not affect the result;⍞000D    in other words, terms whose reciprocal is _effectively_ zero. Happily, (⌊/⍬)⍞000D    does the trick:⍞000D⍞000D        cfract 93÷113           ⍝ finite continued fraction for rational number.⍞000D    0 1 4 1 1 1 5 1⍞000D⍞000D        r93_113 ← {⍵,⌊/⍬} seq∆ cfract 93÷113        ⍝ generator for CF 93÷113⍞000D⍞000D        r93_113 20              ⍝ first 20 terms of "infinite" CF for 93÷113⍞000D    0 1 4 1 1 1 5 1 1.797693135E308 1.797693135E308 1.797693135E308⍞000D          1.797693135E308 1.797693135E308 1.797693135E308 1.797693135E308⍞000D          1.797693135E308 1.797693135E308 1.797693135E308 1.797693135E308⍞000D          1.797693135E308⍞000D⍞000D        rational +∘÷/ r93_113 20    ⍝ check round-trip of 93÷113⍞000D    93 113⍞000D⍞000D        rational +∘÷/ ({⍵,⌊/⍬} seq∆ cfract 93÷113) 20       ⍝ check round-trip.⍞000D    93 113⍞000D⍞000D    In fact, we can abstract a CF-closure-generator for rational numbers:⍞000D⍞000D        cf_rat ← {{⍵,⌊/⍬}seq∆ cfract ⍺÷⍵}           ⍝ CF generator for ⍺÷⍵⍞000D⍞000D        (11 cfrat 15) 8                             ⍝ first 8 terms for 11÷15⍞000D    0 1 2 1 2 1 1.797693135E308 1.797693135E308⍞000D⍞000D⍞000D    Ref: http://mathworld.wolfram.com/ContinuedFraction.html⍞000D         http://www.tweedledum.com/rwg/cfup.htm⍞000D⍞000D    Details  of an experimental version of Dyalog, which implements closures may⍞000D    be found at: http://dfns.dyalog.com/downloads/fre.pdf⍞000D)⍞000D⍞000DExamples:⍞000D⍞000D      cfract 5÷8                            ⍝ rational numbers have a finite CF.⍞000D0 1 1 1 2⍞000D⍞000D      cfract *1                             ⍝ e has an infinite but regular CF.⍞000D2 1 2 1 1 4 1 1 6 1 1 8 1 1 10 1 1 12⍞000D⍞000D      +∘÷/ cfract *1                        ⍝ reduction reconstitutes e.⍞000D2.718281828⍞000D⍞000D      +∘÷/⎕←cfract ○1                       ⍝ irregular infinite CF for pi.⍞000D3 7 15 1 292 1 1 1 2 1 4⍞000D3.141592654⍞000D⍞000D      +∘÷/⎕←cfract root 2                   ⍝ CF for sqrt(2).⍞000D1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2⍞000D1.414213562⍞000D⍞000D      +∘÷/⎕←cfract 0.5×1+root 5             ⍝ CF for golden mean (phi ⌽)⍞000D1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2⍞000D1.618033989⍞000D⍞000D    cfract 3○1                              ⍝ regular CF for tan(1)⍞000D1 1 1 3 1 5 1 7 1 9 1 11 1 13 1 15⍞000D⍞000D      {⎕←⍵,'':'',cfract root ⍵}¨⍳20           ⍝ (regular) CFs for first 20 sqrts.⍞000D1 : 1⍞000D2 : 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2⍞000D3 : 1 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2⍞000D4 : 2⍞000D5 : 2 4 4 4 4 4 4 4 4 4 4 4⍞000D6 : 2 2 4 2 4 2 4 2 4 2 4 2 4 2 4⍞000D7 : 2 1 1 1 4 1 1 1 4 1 1 1 4 1 1 1 4 1 1 1 4 1 2⍞000D8 : 2 1 4 1 4 1 4 1 4 1 4 1 4 1 4 1 4 1 4⍞000D9 : 3⍞000D10 : 3 6 6 6 6 6 6 6 6 6⍞000D11 : 3 3 6 3 6 3 6 3 6 3 6 3⍞000D12 : 3 2 6 2 6 2 6 2 6 2 6 2 6⍞000D13 : 3 1 1 1 1 6 1 1 1 1 6 1 1 1 1 6 1 1 1 1 6 1 2⍞000D14 : 3 1 2 1 6 1 2 1 6 1 2 1 6 1 2 1 6 1 3⍞000D15 : 3 1 6 1 6 1 6 1 6 1 6 1 6 1 7⍞000D16 : 4⍞000D17 : 4 8 8 8 8 8 8 8⍞000D18 : 4 4 8 4 8 4 8 4 8 4⍞000D19 : 4 2 1 3 1 2 8 2 1 3 1 2 8 2 1 3 1 2⍞000D20 : 4 2 8 2 8 2 8 2 8 2 8 2⍞000D⍞000D      {⎕←⍵,'':'',cfract 3 root ⍵}¨⍳20     ⍝ irregular CFs for first 20 cube roots.⍞000D1 : 1⍞000D2 : 1 3 1 5 1 1 4 1 1 8 1 14 1 10 2 1 4⍞000D3 : 1 2 3 1 4 1 5 1 1 6 2 5 8 3 3⍞000D4 : 1 1 1 2 2 1 3 2 3 1 3 1 30 1 4 1 2 9⍞000D5 : 1 1 2 2 4 3 3 1 5 1 1 4 10 18⍞000D6 : 1 1 4 2 7 3 508 1 5 6⍞000D7 : 1 1 10 2 16 2 1 4 2 1 21 1 3 5⍞000D8 : 2⍞000D9 : 2 12 2 18 1 1 1 1 4 1 1 24 1 9⍞000D10 : 2 6 2 9 1 1 2 4 1 12 1 1 1 1 57⍞000D11 : 2 4 2 6 1 1 2 1 2 9 88 2 1 2⍞000D12 : 2 3 2 5 15 7 3 1 1 3 1 1 96⍞000D13 : 2 2 1 5 1 1 43 3 2 1 1 3 10 7⍞000D14 : 2 2 2 3 1 1 5 5 9 6 21 2⍞000D15 : 2 2 6 1 8 1 10 8 12 1 721⍞000D16 : 2 1 1 12 10 18 1 6 1 21 1 2 2⍞000D17 : 2 1 1 3 138 1 1 3 2 3 1 1 207⍞000D18 : 2 1 1 1 1 1 3 22 1 2 2 2 24 64⍞000D19 : 2 1 2 63 1 2 2 2 1 95 2 1 1 2⍞000D20 : 2 1 2 1 1 154 6 1 1 1 6 232⍞000D⍞000D    rational +∘÷/¨ ,\ cfract ○1     ⍝ successive rational approximations to Pi.⍞000D3 22 333 355 103993 104348 208341 312689 833719 1146408 5419351⍞000D1  7 106 113  33102  33215  66317  99532 265381  364913 1725033⍞000D⍞000DSee also: rational factors sieve gcd root fibonacci⍞000D⍞000DIndex:continued fraction|golden mean|fibonacci number⍞000DIndex:Function Results Edition|closure|sequence⍞000DIndex:rational number|Pi|greatest common divisor⍞000DIndex;Gosper W.|Euclid' 
