'Breadth-First Search Sudoku Solver⍞000D----------------------------------⍞000DThe Sudoku solver shown in YouTube: http://www.youtube.com/watch?v=DmT80OseAGs⍞000Duses a breadth-first tree search technique.⍞000D⍞000DTaking a 4×4 puzzle as an example:⍞000D⍞000D    ┌───┬───┐⍞000D    │· ·│· ·│⍞000D    │· ·│2 1│⍞000D    ├───┼───┤⍞000D    │3 ·│· 4│⍞000D    │· ·│· ·│⍞000D    └───┴───┘⍞000D⍞000DStep[1]  Choose any blank cell and  make a vector of possible placements at that⍞000Dposition.  Let''s start with cell [1 1] at the top left corner.  In this case, as⍞000Dthe possible placements are 1, 2 or 4, we wind up with a 3-vector of matrices:⍞000D⍞000D    ┌───┬───┐┌───┬───┐┌───┬───┐⍞000D    │1 ·│· ·││2 ·│· ·││4 ·│· ·│⍞000D    │· ·│2 1││· ·│2 1││· ·│2 1│⍞000D    ├───┼───┤├───┼───┤├───┼───┤⍞000D    │3 ·│· 4││3 ·│· 4││3 ·│· 4│⍞000D    │· ·│· ·││· ·│· ·││· ·│· ·│⍞000D    └───┴───┘└───┴───┘└───┴───┘⍞000D⍞000DStep[2] Choose a second position, say [2 2] and, for _each_ of the above, make a⍞000D_vector_ of possible placements, giving us a vector-of-vectors-of-matrices:⍞000D⍞000D    ┌───┬───┐┌───┬───┐  ┌───┬───┐┌───┬───┐  ┌───┬───┐⍞000D    │1 ·│· ·││1 ·│· ·│  │2 ·│· ·││2 ·│· ·│  │4 ·│· ·│⍞000D    │· 3│2 1││· 4│2 1│  │· 3│2 1││· 4│2 1│  │· 3│2 1│⍞000D    ├───┼───┤├───┼───┤  ├───┼───┤├───┼───┤  ├───┼───┤⍞000D    │3 ·│· 4││3 ·│· 4│  │3 ·│· 4││3 ·│· 4│  │3 ·│· 4│⍞000D    │· ·│· ·││· ·│· ·│  │· ·│· ·││· ·│· ·│  │· ·│· ·│⍞000D    └───┴───┘└───┴───┘  └───┴───┘└───┴───┘  └───┴───┘⍞000D⍞000DNext, concatenate the items of this 3-vector-of-vectors-of-matrices into a sing-⍞000Dle 5-vector-of-matrices:⍞000D⍞000D    ┌───┬───┐┌───┬───┐┌───┬───┐┌───┬───┐┌───┬───┐⍞000D    │1 ·│· ·││1 ·│· ·││2 ·│· ·││2 ·│· ·││4 ·│· ·│⍞000D    │· 3│2 1││· 4│2 1││· 3│2 1││· 4│2 1││· 3│2 1│⍞000D    ├───┼───┤├───┼───┤├───┼───┤├───┼───┤├───┼───┤⍞000D    │3 ·│· 4││3 ·│· 4││3 ·│· 4││3 ·│· 4││3 ·│· 4│⍞000D    │· ·│· ·││· ·│· ·││· ·│· ·││· ·│· ·││· ·│· ·│⍞000D    └───┴───┘└───┴───┘└───┴───┘└───┴───┘└───┴───┘⍞000D⍞000D... and contine from Step[1] above.⍞000D⍞000DChoosing position [2 1] for our next move:⍞000D⍞000D    ┌───┬───┐  ┌┐  ┌───┬───┐  ┌┐  ┌┐⍞000D    │1 ·│· ·│  ││  │2 ·│· ·│  ││  ││⍞000D    │4 3│2 1│  ││  │4 3│2 1│  ││  ││⍞000D    ├───┼───┤  ├┤  ├───┼───┤  ├┤  ├┤⍞000D    │3 ·│· 4│  ││  │3 ·│· 4│  ││  ││⍞000D    │· ·│· ·│  ││  │· ·│· ·│  ││  ││⍞000D    └───┴───┘  └┘  └───┴───┘  └┘  └┘⍞000D⍞000DIn this case,  only  one placement is possible at each of the 1st and 3rd items,⍞000Dand _none_ are possible at the 2nd, 4th and 5th.  This means that the lengths of⍞000Dthe resulting vectors of matrices are 1, 0, 1, 0 and 0 respectively.⍞000D⍞000DConcatenating these vectors-of-vectors before returning to  Step[1] produces the⍞000D2-vector of matrices:⍞000D⍞000D    ┌───┬───┐┌───┬───┐⍞000D    │1 ·│· ·││2 ·│· ·│⍞000D    │4 3│2 1││4 3│2 1│⍞000D    ├───┼───┤├───┼───┤⍞000D    │3 ·│· 4││3 ·│· 4│⍞000D    │· ·│· ·││· ·│· ·│⍞000D    └───┴───┘└───┴───┘⍞000D⍞000DNotice how "dead-ends"  in the tree search produce 0-length vectors are just ab-⍞000Dsorbed by the concatenation step.⍞000D⍞000DChoosing [3 2] next:⍞000D⍞000D    ┌───┬───┐┌───┬───┐  ┌───┬───┐┌───┬───┐⍞000D    │1 ·│· ·││1 ·│· ·│  │2 ·│· ·││2 ·│· ·│⍞000D    │4 3│2 1││4 3│2 1│  │4 3│2 1││4 3│2 1│⍞000D    ├───┼───┤├───┼───┤  ├───┼───┤├───┼───┤⍞000D    │3 1│· 4││3 2│· 4│  │3 1│· 4││3 2│· 4│⍞000D    │· ·│· ·││· ·│· ·│  │· ·│· ·││· ·│· ·│⍞000D    └───┴───┘└───┴───┘  └───┴───┘└───┴───┘⍞000D⍞000DConcatenating the 2 2-vectors to form a 4-vector:⍞000D⍞000D    ┌───┬───┐┌───┬───┐┌───┬───┐┌───┬───┐⍞000D    │1 ·│· ·││1 ·│· ·││2 ·│· ·││2 ·│· ·│⍞000D    │4 3│2 1││4 3│2 1││4 3│2 1││4 3│2 1│⍞000D    ├───┼───┤├───┼───┤├───┼───┤├───┼───┤⍞000D    │3 1│· 4││3 2│· 4││3 1│· 4││3 2│· 4│⍞000D    │· ·│· ·││· ·│· ·││· ·│· ·││· ·│· ·│⍞000D    └───┴───┘└───┴───┘└───┴───┘└───┴───┘⍞000D⍞000D... and so on.⍞000D⍞000DRepeating these steps for all blank cells results in a vector of possible solut-⍞000Dions with numbers in all positions.⍞000D⍞000DPublished Sudoku puzzles typically claim to have a solution vector of length 1.⍞000D⍞000DImprovements⍞000D------------⍞000DUsing more suggestive names for the functions:⍞000D⍞000DSudoku←{                                        ⍝ Solution vector for square Sudoku puzzle ⍵.⍞000D    BoxNos  ← {⍵⌿⍵/⍵ ⍵⍴⍳⍵*2}                    ⍝ box numbers for a puzzle of size ⍵*2⍞000D    RowColBoxNos  ← {(⍳⍵),¨BoxNos⊃⍵*0.5}        ⍝ row/column/box numbers⍞000D    ContentionMap ← {⊂[⍳2] 1∊¨⍵∘.=⍵}            ⍝ contention map for puzzle ⍵⍞000D    CMAP ← ContentionMap RowColBoxNos ⍴⍵        ⍝ fixed contention map for current puzzle⍞000D⍞000D    at   ← {⍵+⍺×(⍳⍴⍵)∊⊂⍺⍺}                      ⍝ puzzle ⍵ with ⍺ at position ⍺⍺⍞000D    Available  ← {(⍳⊃⍴⍵)~⍵×⊃⍺⌷CMAP}             ⍝ list of available numbers at position ⍺ for puzzle ⍵⍞000D    EmptyCells  ← {(,⍵=0)/,⍳⍴⍵}                 ⍝ row & column indices of empty cells⍞000D    Placements ← {(⍺ Available ⍵) (⍺ at)¨ ⊂⍵}   ⍝ puzzle ⍵ with all available numbers at position ⍺⍞000D    AllPlacements ← {⊃,/⍺∘Placements¨⍵}         ⍝ all possible Placements at ⍺ based on partial solutions ⍵⍞000D    Solutions ← {⊃AllPlacements/(EmptyCells ⍵),⊂⊂⍵}  ⍝ solution vector⍞000D⍞000D    Solutions ⍵⍞000D}⍞000D⍞000DThe choice of "next node" is subject to  optimisation  using "Warndorff''s rule",⍞000Dwhich prescribes selecting tree nodes in order of increasing degree. This means:⍞000Dfor the next node, choose the one with the fewest available placements.⍞000D⍞000DAn approximation to the rule can be arranged  by sorting  the result of function⍞000D<EmptyCells> above:⍞000D⍞000D    Sorted ← {⍵[⍋↑⍴¨⍵ avl¨⊂⍺]}               ⍝ sorted into ⍴ Available order.⍞000D⍞000Dthen:⍞000D⍞000D    Solutions ← {⊃AllPlacements/(⌽⍵ Sorted EmptyCells ⍵),⊂⊂⍵} ⍝ solution vector⍞000D                                 ¯¯¯¯¯¯¯¯¯⍞000D⍞000DExtension to higher rank puzzles⍞000D--------------------------------⍞000DVarious extensions to higher-dimensional (3D 4D ...) puzzles have been proposed.⍞000DThe rules for one of these variations is simply that no number should be repeat-⍞000Ded in any of the rank (¯1+⍴⍴⍵) sub-planes.  In the case of a 3×3×3 puzzle,  such⍞000Das:⍞000D⍞000D    0 0 0⍞000D    8 1 0⍞000D    0 0 2⍞000D⍞000D    0 6 0⍞000D    0 7 0⍞000D    9 0 4⍞000D⍞000D    5 0 0⍞000D    0 0 3⍞000D    0 0 0⍞000D⍞000Dthis means there should be no repeats in any of the 9: x, y or z planes.  Notice⍞000Dthat for this puzzle there are no "boxes",  so  we  won''t  need  inner  function⍞000D<RoColBoxNos>; instead, we need only the primitive indices function: ⍳. Here are⍞000Dthe modifications:⍞000D⍞000D    ContentionMap ← {⊂[⍳⍴⍴⍵] 1∊¨⍵∘.=⍵}  ⍝ contention map for puzzle ⍵⍞000D                        ¯¯¯⍞000D    CMAP ← ContentionMap ⍳ ⍴⍵           ⍝ fixed contention map for current puzzle⍞000D                         ¯⍞000D    Available  ← {(⍳×/1↓⍴⍵)~⍵×⊃⍺⌷CMAP}  ⍝ list of available numbers at position ⍺ for puzzle ⍵⍞000D                    ¯¯¯¯⍞000Dleading to solution:⍞000D⍞000D    3 4 9⍞000D    8 1 6⍞000D    7 5 2⍞000D⍞000D    1 6 8⍞000D    2 7 5⍞000D    9 3 4⍞000D⍞000D    5 2 7⍞000D    4 9 3⍞000D    6 8 1⍞000D⍞000DSee also: sudoku X⍞000D⍞000DIndex:sudoku, game of|Warndorff''s rule|YouTube' 
