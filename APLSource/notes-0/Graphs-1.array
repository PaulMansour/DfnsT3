'──────⍞000DGraphs⍞000D──────⍞000DA  graph is a set of nodes called _vertices_, connected by links called _edges_.⍞000DThe graph is said to be "weighted" if each edge has an associated weight. Other-⍞000Dwise, it is said to be "unweighted". Similarly, a graph is said to be "directed"⍞000Dif  each edge has an associated direction, otherwise it is said to be "undirect-⍞000Ded". For a discussion of weighted graphs, see: →wGraphs←.⍞000D⍞000DThe following diagram represents a simple unweighted, directed graph.⍞000D⍞000D      Graph "a".⍞000D    ┌─────A←────┐⍞000D    │     │     │   5 vertices: A B C D E⍞000D    ↓     ↓     │⍞000D    B←───→C────→D   8 edges:    A→B  A→C  B→C  C→B⍞000D          ↑     │               C→D  D→A  D→E  E→C⍞000D          │     ↓⍞000D          └─────E⍞000D⍞000DNotice that there is an edge from C to B, as well as from B to C.⍞000D⍞000DA  directed  graph  is a generalisation of a tree. A tree is a graph where every⍞000Dvertex  has  at  most  one edge leading to it. All trees are graphs, but not all⍞000Dgraphs  are trees. This means that the data structures and functions over graphs⍞000Din the following, also apply to trees.⍞000D⍞000DGraphs can be used to model many structures found in everyday life.⍞000D⍞000Ddw  Example of Graph                            Vertex         Edge         Note⍞000D--  ----------------                            ------         ----         ----⍞000Ddw  A transportation system such as a subway.   station        track         [a]⍞000Duu  A fishing net.                              knot           twine⍞000Ddu  The World Wide Web (a large graph!).        page           link⍞000Ddu  A game of chess.                            position       move          [b]⍞000Ddu  This workspace''s internal memory structure. memory block   pointer⍞000Duu  The "Six Degrees of Kevin Bacon" game.      actor          starred with  [c]⍞000Duu  A "Word Ladder" puzzle.                     word           letter swap   [d]⍞000Ddu  Finding which stamps to stick on a letter.  total value    stick stamp   [e]⍞000Duu  Who dated whom at college.                  student        dated⍞000Duu  The Maze at Hampton Court.                  intersection   path          [f]⍞000Ddu  The "See also" links used in these notes.   note           see also      [g]⍞000Duu  Adjacency of regions in a planar map.       region         adjancent to  [h]⍞000Ddw  A job scheduling network.                   task           dependency⍞000Ddu  British TV TeleText coloured "hot buttons". teletext page  hot link⍞000D││⍞000D│└─ w:weighted, u:unweighted.⍞000D└── d:directed, u:undirected.⍞000D⍞000D[a]  Most  stylised  maps of subway systems treat the network as an _unweighted_⍞000Dgraph:  there  is no attempt to indicate the relative journey times or costs be-⍞000Dtween  stations. Subways can generally be represented by _undirected_ graphs un-⍞000Dless  they  contain any one-way sections, as is the case with London''s Picadilly⍞000Dline.⍞000D⍞000D[b]  A Pawn can''t move backwards, so its moves must be represented by a directed⍞000Dgraph.  Notice  that  despite the Queen''s versatility, her _undirected_ graph is⍞000Drelatively _sparse_; at best she can move to only 27 out of 64 board positions.⍞000D⍞000D[c]  In  the The Six Degrees of Kevin Bacon game, start with any movie actor and⍞000Dtry to establish a connection with Kevin Bacon in six or fewer moves. An example⍞000Dmight be: "Sigourney Weaver":⍞000D⍞000D    Sigourney Weaver  was in Copycat with⍞000D    Holly Hunter, who was in The Firm with⍞000D    Gene Hackman, who was in The Birdcage with⍞000D    Dianne Weist, who was in Footloose with⍞000D    Kevin Bacon.⍞000D⍞000D    ... 4 degrees (edges), 5 vertices.⍞000D⍞000D[d]  A Word Ladder puzzle has two n-letter words, drawn at the top and bottom of⍞000Da picture of a ladder. The task is to write n-letter words on each of the inter-⍞000Dvening rungs, so that adjacent words differ by exactly one letter. Some examples⍞000Dmight be:⍞000D⍞000D     Puzzle  Solution      Puzzle   Solution       Puzzle   Solution⍞000D⍞000D    ├beard┤   ├beard┤      ├tooth┤   ├tooth┤      ├water┤   ├water┤⍞000D    ├─────┤   ├bears┤      ├─────┤   ├sooth┤      ├─────┤   ├wader┤⍞000D    ├─────┤   ├beams┤      ├─────┤   ├sloth┤      ├─────┤   ├wades┤⍞000D    ├─────┤   ├seams┤      ├─────┤   ├slosh┤      ├─────┤   ├wares┤⍞000D    ├─────┤   ├shams┤      ├─────┤   ├slush┤      ├─────┤   ├warns┤⍞000D    ├─────┤   ├shame┤      ├─────┤   ├blush┤      ├─────┤   ├wains┤⍞000D    ├shave┤   ├shave┤      ├brush┤   ├brush┤      ├─────┤   ├whins┤⍞000D                                                  ├whine┤   ├whine┤⍞000D⍞000D[e] See →stamps←.⍞000D⍞000D[f] See →hampton←⍞000D⍞000D[g] See example at the end of these notes.⍞000D⍞000D[h] See →konigsberg← and →uksfr←⍞000D⍞000DTwo  common  ways to represent graphs, are as a boolean "adjacency matrix" or as⍞000Dan "adjacency vector" of vectors:⍞000D⍞000DAdjacency matrix M has a 1 at M[i;j] if there is an edge from i to j.⍞000D⍞000D      A B C D E⍞000D     ┌─────────     ⍝ Adjacency matrix for graph "a" above.⍞000D   A │0 1 1 0 0⍞000D   B │0 0 1 0 0⍞000D   C │0 1 0 1 0     ⍝ Third row shows two edges: C→B  C→D.⍞000D   D │1 0 0 0 1⍞000D   E │0 0 1 0 0⍞000D⍞000DAdjacency vector V is an index vector of all edges from i to i⊃V.⍞000D⍞000D      (2 3) (3) (2 4) (1 5) (3) ⍝ Adjacency structure for graph "a".⍞000D       A     B   C     D     E⍞000D                 └───────────── ⍝ Third item shows two edges: 3→(2 4): C→B C→D.⍞000D⍞000DThe matrix representation is better for dense graphs (who didn''t date whom), and⍞000Dthe  vector  representation,  better  for sparse graphs such as links across the⍞000DWorld  Wide  Web. Workspace tube.dws models the subway systems of various cities⍞000Dusing  vector  representation.  In the case of the London Underground, which has⍞000Dover  1,200  vertices, the graph is smaller (uses less workspace) than the equi-⍞000Dvalent matrix representation, by a factor of 6.⍞000D⍞000DAt either end of the sparse-to-dense continuum are the "order-N null graph", and⍞000Dthe "order-N complete graph". An order-N  _null_ graph contains N vertices and 0⍞000Dedges  (who  dated whom in the cricket team). The order-N _complete_ graph cont-⍞000Dains N vertices and n*2 edges (who attended college with whom at college).⍞000D⍞000DA _complete_, weighted, directed graph may conveniently be represented just by a⍞000D_matrix_  of  each  vertex-to-vertex cost. Function →assign← expects such a rep-⍞000Dresentation.⍞000D⍞000DFunctions to convert between matrix and vector forms of unweighted graphs:⍞000D⍞000D    {{⍵/⍳⍴⍵}¨↓⍵}    ⍝ vector from matrix form.⍞000D⍞000D    {⍉(⍳⍴⍵)∘.∊⍵}    ⍝ matrix from vector form.⍞000D⍞000DThe following boolean functions indicate whether their graph argument is direct-⍞000Ded:⍞000D⍞000D    {⍵≢⍉⍵}                              ⍝ _matrix_ form is directed.⍞000D    {~∧/{∨/⍺∊¨⍵[⍺⊃⍵]}∘⍵¨⍳⍴⍵}            ⍝ _vector_ form is directed.⍞000D⍞000Dand  the following graph-valued functions remove the asymmetry of direction from⍞000Dtheir argument graphs:⍞000D⍞000D    {⍵∨⍉⍵}                              ⍝ remove direction from _matrix_ form.⍞000D    {{⍵/⍳⍴⍵}¨↓⍵}∘{⍵∨⍉⍵}∘{⍉(⍳⍴⍵)∘.∊⍵}    ⍝ remove direction from _vector_ form.⍞000D⍞000DThe  latter  function  removes direction by converting vector to matrix and back⍞000Dagain. The following alternative is slower but uses less workspace and preserves⍞000Dthe order of edges within each vertex:⍞000D⍞000D    {{(⍺⊃⍵)∪(⍺{∨/⍺∊⍵}¨⍵)/⍳⍴⍵}∘⍵¨⍳⍴⍵}        ⍝ remove direction from vector form.⍞000D⍞000DA vector of the edge-pairs for a (vector form) undirected graph is given by:⍞000D⍞000D    {↓[⎕IO]{(<⌿⍵)/⍵}↑,/⍵,[⎕IO-0.5]¨⍳⍴⍵}     ⍝ edge vector for undirected graph.⍞000D⍞000DRelated graphs:⍞000D⍞000DThe  "transitive closure" of a graph has an edge (u v) if there is a _path_ from⍞000Du to v in the original. In other words, the transitive closure shows where it is⍞000Dpossible  to get from u to v, no matter how long the path. The following derived⍞000Dfunctions return the transitive  closures for matrix and vector representations,⍞000Drespectively.⍞000D⍞000D    tcm←{⍵∨⍵∨.∧⍵}⍣≡                         ⍝ transitive closure (matrix).⍞000D    tcm←(⊢ ∨ ∨.∧)⍨⍣≡                        ⍝   ..      .. (using a train).⍞000D⍞000D    tcv←{⍵{(⍳⍴⍵)∩⍺,1↓↑,/0,⍺⊃¨⊂⍵}¨⊂⍵}⍣≡      ⍝ transitive closure (vector).⍞000D                   ¯¯¯¯¯¯¯⍞000DThe underlined code in the above is a rather contorted ⎕ML-independent enlist of⍞000Da (possibly null) vector-of-vectors. With ⎕ML>0, we can shorten this to:⍞000D⍞000D    tcv←{⍵{(⍳⍴⍵)∩⍺,∊⍺⊃¨⊂⍵}¨⊂⍵}⍣≡            ⍝ vector transitive closure (SL).⍞000D⍞000DThe "complement" of a graph has the same number of vertices but edges only where⍞000Dthere  were  none  before.  For  graphs that represent relationships between the⍞000Dvertices (who dated whom), the complement graph represents the inverse relation-⍞000Dship (who didn''t date whom). The complement of an adjacency _matrix_ is given by⍞000D{~⍵}, and of an adjacency _vector_ by {(⊂⍳⍴⍵)~¨⍵}.⍞000D⍞000DWe investigate only the _vector_ representation from here onwards.⍞000D⍞000DThe functions in this workspace deal only with graph structure. There is no pro-⍞000Dvision  for vertices or edges to carry data other than that required to maintain⍞000Dthe  graph.  In  real  applications,  such  "labelling" of vertices and edges is⍞000Drequired.  This  can  easily  be  achieved  by keeping a separate vector of such⍞000Dvalues (URLs, names, distances-between-stations, ···), parallel with the graph.⍞000D⍞000DAn  index  origin of 1 is assumed in the examples that follow. An origin 1 graph⍞000Dmay be converted to origin 0, just by subtracting 1.⍞000D⍞000DThere  are  many useful and interesting questions that we can ask of, and trans-⍞000Dformations that we can apply to, a graph. The functions in this workspace are:⍞000D⍞000DTransformation/Question                                     Function⍞000D-----------------------                                     --------⍞000DInsert/remove a vertex.                                     →insnode← →remnode←⍞000D⍞000DInsert/remove an edge.                                      →inslink← →remlink←⍞000D⍞000DRearrangement of vertices in graph vector:                  →gperm←⍞000D⍞000DWhat is the shortest path from vertex A to vertex B?        →path←⍞000D⍞000DProduce  a  "spanning tree" of the shortest path from the   →span←⍞000D    starting  vertex  to every other vertex in the graph.⍞000D    The  simple  function →stpath← can be used to recover   →stpath←⍞000D    shortest  vertex-to-vertex  paths  directly  from the⍞000D    spanning  tree.  Note that there may be any number of⍞000D    shortest paths between any two vertices.⍞000D⍞000DThe  path  and spanning functions are based on a breadth-   →search←⍞000D    first  search  of  the graph. A stripped-down version⍞000D    of  this  procedure  returns a vector of the vertices⍞000D    encountered  by  radiating  outwards  from a starting⍞000D    vertex. See →bfs←.⍞000D⍞000DExamples:⍞000D⍞000D    ⊢a←(2 3)(3)(2 4)(1 5)(3)            ⍝ simple origin-1 graph "a" (above).⍞000D┌───┬─┬───┬───┬─┐⍞000D│2 3│3│2 4│1 5│3│⍞000D└───┴─┴───┴───┴─┘⍞000D⍞000D    a inslink 5 1                       ⍝ ··· with new link 5→1⍞000D┌───┬─┬───┬───┬───┐⍞000D│2 3│3│2 4│1 5│3 1│⍞000D└───┴─┴───┴───┴───┘⍞000D⍞000D⍝ As many of the functions take a graph as _left_ argument and a "modifier" on⍞000D⍝ the _right_, the "fold left" operator →foldl← is useful:⍞000D⍞000D    a inslink foldl (5 1) (3 5)         ⍝ graph "a" with new links: 5→1, 3→5.⍞000D┌───┬─┬─────┬───┬───┐⍞000D│2 3│3│2 4 5│1 5│3 1│⍞000D└───┴─┴─────┴───┴───┘⍞000D⍞000D    a remlink foldl (1 3) (2 3)         ⍝ graph "a" without links: 1→3, 2→3.⍞000D┌─┬┬───┬───┬─┐⍞000D│2││2 4│1 5│3│⍞000D└─┴┴───┴───┴─┘⍞000D⍞000D    a gperm 2 1 3 4 5                   ⍝ "a" with first two nodes reversed⍞000D┌─┬───┬───┬───┬─┐⍞000D│3│1 3│1 4│2 5│3│⍞000D└─┴───┴───┴───┴─┘⍞000D⍞000D    a gperm ⌽⍳⍴a                        ⍝ "a" with nodes reversed⍞000D┌─┬───┬───┬─┬───┐⍞000D│3│5 1│4 2│3│4 3│⍞000D└─┴───┴───┴─┴───┘⍞000D⍞000D⍝ We  can borrow some lines from the →kt← Knight''s Tour function, to generate⍞000D⍝ a graph (k) of the knight''s moves on an ⍵-sized chessboard.⍞000D⍞000D    kt_graph←{                      ⍝ Graph of knight''s moves on ⍵-board.⍞000D        kdef←,0 1∘.⌽1 ¯1∘.,2 ¯2     ⍝ vector of relative knight''s moves.⍞000D        net←(⊂,⍳⍵)∩¨↓(⍳⍵)∘.+kdef    ⍝ absolute moves from each square.⍞000D        ⎕IO+,⍵∘⊥¨¨net-⎕IO           ⍝ adjacency vector.⍞000D    }⍞000D⍞000D    k←kt_graph 8 8                  ⍝ graph of knight''s moves on an 8×8 board.⍞000D┌─────┬────────┬──────────┬───────────┬───────────┬───────────┬────────┬─────┬───────┬──────────┬───────────────┬───────────────┬───────────────┬───────────────┬──────────┬───────┬──────────┬───────────────┬────────────────────┬─────────────────────┬─────────────────────┬─────────────────────┬───────────────┬──────────┬───────────┬────────────────┬───────────────────────┬───────────────────────┬───────────────────────┬───────────────────────┬─────────────────┬───────────┬───────────┬─────────────────┬───────────────────────┬───────────────────────┬───────────────────────┬───────────────────────┬─────────────────┬───────────┬───────────┬─────────────────┬───────────────────────┬───────────────────────┬───────────────────────┬───────────────────────┬─────────────────┬───────────┬────────┬───────────┬─────────────────┬─────────────────┬─────────────────┬─────────────────┬───────────┬────────┬─────┬────────┬───────────┬───────────┬───────────┬───────────┬────────┬─────┐⍞000D│11 18│12 17 19│9 13 18 20│10 14 19 21│11 15 20 22│12 16 21 23│13 22 24│14 23│3 19 26│4 20 25 27│1 5 17 21 26 28│2 6 18 22 27 29│3 7 19 23 28 30│4 8 20 24 29 31│5 21 30 32│6 22 31│2 11 27 34│1 3 12 28 33 35│2 4 9 13 25 29 34 36│3 5 10 14 26 30 35 37│4 6 11 15 27 31 36 38│5 7 12 16 28 32 37 39│6 8 13 29 38 40│7 14 30 39│10 19 35 42│9 11 20 36 41 43│10 12 17 21 33 37 42 44│11 13 18 22 34 38 43 45│12 14 19 23 35 39 44 46│13 15 20 24 36 40 45 47│14 16 21 37 46 48│15 22 38 47│18 27 43 50│17 19 28 44 49 51│18 20 25 29 41 45 50 52│19 21 26 30 42 46 51 53│20 22 27 31 43 47 52 54│21 23 28 32 44 48 53 55│22 24 29 45 54 56│23 30 46 55│26 35 51 58│25 27 36 52 57 59│26 28 33 37 49 53 58 60│27 29 34 38 50 54 59 61│28 30 35 39 51 55 60 62│29 31 36 40 52 56 61 63│30 32 37 53 62 64│31 38 54 63│34 43 59│33 35 44 60│34 36 41 45 57 61│35 37 42 46 58 62│36 38 43 47 59 63│37 39 44 48 60 64│38 40 45 61│39 46 62│42 51│41 43 52│42 44 49 53│43 45 50 54│44 46 51 55│45 47 52 56│46 48 53│47 54│⍞000D└─────┴────────┴──────────┴───────────┴───────────┴───────────┴────────┴─────┴───────┴──────────┴───────────────┴───────────────┴───────────────┴───────────────┴──────────┴───────┴──────────┴───────────────┴────────────────────┴─────────────────────┴─────────────────────┴─────────────────────┴───────────────┴──────────┴───────────┴────────────────┴───────────────────────┴───────────────────────┴───────────────────────┴───────────────────────┴─────────────────┴───────────┴───────────┴─────────────────┴───────────────────────┴───────────────────────┴───────────────────────┴───────────────────────┴─────────────────┴───────────┴───────────┴─────────────────┴───────────────────────┴───────────────────────┴───────────────────────┴───────────────────────┴─────────────────┴───────────┴────────┴───────────┴─────────────────┴─────────────────┴─────────────────┴─────────────────┴───────────┴────────┴─────┴────────┴───────────┴───────────┴───────────┴───────────┴────────┴─────┘⍞000D⍞000D    ⍴¨k(↑,/k)                       ⍝ number of vertices and edges.⍞000D 64  336⍞000D⍞000D    k path 1 2                      ⍝ Knight''s path from square 1 to 2.⍞000D1 11 17 2⍞000D⍞000D⍝ We  can  keep a vector of data associated with each vertex separate from, but⍞000D⍝ parallel with, the graph. In this case we might like a vector of board posit-⍞000D⍝ ion notations: A1 A2 ··· B1 B2 ··· H8. This vector may exist independently as⍞000D⍝ a workspace variable, or could be bound with a "translation" function.⍞000D⍞000D    show←(,⍉8 8↑⎕A∘.,1↓⎕D)∘{⍺[⍵]}   ⍝ show board positions.⍞000D⍞000D    show k path 1 9                 ⍝ a shortest path from A1 to A2.⍞000D A1  C2  B4  A2⍞000D⍞000D    show k path 1 64                ⍝   ··  ··  ··  ··  to opposite corner.⍞000D A1  C2  E1  G2  F4  G6  H8⍞000D⍞000D    show k path 1 10                ⍝   ··  ··  ··  ··  to adjacent diagonal⍞000D A1  C2  E1  D3  B2⍞000D⍞000D    a span 1                        ⍝ spanning tree for graph "a" from vertex 1.⍞000D¯1 1 1 3 4⍞000D⍞000D    (a span 1)stpath 2              ⍝ shortest path from 1 to 2 using span tree.⍞000D1 2⍞000D⍞000D    (a span 1)∘stpath¨⍳⍴a           ⍝ shortest path from 1 to each vertex.⍞000D┌─┬───┬───┬─────┬───────┐⍞000D│1│1 2│1 3│1 3 4│1 3 4 5│⍞000D└─┴───┴───┴─────┴───────┘⍞000D                                    ⍝ shortest path between⍞000D    ↑{(a span ⍵)∘stpath¨⍳⍴a}¨⍳⍴a    ⍝ each pair of vertices.⍞000D┌───────┬─────┬─────┬─────┬───────┐⍞000D│1      │1 2  │1 3  │1 3 4│1 3 4 5│⍞000D├───────┼─────┼─────┼─────┼───────┤⍞000D│2 3 4 1│2    │2 3  │2 3 4│2 3 4 5│⍞000D├───────┼─────┼─────┼─────┼───────┤⍞000D│3 4 1  │3 2  │3    │3 4  │3 4 5  │⍞000D├───────┼─────┼─────┼─────┼───────┤⍞000D│4 1    │4 1 2│4 5 3│4    │4 5    │⍞000D├───────┼─────┼─────┼─────┼───────┤⍞000D│5 3 4 1│5 3 2│5 3  │5 3 4│5      │⍞000D└───────┴─────┴─────┴─────┴───────┘⍞000D⍞000D    k span 1                        ⍝ knight''s spanning tree from vertex 1.⍞000D¯1 17 18 21 11 21 22 14 26 20 1 18 28 20 5 22 11 1 2 5 11 5 6 30 35 11 17 11 12 15 21 15 18 17 18 21 20 21 22 30 26 27 26 27 28 31 30 31 34 33 34 35 36 37 38 39 42 41 42 43 44 45 46 47⍞000D⍞000D    k span 10                       ⍝ spanning tree from vertex 10.⍞000D11 19 20 10 20 21 24 14 19 ¯1 21 27 19 4 21 31 27 3 4 10 4 5 8 14 10 20 10 13 14 20 14 15 27 19 20 19 20 21 24 30 26 25 26 27 30 29 30 31 34 35 34 35 36 37 38 39 42 41 42 43 44 45 46 47⍞000D⍞000D⍝ We can write a format operator to display the spanning tree:⍞000D⍞000D    mtree←{⎕ML←0                    ⍝ Matrix format of spanning tree.⍞000D        vfmt←⍺⍺                     ⍝ vertex format function.⍞000D        tree←⍵                      ⍝ spanning tree.⍞000D        ↑''''{                        ⍝ mix to char matrix.⍞000D            this←⊂⍺,⊃vfmt ⍵         ⍝ indented, formatted vertex.⍞000D            next←(tree=⍵)/⍳⍴tree    ⍝ child vertices of current vertex ⍵.⍞000D            next≡⍬:this             ⍝ childless: finished.⍞000D            dent←⍺,''·   ''           ⍝ increased indent.⍞000D            this,↑,/dent∘∇¨next     ⍝ formatted sub-trees.⍞000D        }tree⍳¯1                    ⍝ ... from starting vertex.⍞000D    }⍞000D⍞000D⍝ Using the small graph "a" and {⍵⊃⎕a} as a vertex formatting function:⍞000D⍞000D    a                       ⍝ graph "a".⍞000D┌───┬─┬───┬───┬─┐⍞000D│2 3│3│2 4│1 5│3│⍞000D└───┴─┴───┴───┴─┘⍞000D⍞000D    {⍵⊃⎕a}mtree a span 3    ⍝ spanning tree from vertex 3.⍞000DC⍞000D·   B⍞000D·   D⍞000D·   ·   A⍞000D·   ·   E⍞000D⍞000D⍝ The Word Ladder puzzle:⍞000D⍞000D    wds←4⊃words                                 ⍝ vector of 4-letter words.⍞000D⍞000D    wds[10?⍴wds]                                ⍝ random selection from 4-words.⍞000D mack  minx  nest  gits  racy  clue  crib  lean  them  brow⍞000D⍞000D    gph←{{⍵/⍳⍴⍵}¨↓⍵∘.{1=+/⍺≠⍵}⍵}wds             ⍝ graph of 1-letter changes.⍞000D⍞000D    wds[gph path wds⍳''beer'' ''wine'']             ⍝ beer → wine⍞000D beer  bear  bead  bend  bind  wind  wine⍞000D⍞000D    wds[gph path wds⍳''wine'' ''beer'']             ⍝ wine → beer⍞000D wine  dine  dint  dent  bent  beet  beer⍞000D⍞000D    wds[gph path wds⍳''lead'' ''gold'']             ⍝ lead → gold⍞000D lead  load  goad  gold⍞000D⍞000D⍝ The following expression returns a graph of the "See also:" links⍞000D⍝ in this workspace:⍞000D⍞000D    notes.({⍵∘{⍺{(1∊¨⍺⍷¨⊂⍵)/⍳⍴⍺}{(∨/''See also:''⍷⍵)⌿⍵}⎕FMT⍎⍵}¨⍵}⎕NL ¯2)⍞000D⍞000D⍝ Cubes in ⍵-space⍞000D⍝ ----------------⍞000D⍝⍞000D⍝ An ⍵-cube is an undirected graph with 2*⍵ vertices and ⍵×2*⍵-1 edges.⍞000D⍝⍞000D⍝ We can make an ⍵-cube by joining the corresponding⍞000D⍝ vertices of a pair of (⍵-1)-cubes.⍞000D⍝                                                  .----------.⍞000D⍝                                                 /|\        /|\⍞000D⍝                                                / | \      / | \⍞000D⍝                              .----------.     .--ɫ--.----.--ɫ--.⍞000D⍝                             /|         /|     |\ | /|    |\ | /|⍞000D⍝                            / |        / |     | \''⌿-ɫ----ɫ-⍀''/ |⍞000D⍝       .   .----------.    .----------.  |     | /.⍀-ɫ----ɫ-⌿.\ |⍞000D⍝       |   |          |    |  |       |  |     |/ | \|    |/ | \|⍞000D⍝       |   |          |    |  ''-------|--''     ''--ɫ--''----''--ɫ--''⍞000D⍝       |   |          |    | /        | /       \ | /      \ | /⍞000D⍝       |   |          |    |/         |/         \|/        \|/⍞000D⍝   ''   ''   ''----------''    ''----------''           ''----------''⍞000D⍝   ↑   ↑       ↑                   ↑                  ↑⍞000D⍝   │   │       │                   │                  │⍞000D⍝   │   │       │                   │                  └── 4-cube⍞000D⍝   │   │       │                   │                  (projected onto 2-space).⍞000D⍝   │   │       │                   │⍞000D⍝   │   │       │                   └── 3-cube (projected onto 2-space).⍞000D⍝   │   │       │⍞000D⍝   │   │       └── 2-cube (square)⍞000D⍝   │   │⍞000D⍝   │   └─ 1-cube (line)⍞000D⍝   │⍞000D⍝   └─ 0-cube (point)⍞000D⍞000D⍝ This function returns an ⍵-cube graph:⍞000D⍞000D    cube←{                      ⍝ ⍵-cube.⍞000D        ↓{                      ⍝ split simple matrix:⍞000D            0=⍵:1 0⍴0           ⍝ 0-cube: point.⍞000D            (2*⍵-1){            ⍝ number of vertices.⍞000D                (⍵⍪⍵+⍺),⍺⌽⍳2×⍺  ⍝ ⍵-cube from⍞000D            }∇ ⍵-1              ⍝   ⍵-1-cube.⍞000D        }⍵⍞000D    }⍞000D⍞000D    cube 0              ⍝ point.⍞000D┌┐⍞000D││⍞000D└┘⍞000D    cube 1              ⍝ line.⍞000D┌─┬─┐⍞000D│2│1│⍞000D└─┴─┘⍞000D⍞000D    cube 2              ⍝ square.⍞000D┌───┬───┬───┬───┐⍞000D│2 3│1 4│4 1│3 2│⍞000D└───┴───┴───┴───┘⍞000D⍞000D    cube 3              ⍝ regular 3-cube.⍞000D┌─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┐⍞000D│2 3 5│1 4 6│4 1 7│3 2 8│6 7 1│5 8 2│8 5 3│7 6 4│⍞000D└─────┴─────┴─────┴─────┴─────┴─────┴─────┴─────┘⍞000D⍞000D    cube 4              ⍝ hypercube.⍞000D┌───────┬────────┬────────┬────────┬────────┬────────┬────────┬────────┬──────────┬─────────┬─────────┬──────────┬─────────┬──────────┬──────────┬──────────┐⍞000D│2 3 5 9│1 4 6 10│4 1 7 11│3 2 8 12│6 7 1 13│5 8 2 14│8 5 3 15│7 6 4 16│10 11 13 1│9 12 14 2│12 9 15 3│11 10 16 4│14 15 9 5│13 16 10 6│16 13 11 7│15 14 12 8│⍞000D└───────┴────────┴────────┴────────┴────────┴────────┴────────┴────────┴──────────┴─────────┴─────────┴──────────┴─────────┴──────────┴──────────┴──────────┘⍞000D⍞000D    {(cube ⍵)path 1,2*⍵}10      ⍝ a path between opposite corners of a 10-cube.⍞000D1 513 769 897 961 993 1009 1017 1021 1023 1024⍞000D⍞000DSee also: wGraphs bfs scc⍞000DSee also: inslink insnode remlink remnode gperm⍞000DSee also: search path span stpath⍞000DSee also: alists foldl⍞000DSee also: stamps hampton konigsberg uksfr⍞000DSee also: assign kt X⍞000D⍞000DIndex:graph|graph, weighted|graph, unweighted|hypercube|adjacency matrix⍞000DIndex:word ladder|knight''s tour|enlist|transitive closure⍞000DIndex;Bacon K.' 
