'rslt ← code ##.type array                  ⍝ Widen ⍵ to type ⍺.⍞000D⍞000DThe width of each item in the (simple) array argument is set to code, where code⍞000Dis a ⎕DR specification such as 83, 163, ···.  The result is pegged at this width⍞000Dso it won''t be demoted (squeezed) in the event of a workspace compaction. If any⍞000Ditem in the array cannot assume the requested width, no value is returned.⍞000D⍞000DTechnical note:⍞000D⍞000DIn Dyalog, simple arrays of whole numbers may be represented internally using 1,⍞000D8,  16  or  32  bits.  When a compaction occurs, such arrays are squeezed to the⍞000Dnarrowest possible type. For example, the result of the expression 3 2-2 will be⍞000Dinitially  of  type 323 but may be demoted to type 11 during a compaction as all⍞000Dof its values are in the range 0 l.⍞000D⍞000DIn additon to compaction, system function ⎕SIZE squeezes its argument before re-⍞000Dporting its size.⍞000D⍞000DIf  we  are  sure that all values fall within the required type, we can simplify⍞000Dthe function still further by removing the check:⍞000D⍞000D    type←{                      ⍝ Widen ⍵ to type ⍺.⍞000D        ⎕IO⊃(⎕DR ⍵)⍺ ⎕DR ⍵⍞000D    }⍞000D⍞000DExample:⍞000D⍞000D      {⌽(⎕dr ⍵)(⊃''→'' ⎕wa)(⎕dr ⍵)}         1↓1e6,⍳10     ⍝ ⎕wa squeezes type.⍞000D323 → 83⍞000D⍞000D      {⌽(⎕dr ⍵)(⊃''→'' ⎕wa)(⎕dr ⍵)}163 type 1↓1e6,⍳10     ⍝ Type survives ⎕wa.⍞000D163 → 163⍞000D⍞000DIndex:data conversion|type|⎕DR' 
