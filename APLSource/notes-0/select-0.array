'rslt ← indx ##.select avec              ⍝ ⍺-selection of items from vector ⍵.⍞000D⍞000D[indx]  is an S-array (an array of shape S), each item of which is an index into⍞000Dthe  vector of S-arrays [avec]. An item of avec may also be a single item array,⍞000Din which case it is notionally S-reshaped.⍞000D⍞000DThe  resulting  S-array is an item-wise selection of corresponding elements from⍞000Dthe items of avec.⍞000D⍞000DNote  that in origin-0, the left argument may be a boolean array to select items⍞000Dfrom a pair of false-true arrays on the right.⍞000D⍞000DSelect may often be used as a pure, though expensive, alternative to partial as-⍞000Dsignments ]← and )←.⍞000D⍞000D(⍞000D    Bob Bernecky points us to Ken Iverson''s "mask":⍞000D⍞000D        "The MASK operation is defined formally as follows:⍞000D⍞000D          c ← /a,u,b/ <==> (~u)/c = (~u)/a,  and  u/c = u/b.⍞000D⍞000D        The vectors c, a, u, and b are clearly of a common dimension and⍞000D        c[i]= a[i] or b[i], according as u[i] = 0 or u[i] = 1."⍞000D⍞000D    Ref: Kenneth E. Iverson, "A Programming Language", p21, Wiley, 1962.⍞000D⍞000D    http://www.jsoftware.com/papers/APL.htm⍞000D)⍞000D⍞000DTechnical note:⍞000D⍞000DNote that in the coding for select:⍞000D⍞000D    select←{              ⍝ ⍺-selection of items of vector ⍵.⍞000D        ⍺⊃¨↑,¨/⊂¨¨⍵⍞000D    }⍞000D⍞000D⍺  and  ⍵  appear  just once at each end of the selection expression. This means⍞000Dthat, if we bound adjacent _functions_ in the expression using compose operators⍞000Dwe could express select as a single derived function. See →derive←⍞000D⍞000D    select ← ⊃¨∘↑∘(,¨/)∘(⊂¨¨)   ⍝ derived function for select.⍞000D⍞000D    select dft 1                ⍝ show derived function tree.⍞000D              ∘⍞000D        ┌─────┴─────┐⍞000D        ∘           ¨⍞000D    ┌───┴───┐     ┌─┘⍞000D    ∘       /     ¨⍞000D  ┌─┴─┐   ┌─┘   ┌─┘⍞000D  ¨   ↑   ¨     ⊂⍞000D┌─┘     ┌─┘⍞000D⊃       ,⍞000D⍞000DHowever, there is not much of a case for doing so. Although the resulting funct-⍞000Dion is arguably "cute", it runs no quicker and is harder to maintain.⍞000D⍞000DExamples:⍞000D⍞000D    2 1 2 2 1 select (1 2 3 4 5)(10 20 30 40 50)        ⍝ selection from vectors⍞000D10 2 30 40 5⍞000D⍞000D    ⊢ mats ← 5 5∘⍴¨⎕a(lcase ⎕a)⎕d                       ⍝ vector of matrices⍞000D┌─────┬─────┬─────┐⍞000D│ABCDE│abcde│01234│⍞000D│FGHIJ│fghij│56789│⍞000D│KLMNO│klmno│01234│⍞000D│PQRST│pqrst│56789│⍞000D│UVWXY│uvwxy│01234│⍞000D└─────┴─────┴─────┘⍞000D⍞000D    ⎕←indx←5 5⍴⍳3                       ⍝ selection matrix.⍞000D1 2 3 1 2⍞000D3 1 2 3 1⍞000D2 3 1 2 3⍞000D1 2 3 1 2⍞000D3 1 2 3 1⍞000D⍞000D    indx select mats                    ⍝ selection from matrices.⍞000DAb2De⍞000D5Gh8J⍞000Dk1Mn4⍞000DPq7St⍞000D0Vw3Y⍞000D⍞000D    chars                               ⍝ character matrix.⍞000Dnow is⍞000Dthe time⍞000D⍞000D    (⎕io+chars='' '')select chars ''.''     ⍝ dots for blanks.⍞000Dnow.is..⍞000Dthe.time⍞000D⍞000D⍝ This function swaps box-drawing characters for printer-friendly equivalents:⍞000D⍞000D    clunk←{                     ⍝ Printer friendly characters.⍞000D        fm←''┌┬┐├┼┤└┴┘│─''        ⍝ box drawing characters.⍞000D        to←''...|+|''''''''''''|-''     ⍝ equivalent clunky chars.⍞000D        (fm⍳⍵)select to,⊂⍵      ⍝ printer-friendly substitution.⍞000D    }⍞000D⍞000D    disp ⍳¨⍳2 2                 ⍝ char mat with box-drawing characters⍞000D┌─────┬─────────┐⍞000D│┌───┐│┌───┬───┐│⍞000D││1 1│││1 1│1 2││⍞000D│└───┘│└───┴───┘│⍞000D├─────┼─────────┤⍞000D│┌───┐│┌───┬───┐│⍞000D││1 1│││1 1│1 2││⍞000D│├───┤│├───┼───┤│⍞000D││2 1│││2 1│2 2││⍞000D│└───┘│└───┴───┘│⍞000D└─────┴─────────┘⍞000D⍞000D    clunk disp ⍳¨⍳2 2           ⍝ clunky equivalents.⍞000D.-----.---------.⍞000D|.---.|.---.---.|⍞000D||1 1|||1 1|1 2||⍞000D|''---''|''---''---''|⍞000D|-----+---------|⍞000D|.---.|.---.---.|⍞000D||1 1|||1 1|1 2||⍞000D||---|||---+---||⍞000D||2 1|||2 1|2 2||⍞000D|''---''|''---''---''|⍞000D''-----''---------''⍞000D⍞000D    ⊢ cubes ← 1 10 100×⊂2 3 4⍴⍳24       ⍝ vector of higher-rank arrays.⍞000D┌───────────┬───────────────┬───────────────────┐⍞000D│ 1  2  3  4│ 10  20  30  40│ 100  200  300  400│⍞000D│ 5  6  7  8│ 50  60  70  80│ 500  600  700  800│⍞000D│ 9 10 11 12│ 90 100 110 120│ 900 1000 1100 1200│⍞000D│           │               │                   │⍞000D│13 14 15 16│130 140 150 160│1300 1400 1500 1600│⍞000D│17 18 19 20│170 180 190 200│1700 1800 1900 2000│⍞000D│21 22 23 24│210 220 230 240│2100 2200 2300 2400│⍞000D└───────────┴───────────────┴───────────────────┘⍞000D⍞000D      ⎕←indx←2 3 4⍴⍳3                   ⍝ higher-rank index array.⍞000D1 2 3 1⍞000D2 3 1 2⍞000D3 1 2 3⍞000D⍞000D1 2 3 1⍞000D2 3 1 2⍞000D3 1 2 3⍞000D⍞000D      indx select cubes                 ⍝ selection of higher rank arrays.⍞000D   1   20  300    4⍞000D  50  600    7   80⍞000D 900   10  110 1200⍞000D⍞000D  13  140 1500   16⍞000D 170 1800   19  200⍞000D2100   22  230 2400⍞000D⍞000DSee also: at from dft derive⍞000D⍞000DIndex:assignment, indexed|assignment, destructive|pure function⍞000DIndex:box-drawing characters⍞000DIndex;Iverson K.E.|Bernecky R.' 
