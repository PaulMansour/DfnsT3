'rslt ← pick ##.of F of G of H ... arg       ⍝ Pick''th fn applied to arg.⍞000D⍞000D[pick] is a ⎕IO-sensitive index into the "vector of" monadic functions": F G ··.⍞000DThe  [pick]th function is applied to [arg]. If [pick] is out-of-bounds, [arg] is⍞000Dreturned unmodified.⍞000D⍞000DTechnical note:⍞000D⍞000DThe operator code looks like this:⍞000D⍞000D    of←{                            ⍝ pick of F of G of H ... arg.⍞000D        indx rslt←⍺⍺{               ⍝ ''countdown'' and received result.⍞000D            2=⎕NC''⍺⍺'':⍺⍺ ⍵          ⍝ left leaf of tree: pick-index and arg.⍞000D            ''int''⍺⍺ ⍵               ⍝ intermediate level: recur left.⍞000D        }⍵⍞000D⍞000D        next←(⍵⍵⍣(⎕IO=indx))rslt    ⍝ apply ⍵⍵ if at right level.⍞000D⍞000D        ⍺←''top''                     ⍝ missing ⍺ => top level.⍞000D        ⍺≡''top'':next                ⍝ top level: return result.⍞000D        (indx-1)next                ⍝ otherwise: index and rslt.⍞000D    }⍞000D⍞000DAs  with  the →case← operator, although the sequence: (p of F of G of H ··· arg)⍞000Dmight look linear, in fact it represents a derived function _tree_:⍞000D⍞000D           ┌─··· arg⍞000D         ┌─of─┐⍞000D       ┌─of─┐ H⍞000D     ┌─of─┐ G⍞000D    pick  F⍞000D⍞000D[of]  traverses the left "spine" of this tree until it finds a left operand that⍞000Dis  not  a  function and so must be the [pick] index. It returns this [indx] and⍞000Dthe value of the argument ⍵, as the "current" result.⍞000D⍞000D[indx]  is  decremented  as,  together with the result, it is passed back up the⍞000Dtree.  When and if [indx] matches ⎕IO, the target level has been reached and the⍞000D[next] result passed back is: ⍵⍵ ⍵.⍞000D⍞000DA  final  twist is that, at the top of the derived function tree, [indx] must be⍞000Ddiscarded  from  the (index next) pair. This is achieved by using ⍺ to signal an⍞000Dintermediate depth in the tree and defaulting it to ''top''.⍞000D⍞000DExamples:⍞000D⍞000D      1 of + of - of × of ÷ 10      ⍝ +10⍞000D10⍞000D      2 of + of - of × of ÷ 10      ⍝ -10⍞000D¯10⍞000D      3 of + of - of × of ÷ 10      ⍝ ×10⍞000D1⍞000D      4 of + of - of × of ÷ 10      ⍝ ÷10⍞000D0.1⍞000D      5 of + of - of × of ÷ 10      ⍝  10 (out of range index returns arg).⍞000D10⍞000D⍞000DSee also: case Function_arrays pow case co_ops⍞000D⍞000DIndex:function array|conditional operator|co-operator' 
