'mat ← ##.pmat n                             ⍝ Permutation matrix of ⍳⍵.⍞000D⍞000D[pmat]  takes an integer scalar [n] and returns a !n row matrix of the permutat-⍞000Dions of ⍳n.⍞000D⍞000DTechnical notes:⍞000D⍞000DThe  method  used  here  is  to take each item of ⍳n in turn and append all sub-⍞000Dpermutations of the remaining (n-1) items. This produces result items in ascend-⍞000Ding order. Thus, for any ⍵: {⍵≡⍳⍴⍵}⍋pmat ⍵.⍞000D⍞000DThe code looks like this:⍞000D⍞000D    pmat←{⎕ML←0             ⍝ Permutation matrix of ⍳⍵.⍞000D        {                   ⍝ perms of ⍳⍵:⍞000D            1≥⍴⍵:↑,↓⍵       ⍝ short vector: done.⍞000D            ↑⍪/⍵,∘∇¨⍵∘~¨⍵   ⍝ items prefix sub-perms of remainder.⍞000D        }⍳⍵                 ⍝ permutations of identity perm.⍞000D    }⍞000D⍞000DPerttu  Pakarinen suggests the following _much faster_ version. It produces rows⍞000Din non-ascending order but could easily be modified: {⍵[⍋⍵;]}.⍞000D⍞000D    prm←{⍞000D        (⎕IO ⎕ML)←1 3⍞000D        (×\⍳⍵){0∊⍴⍺:⍵ ⋄ (r c)←⍴⍵⍞000D            (1↓⍺)∇(r/0,⍳c)⌽(⍺[1],c+1)⍴(↑⍴⍺),⍵}1 0⍴0⍞000D    }⍞000D⍞000DFor  large values of ⍵, the resulting permutation matrix takes a large amount of⍞000Dworkspace.  In  this  case, it might be better to apply an auxiliary function to⍞000Deach permutation as it is generated. The following operator does the trick:⍞000D⍞000D    perms←{                 ⍝ Apply ⍺⍺ to each perm of ⍳⍵⍞000D        ⍬ ⍺⍺{               ⍝ null accumulator⍞000D            1≥⍴⍵:⍺⍺ ⍺,⍵     ⍝ short tail: apply operand to perm⍞000D            (⍺∘,¨⍵)∇¨⍵∘~¨⍵  ⍝ transfer each tail item to head⍞000D        }⍳⍵                 ⍝ for initial vector.⍞000D    }⍞000D⍞000DRoger Hui provides this even faster version:⍞000D⍞000D    pmat2←{{,[⍳2]↑(⊂⊂⎕io,1+⍵)⌷¨⍒¨↓∘.=⍨⍳1+1↓⍴⍵}⍣⍵⍉⍪⍬}⍞000D⍞000Dtranslated from perm2 in http://www.jsoftware.com/jwiki/Essays/Permutations⍞000Ditself a translation from APL.⍞000D⍞000DExamples:⍞000D⍞000D      pmat 3                            ⍝ 3-perms.⍞000D1 2 3⍞000D1 3 2⍞000D2 1 3⍞000D2 3 1⍞000D3 1 2⍞000D3 2 1⍞000D⍞000D      {⍵[pmat⍴⍵]}''tic'' ''tac'' ''toe''      ⍝ Perms of nested vector.⍞000D tic  tac  toe⍞000D tic  toe  tac⍞000D tac  tic  toe⍞000D tac  toe  tic⍞000D toe  tic  tac⍞000D toe  tac  tic⍞000D⍞000D      4 3 2⍴↓{⍵[pmat⍴⍵]}''abcd''          ⍝ Folded perms of simple 4-vector.⍞000D abcd  abdc⍞000D acbd  acdb⍞000D adbc  adcb⍞000D⍞000D bacd  badc⍞000D bcad  bcda⍞000D bdac  bdca⍞000D⍞000D cabd  cadb⍞000D cbad  cbda⍞000D cdab  cdba⍞000D⍞000D dabc  dacb⍞000D dbac  dbca⍞000D dcab  dcba⍞000D⍞000D      ⍴pmat 10                          ⍝ !⍵ rows.⍞000D3628800 10⍞000D⍞000D      display∘pmat¨2 1 0                ⍝ Limiting cases⍞000D ┌→──┐  ┌→┐  ┌⊖┐⍞000D ↓1 2│  ↓1│  ↓0│⍞000D │2 1│  └~┘  └~┘⍞000D └~──┘⍞000D⍞000D      (!0 to 5) ≡ ⊃∘⍴∘pmat¨0 to 5       ⍝ Result lengths.⍞000D1⍞000D                                        ⍝ Rows of the permutation matrix form⍞000D      {⍵⍳⍵∘.{⍺⊃¨⊂⍵}⍵}↓pmat 3            ⍝ a group under ⊃¨∘⊂ with identity ⍳⍵.⍞000D1 2 3 4 5 6⍞000D2 1 4 3 6 5⍞000D3 5 1 6 2 4⍞000D4 6 2 5 1 3⍞000D5 3 6 1 4 2⍞000D6 4 5 2 3 1⍞000D⍞000D    ⎕∘← perms 3                         ⍝ show each permutation.⍞000D1 2 3⍞000D1 3 2⍞000D2 1 3⍞000D2 3 1⍞000D3 1 2⍞000D3 2 1⍞000D⍞000DSee also: cmat⍞000D⍞000DIndex:permutation matrix⍞000DIndex;Pakarinen P.|Hui R.K.W.' 
