'{name} ← {ref} ##.ambiv namelist            ⍝ Ambivalize traditional function.⍞000D⍞000DChanges  the header in [namelist] traditional defined functions by enclosing the⍞000Dleft  argument  in each header line in braces. Useful when importing dyadic APL2⍞000Dfunctions  that  may be called with no left argument. The shy result is a vector⍞000Dof the names of those functions that have been changed with nulls for those that⍞000Dhaven''t. The optional left argument specifies the namespace in which the operat-⍞000Dion is to take place, default: current space. Notice that [ambiv] may be used in⍞000Dconjunction with →refs← to ambivalize all functions and operators in a namespace⍞000Dtree.⍞000D⍞000DExamples:⍞000D⍞000D      ambiv ⎕nl 3 4                 ⍝ ambivalize all fns and ops in this space.⍞000D⍞000D      ambiv''foo'' ''goo'' ''hoo''        ⍝ worked for foo and hoo, but not goo.⍞000D┌→────────────────┐⍞000D│ ┌→──┐ ┌⊖┐ ┌→──┐ │⍞000D│ │foo│ │ │ │hoo│ │⍞000D│ └───┘ └─┘ └───┘ │⍞000D└∊────────────────┘⍞000D⍞000D      ⎕se.NumEd ambiv''numed''        ⍝ ambivalize ⎕se.NumEd.numed.⍞000D⍞000D      {⍵ ambiv ⍵.⎕nl 3 4}¨refs #    ⍝ ambivalize all fns and ops in workspace.⍞000D⍞000DSee also: refs⍞000D⍞000DIndex:ambivalent|tradfn' 
