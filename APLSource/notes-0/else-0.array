'rslt ← cond (⍺⍺ ##.else ⍵⍵) argt            ⍝ Condition f else g ...⍞000D⍞000DConditional  application  of  left  or  right operand. Returns: if cond is true,⍞000D⍺⍺ argt, otherwise ⍵⍵ argt.⍞000D⍞000DNB: This operator is largely superseded by the more general →cond←.  However, it⍞000Dis retained partly as an example of a simple operator  and partly for reasons of⍞000Dnostalgia, being the oldest piece of code in the dfns workspace:⍞000D⍞000D        ''d t''attrib''else''   ⍝ oldest op in WS.⍞000D    1998-03-05 16:41:54⍞000D⍞000D[else]  is more versatile than it might at first appear. In the following (⍺) is⍞000Da  boolean  singleton; (⍵), (L) and (R) are arrays and (⍺⍺) and (⍵⍵) are monadic⍞000Dfunctions.⍞000D⍞000Dcase    calling syntax      if      then    else⍞000D----    --------------      --      ----    ----⍞000D[1]     ⍺ ⍺⍺ else ⍵⍵ ⍵      ⍺       ⍺⍺ ⍵    ⍵⍵ ⍵⍞000D[2]     ⍺ ⍺⍺ else ⊢  ⍵      ⍺       ⍺⍺ ⍵    ⍵⍞000D[3]     ⍺ ⍺⍺ else{R} ⍵      ⍺       ⍺⍺ ⍵    R⍞000D[4]     ⍺  ⊢ else ⍵⍵ ⍵      ⍺       ⍵       ⍵⍵ ⍵⍞000D[5]     ⍺  ⊢ else{R} ⍵      ⍺       ⍵       R⍞000D[6]     ⍺ {L}else ⍵⍵ ⍵      ⍺       L       ⍵⍵ ⍵⍞000D[7]     ⍺ {L}else ⊢  ⍵      ⍺       L       ⍵⍞000D[8]     ⍺ {L}else{R} ⍵      ⍺       L       R⍞000D⍞000DNotice  that  (L) and (R) may be arbitrarily complex _expressions_, which return⍞000Dan array value but which are evaluated _only_ if (⍺) selects that case.⍞000D⍞000DPhil Last suggests an _ambivalent_ variant of the operator:⍞000D⍞000D    else←{              ⍝ {condition} f else g ...⍞000D        ⍺←⊢⍞000D        1≡⍺ 1:⍺⍺{       ⍝ valence test⍞000D            ⍺⍺ ⍵:⍵      ⍝ monad: ⍺⍺ is test - nop if true⍞000D            ⍵⍵ ⍵        ⍝                     else run ⍵⍵⍞000D        }⍵⍵ ⍵⍞000D        ⍺:⍺⍺ ⍵          ⍝ dyad:   ⍺ is test - run ⍺⍺ if true⍞000D        ⍵⍵ ⍵            ⍝                     else run ⍵⍵⍞000D    }⍞000D⍞000DNotice Phil''s technique used in the first two lines of the code. More often than⍞000Dnot,  all  that  is  needed  for  a missing left argument is to supply a default⍞000Dvalue.  In this case however, the code needs to know _explicitly_ whether a left⍞000Dargument  is  present.  The  first line ⍺←⊢, makes ⍺ the identity function if no⍞000Dleft  argument  has been passed. The guard on the second line 1≡⍺ 1, will "fire"⍞000Donly  in this case, as _any_ array passed as left argument would strand with the⍞000Drightmost 1 to form a 2-vector, which cannot possibly match 1.⍞000D⍞000DThe  ambivalent  version  adds  the  following  cases  in which (T) is a boolean⍞000Dsingleton and (tt) is a monadic function returning a boolean singleton:⍞000D⍞000Dcase    calling syntax      if      then    else⍞000D----    --------------      --      ----    ----⍞000D[9]     tt else ⍵⍵ ⍵        tt ⍵    ⍵       ⍵⍵ ⍵⍞000D[10]    tt else{R} ⍵        tt ⍵    ⍵       R⍞000D[11]    {T}else ⍵⍵ ⍵        T       ⍵       ⍵⍵ ⍵⍞000D[12]    {T}else{R} ⍵        T       ⍵       R⍞000D⍞000DNotice  in  the  examples below,  that  ⍺←⊢ is used to _pass on_ a possibly non-⍞000Dexistent  left  argument  to  a  called function. In the following, if [main] is⍞000Dcalled without a left argument, then so is [sub].⍞000D⍞000D    main←{⍞000D        ⍺←⊢⍞000D        ⍺ sub ⍵⍞000D    }⍞000D                                                                            case⍞000DExamples:                                                                   ────⍞000D⍞000D      open←{⍺←0                           ⍝ File tie, optionally exclusive.⍞000D          ⍺ (⍵∘⎕fstie) else (⍵∘⎕ftie) 0   ⍝ ⍺=1: shared else exclusive.      [1]⍞000D      }⍞000D⍞000D      close←{⍺←0                          ⍝ File untie, optional resize.⍞000D          ⎕funtie ⍺ ⎕fresize else ⊢ ⍵     ⍝ ⍺=1: squeeze file else don''t.    [2]⍞000D      }⍞000D⍞000D      openc←{⍺←⊢                          ⍝ open as above - unless tie number⍞000D          (0∊∊⍵) ⊢ else (⍺∘open) ⍵        ⍝ tie←share openc file             [4]⍞000D      }⍞000D⍞000D      closec←{⍺←⊢                         ⍝ close as above - if opened by openc⍞000D          (⍺⍺≡⍵) ⊢ else (⍺∘close) ⍵       ⍝ squeeze(file closec)tie          [4]⍞000D      }⍞000D⍞000D      openc←{⍺←⊢                          ⍝ open as above - unless tie number⍞000D          (0∘∊∘∊) else (⍺∘open) ⍵         ⍝ tie←share openc file             [9]⍞000D      }⍞000D⍞000D      closec←{⍺←⊢                         ⍝ close as above - if opened by openc⍞000D          (⍺⍺∘≡) else (⍺∘close) ⍵         ⍝ squeeze(file closec)tie          [9]⍞000D      }⍞000D⍞000DSee also: cond pow and or⍞000D⍞000DIndex:conditional operator⍞000DIndex;Last P.' 
