'array ← ##.pack array                       ⍝ Saves WS by sharing subarrays.⍞000D⍞000DPack attempts to increase the amount of workspace available by sharing identical⍞000Dsubarrays in its argument.  For a sizeable argument, this takes a very long time⍞000Das  each  subarray  is  compared  with every other one (n*2 comparisons).  It is⍞000Dworth  doing  only when workspace availability is at a premium, perhaps prior to⍞000Dshipping  an  application  containing complex nested variables. Notice that sub-⍞000Darrays  can  be shared _among_ distinct variables - see example below. Note that⍞000Din  this  context,  system  function ⎕SIZE can be misleading as it ignores array⍞000Dsharing.⍞000D⍞000DNB: [pack] shares items at _and_ _between_ all depths in its argument array. For⍞000Dsharing of subarrays at any particular level,  the following simple  function is⍞000Dconsiderably  faster.  Note that it may be applied under each (¨) to share items⍞000Dat (but not between) greater depths.⍞000D⍞000D    pack1 ← {(∪,⍵){⍺[⍺⍳⍵]}⍵}    ⍝ share top level items.⍞000D⍞000D    ditty ← (''Dime'' ''cuándo'' ''serás'' ''mia'') (''Dime'' ''cuándo'' ''cuándo'' ''cuándo'')⍞000D⍞000DAll recent versions of Dyalog share literal constants, such as  ''cuándo''  above.⍞000DTo emulate a more real situation, where array items  are  typically  created  by⍞000Dfunction application, let''s make sure we start with an array of unshared items:⍞000D⍞000D    unsh ← ⌽∘⌽                  ⍝ reversal creates a new vector.⍞000D⍞000D    ditty ← unsh¨ ditty         ⍝ force unsharing.⍞000D⍞000DNow pack:⍞000D⍞000D    ditty ← pack1¨ ditty        ⍝ share inside, but not among, sub vectors.⍞000D⍞000D    ditty ← pack   ditty        ⍝ share _all_ subarrays.⍞000D⍞000DNB: Related function →nspack← shares all subarrays within a given namespace.⍞000D⍞000DTechnical note:⍞000D⍞000DPack uses (6≠10|⎕DR ⍵:) to determine whether a subarray is homogeneous or heter-⍞000Dogeneous.  In  the  latter  case, the array''s items may be shared as well as the⍞000Darray itself. Compare the following two depth-1 arrays:⍞000D⍞000D      1 0 6 6       ⍝ hom: try to share whole array.⍞000D⍞000D      ''1'' 0 6 6     ⍝ het: try to share array _and_ its subarrays.⍞000D⍞000DExamples:⍞000D⍞000D      wa←⎕wa ⋄ cvecs←(⍳1e3)⌽¨⊂⎕a ⋄ wa-⎕wa   ⍝ WS used by distinct char vectors,⍞000D48032⍞000D      wa←⎕wa ⋄ cvecs←pack cvecs  ⋄ wa-⎕wa   ⍝ sharing recovers most of it.⍞000D¯42856⍞000D⍞000D      A ← ⌽∘⌽¨ ''Scissors'' ''Paper'' ''Stone''⍞000D      B ← ⌽∘⌽¨ ''Paper'' ''Stone'' ''Scissors''⍞000D      C ← ⌽∘⌽¨ ''Stone'' ''Scissors'' ''Paper''⍞000D      wa←⎕wa⍞000D      ⎕wa-wa⍞000D0⍞000D      A B C←pack A B C      ⍝ Sharing subarrays _among_ variables,⍞000D      ⎕wa-wa                ⍝ ... releases some workspace.⍞000D144⍞000D      nested←⍳¨∘⍳¨∘⍳¨∘⍳¨∘⍳3 3                   ⍝ complex nested array:⍞000D⍞000D      wa←⎕wa ⋄ nested←pack nested ⋄ ⎕wa-wa      ⍝ significant saving.⍞000D17936⍞000D⍞000DSee also: nspack Data_compression⍞000D⍞000DIndex:compression|sharing, array' 
