'Declarative Programming⍞000D-----------------------⍞000DThe essence of the declarative programming paradigm is that we tell the computer⍞000Dwhat we want, not how to go about doing it.  For example,  the  APL function for⍞000Dthe mean item of a vector: {(+/⍵)÷⍴⍵}  declares that the mean is the quotient of⍞000Dthe sum and number of items.  Contrast this with the coding in a typical proced-⍞000Dural language, where we are obliged to determine the sequence of operations:⍞000D⍞000D    rslt = mean(vec length):⍞000D        sum = 0⍞000D        index = 0⍞000D        while index < length⍞000D            sum = sum + vec[index]⍞000D        rslt = sum ÷ length⍞000D⍞000DThe penultimate line: sum = sum + ... is particularly thought-provoking:⍞000D⍞000DThere  is  a story that Ken Iverson, the inventor of APL, was passing a terminal⍞000Dat which a Fortran programmer had just typed:⍞000D⍞000D       I = I+1⍞000D⍞000DKen paused for a moment, muttered "no it doesn''t", and passed on.⍞000D⍞000DA similar yarn relates to a computer scientist who, many years ago,  before  the⍞000Dconcept of declarative programming was generally understood, was teaching  prog-⍞000Dramming to a group of geography students.  The students were having a hard  time⍞000Dunderstanding what I=I+1 means. To his immense credit, on reflection, the teach-⍞000Der realised that he didn''t understand either. Thus came a significant advance in⍞000Dcomputer science.⍞000D⍞000D⍞000DNote however, in a lazy functional language such as Haskell, min.dws or max.dws,⍞000Dsuch statements have meaning. For example, in max, we can say:⍞000D⍞000D      max''''     ⍝ start max session.⍞000D⍞000D    i = +i      / declare i to be its own successor.⍞000D⍞000D    i::         / the type of i is "num".⍞000D#⍞000D    / However, a problem occurs if we try to display the value of i⍞000D    / by reducing it to a number: the reduction fails to terminate⍞000D    / as max tries to display a number which is its own successor.⍞000D⍞000D    i           / this will not terminate !!!⍞000D⍞000D... INTERRUPT⍞000D⍞000DFP theorists assign a special symbol "⊥", pronounced "bottom" to non-termination⍞000Din order that they can reason about expressions containing such values.⍞000D⍞000D(muse:⍞000D⍞000D    Stupid questions ...⍞000D⍞000D    During the time we were implementing  the  very  first  version of Dyalog, a⍞000D    friend, who was not a programmer, asked me how much of it was coded in  APL.⍞000D    I thought he was bonkers.⍞000D⍞000D        We now have exactly this internal "magic function" prototyping facility.⍞000D⍞000D    When "Visual Display Units" first appeared alongside scrolling paper termin-⍞000D    als, a participant on a course I was giving asked me  where the writing went⍞000D    when it disappeared off the top of the screen.  I  explained  it  was  just,⍞000D    well, gone; same place the ticking goes when the clock stops.⍞000D⍞000D        We now have scrolling sessions.⍞000D⍞000D    On another course, someone asked me what (A B) means, when A and B are vari-⍞000D    ables. I explained that it didn''t mean anything as there wasn''t  a  function⍞000D    between the A and the B.⍞000D⍞000D        We now have vector notation.⍞000D⍞000D    Sound bite: A stupid question is a portal into an alternative mindset.⍞000D)⍞000D⍞000DLandin prefers the term "denotative":⍞000D"The word "denotative" seems more appropriate than nonprocedural, declarative or⍞000D functional. The antithesis of denotative is "imperative"."⍞000D"The Next 700 Programming Languages", Landin,P.J., Comms ACM 9.3, March 1966.⍞000D⍞000DSee also: pearly⍞000D⍞000DIndex:declarative programming|bottom ⊥|non-termination|denotative⍞000DIndex:stupid questions|magic function|sound bite⍞000DIndex;Iverson K.E.|Landin P.J.' 
