'rslt ← count (fun ##.pow) argt              ⍝ Explicit function power.⍞000D⍞000DMonadic  operand  function:  [fun]  is applied cumulatively [count] times to the⍞000Dargument.⍞000D⍞000DNB:  Dyalog V11 implements [pow] as primitive operator ⍣, though with a slightly⍞000Ddifferent assignment of arguments and operands.⍞000D⍞000DTechnical notes:⍞000D⍞000DThere are a number of ways to code this operator. One that perhaps first springs⍞000Dto mind, uses tail recursion with a guard:⍞000D⍞000D    pow←{                   ⍝ Explicit function power.⍞000D        ⍺=0:⍵               ⍝ zero count: finished.⍞000D        (⍺-1)∇ ⍺⍺ ⍵         ⍝ tail call with reduced count.⍞000D    }⍞000D⍞000DAnother, possibly due to Alan Graham, uses ⍎ and ⍕ to produce the expression: ⍺⍺⍞000D⍺⍺ ⍺⍺ ... ⍺⍺ ⍵.  Note that an unquoted (but unreferenced) ⍺⍺ must be included to⍞000Dmake it an operator:⍞000D⍞000D    pow←{⍎(⍕⍺⍴⊂''⍺⍺''),''⍵'' ⋄ ⍺⍺}⍞000D⍞000DThe following coding was provided by Phil Last.⍞000D⍞000D    pow←{↑⊢∘⍺⍺/(⍳⍺),⊂⍵}         ⍝ Explicit function power.⍞000D⍞000DHere''s  how it works: The composition: ⊢∘⍺⍺ is a _function_, which applies ⍺⍺ to⍞000Dits right argument and ignores its left one. For example:⍞000D⍞000D        12 ⊢∘÷ 2 4              ⍝ reciprocal of 2 4 (the 12 is ignored).⍞000D    0.5 0.25⍞000D⍞000D        1 ⊢∘÷ 2 ⊢∘÷ 2 4         ⍝ reciprocal of reciprocal of 2 4 (1 2 ignored).⍞000D    2 4⍞000D⍞000D        ↑ ⊢∘÷ / 1 2 (2 4)       ⍝ recoding of the above using reduction /.⍞000D    2 4⍞000D⍞000D        ↑ ⊢∘÷ / (⍳2),⊂2 4       ⍝ same as above.⍞000D    2 4⍞000D⍞000DNotice  in  the above, that only the _number_ of items in (⍳2) is significant as⍞000Ditem  values  are ignored. The expression is therefore ⎕IO independent. Choosing⍞000Dan index origin of 1, we can transform the body of the operator in the following⍞000Dsteps:⍞000D⍞000D    ↑⊢∘⍺⍺/(⍳⍺),⊂⍵                       ⍝ body of the operator.⍞000D→   ↑⊢∘⍺⍺/1 2 ... ⍺ ⍵                   ⍝ (⍳⍺) → 1 2 ... ⍺⍞000D→   1 ⊢∘⍺⍺ 2 ⊢∘⍺⍺ ... ⊢∘⍺⍺ ⍺ ⊢∘⍺⍺ ⍵     ⍝ expanding the reduction /.⍞000D→     ⊢∘⍺⍺   ⊢∘⍺⍺ ... ⊢∘⍺⍺   ⊢∘⍺⍺ ⍵     ⍝ left arguments ignored.⍞000D→       ⍺⍺     ⍺⍺ ...   ⍺⍺     ⍺⍺ ⍵     ⍝ cumulative applications of ⍺⍺.⍞000D⍞000DThe following related function uses monadic commute:⍞000D⍞000D    acc←{↑⊢∘(,∘⊂∘⍺⍺∘⊃∘⌽⍨)/(⍳⍺),⊂⊂⍵}             ⍝ ⍺-accumulator.⍞000D⍞000D    3 (1∘+) acc 10                              ⍝ 10 and 3 successors.⍞000D10 11 12 13⍞000D⍞000DExamples:⍞000D⍞000D    6 {''<'',⍵,''>''} pow ''wow''⍞000D<<<<<<wow>>>>>>⍞000D⍞000D    display 4 ⊂pow ''wow''⍞000D┌───────────────────┐⍞000D│ ┌───────────────┐ │⍞000D│ │ ┌───────────┐ │ │⍞000D│ │ │ ┌───────┐ │ │ │⍞000D│ │ │ │ ┌→──┐ │ │ │ │⍞000D│ │ │ │ │wow│ │ │ │ │⍞000D│ │ │ │ └───┘ │ │ │ │⍞000D│ │ │ └∊──────┘ │ │ │⍞000D│ │ └∊──────────┘ │ │⍞000D│ └∊──────────────┘ │⍞000D└∊──────────────────┘⍞000D⍞000D    display 6 ↑∘,∘⊂ pow ''hello''                 ⍝ 6-fold increase in rank.⍞000D┌┌┌┌┌┌→────┐⍞000D↓↓↓↓↓↓hello│⍞000D└└└└└└─────┘⍞000D⍞000D    {⍬⍴ ⍵ {1↓⍵,+/⍵} pow 0 1}¨ 0 to 10           ⍝ Fibonacci numbers.⍞000D0 1 1 2 3 5 8 13 21 34 55⍞000D⍞000D    {⍬⍴⌽ ⍵ {1++\+\⍵} pow 0 0}¨ 0 to 10          ⍝ squares.⍞000D0 1 4 9 16 25 36 49 64 81 100⍞000D⍞000DSee also: for to limit inverse traj while until⍞000D⍞000DIndex:power operator|function power|fibonacci number⍞000DIndex;Graham A.|Last P.|Fibonacci L.' 
