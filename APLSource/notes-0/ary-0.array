'enco ← base (##.ary) ratnum            ⍝ ⍺-ary representation of rational ⍵.⍞000D⍞000DReturns a character vector representation of the ⍺-based rational number that is⍞000D⎕CT-tolerably close to ⍵.⍞000D⍞000D        3 ary 66.6      ⍝ ternary representation of rational number.⍞000D    2110.12101210...⍞000D⍞000DIf [base] is a positive number in the range 2..36, then the result is a charact-⍞000Der vector, in one of three forms:⍞000D⍞000D    nnn.fff             ⍝ exact rational with finite representation.⍞000D    nnn.fff...          ⍝ exact non-terminating rational.⍞000D    nnn.fff?            ⍝ inexact irrational number.⍞000D⍞000DA rational number of the form P÷Q, expressed in base ⍺,  has a finite represent-⍞000Dation only if all of the prime factors of Q  are also prime factors of the base.⍞000DOtherwise,  the  ⍺-ary  representation  of P÷Q will have a repeating sequence of⍞000Dtrailing digits. Examples, base-10 are:⍞000D⍞000D        10 ary 1÷ 2×3   ⍝ 3 is relatively prime to base (2×5).⍞000D    0.166...⍞000D⍞000D        10 ary 4÷ 11    ⍝ 11 is relatively prime to base (2×5).⍞000D    0.3636...⍞000D⍞000DThe ellipsis (...)  identifies the _longest_ twice-repeated sequence to its left⍞000Das the repetition sequence. In the first example above, only the ''6'' is repeated⍞000Dindefinitely, whereas in the second example, the whole of the longer string ''36''⍞000Dis repeated. See also →esh←.⍞000D⍞000D        10 ary 16*¯3    ⍝ exact, finite representation.⍞000D    0.000244140625⍞000D⍞000D        10 ary ÷7       ⍝ exact, rational with repeating sequence.⍞000D    0.142857142857...⍞000D⍞000D        10 ary ○1       ⍝ inexact, irrational with truncated digits.⍞000D    3.1415926535898?⍞000D⍞000DIf left argument  [base]  is negative,  character vector formatting is supressed⍞000Dand nested structure: (sig exp fix rep rat) is returned. Where:⍞000D⍞000D    sig:    scalar  sign of [ratnum] (1, ¯1),⍞000D    exp:    scalar  base-⍺ exponent of [ratnum],⍞000D    fix:    vector  leading, fixed part of mantissa,⍞000D    rep:    vector  trailing, repeated part of mantissa,⍞000D    rat:    scalar  boolean: 1 if the repesentation is exact.⍞000D⍞000D        ⍕ 369+÷7                ⍝ primitive ⍕-format of number (⎕pp=17).⍞000D    369.14285714285717⍞000D⍞000D        10 ary 369+÷7           ⍝ [ary]-formatted number.⍞000D    369.142857142857...⍞000D⍞000D        ¯10 ary 369+÷7          ⍝ [ary]-unformatted (sig exp fix rep rat)⍞000D    ┌─┬─┬─────┬───────────┬─┐⍞000D    │1│3│3 6 9│1 4 2 8 5 7│1│⍞000D    └─┴─┴─────┴───────────┴─┘⍞000D⍞000DTechnical notes:⍞000D⍞000DThe inner conditional formatting function is derived from the power operator ⍣:⍞000D⍞000D    ofmt←{                              ⍝ optional formatting.⍞000D        ...⍞000D    }⍣(⍺>0)         ⍝ NB: ⍣(⍺>0)        ⍝ :: [char] ← ∇ (sig exp fix rep rat)⍞000D    ...⍞000D    q=1:ofmt sign(exp+1)(,1)⍬ 1         ⍝ base*n: special case.⍞000D    ofmt sign exp,⍬ digs p×base         ⍝ optional formatting of ⍺-ary number.⍞000D⍞000DThis is slightly neater than passing ⍺ and testing it in the first line:⍞000D⍞000D    ofmt←{                              ⍝ optional formatting.⍞000D        ⍺>0:⍵                           ⍝ no formatting: done.⍞000D        ...⍞000D    }                                   ⍝ :: [char] ← ∇ (sig exp fix rep rat)⍞000D    ...⍞000D    q=1:⍺ ofmt sign(exp+1)(,1)⍬ 1       ⍝ base*n: special case.⍞000D    ⍺ ofmt sign exp,⍬ digs p×base       ⍝ optional formatting of ⍺-ary number.⍞000D⍞000Dor, worse, using guards to determine whether to apply the function:⍞000D⍞000D    ofmt←{                              ⍝ optional formatting.⍞000D        ...⍞000D    }                                   ⍝ :: [char] ← ∇ (sig exp fix rep rat)⍞000D    ...⍞000D    z1←sign(exp+1)(,1)⍬ 1               ⍝ base*n: special case.⍞000D    zn←sign exp,⍬ digs p×base           ⍝ optional formatting of ⍺-ary number.⍞000D    rslt←(q=1)⊃zn z1                    ⍝ special or regular result.⍞000D    (⍺<0):rslt                          ⍝ -ive base: (sig exp fix rep rat)⍞000D    ofmt rslt                           ⍝ +ive base: ''nnn.fff...''⍞000D⍞000D⍞000D[ary] uses {⍵ 1÷1∨⍵} to find a rational number ⎕CT-tolerably close to its "real"⍞000Dargument ⍵.  This means that the accuracy of the result is restricted to at most⍞000D(|⍺)⍟÷⎕CT digits.⍞000D⍞000DIf  [ary] fails to find a repetition sequence in the mantissa within this limit-⍞000Ding number of digits, it will assume the number is irrational.  In this case, it⍞000Dreports a non-exact result by appending ''?'' to the formatted form or returning 0⍞000Das the "rat" item of the unformatted form.⍞000D⍞000D        ⎕ct←1e¯14           ⍝ default comparison tolerance:⍞000D⍞000D        10ary ÷17           ⍝ fails to find repetition sequence.⍞000D    0.058823529411765?⍞000D⍞000D        ⎕ct←1e¯15           ⍝ finer comparison tolerance:⍞000D⍞000D        10ary ÷17           ⍝ additional digit; still non-exact.⍞000D    0.0588235294117647?⍞000D⍞000D        ⎕ct←1e¯16           ⍝ finer still comparison tolerance:⍞000D⍞000D        10ary ÷17           ⍝ exact result with repeated sequence.⍞000D    0.058823529411764705882352941176470...⍞000D    ⍝  └──────────────┘└──────────────┘⍞000D⍞000D⍞000D        ⎕ct←1e¯14 ⋄ ¯10ary ÷17                  ⍝ ⎕CT=1E¯14: inexact.⍞000D    ┌─┬──┬───────────────────────────┬┬─┐⍞000D    │1│¯1│5 8 8 2 3 5 2 9 4 1 1 7 6 5││0│⍞000D    └─┴──┴───────────────────────────┴┴─┘⍞000D⍞000D        ⎕ct←1e¯16 ⋄ ¯10ary ÷17                  ⍝ ⎕CT=1E¯16: exact.⍞000D    ┌─┬──┬┬───────────────────────────────┬─┐⍞000D    │1│¯1││5 8 8 2 3 5 2 9 4 1 1 7 6 4 7 0│1│⍞000D    └─┴──┴┴───────────────────────────────┴─┘⍞000D⍞000DExamples:⍞000D⍞000D    10 ary ÷27              ⍝ exact rational number (note repeated sequence).⍞000D0.0370370...⍞000D⍞000D    10 ary 2*÷2             ⍝ irrational number (note trailing ? digit).⍞000D1.4142135623731?⍞000D⍞000D    16 ary ○1               ⍝ (irrational) Pi in hex.⍞000D3.243F6A8885A?⍞000D⍞000D    3ary 0.25               ⍝ one quarter in ternary.⍞000D0.02020...⍞000D⍞000D    2ary 1.1                ⍝ finite decimal → repeating binary.⍞000D1.000110011...⍞000D⍞000D    ¯3 ary ¯12345           ⍝ negative whole ternary number (exact).⍞000D┌──┬─┬───────────────┬┬─┐⍞000D│¯1│9│1 2 1 2 2 1 0 2││1│⍞000D└──┴─┴───────────────┴┴─┘⍞000D⍞000D    ¯16 ary *1              ⍝ hexadecimal irrational (inexact).⍞000D┌─┬─┬───────────────────────────┬┬─┐⍞000D│1│1│2 11 7 14 1 5 1 6 2 8 10 15││0│⍞000D└─┴─┴───────────────────────────┴┴─┘⍞000D⍞000DSee also: adic esh ratrep bt phinary⍞000DSee also: numbers⍞000D⍞000DIndex:rational number|binary|ternary|IEEE FP precision' 
