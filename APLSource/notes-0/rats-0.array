'rslt ← {larg} (fn ##.rats) rarg             ⍝ Rational arithmetic.⍞000Drslt ← (land      ##.rats) rarg             ⍝ Rational number.⍞000D⍞000D[rats]  provides  accurate  conversion  and arithmetic for non-negative rational⍞000Dnumbers.⍞000D⍞000DNB: [rats] deals only in single (scalar) numbers, rather than whole arrays.⍞000D⍞000DCalled with a natural number left operand, rats converts [land] and [rarg] to an⍞000Dinternal form.⍞000D⍞000D        r ← 16 rats 9           ⍝ internal form of rational number 16r9.⍞000D        s ←  1 rats 2           ⍝   ..      ..      ..      ..      1r2.⍞000D⍞000DOtherwise, the operand is a function chosen from monadic ⍕ or ⍎:⍞000D⍞000D        rfmt ← ⍕rats            ⍝ ⍕ r-format.⍞000D        real ← ⍎rats            ⍝ ⍎ approx real equivalent.⍞000D⍞000D        rfmt¨ r s               ⍝ r-format of rational numbers.⍞000D     16r9  1r2⍞000D⍞000D        real¨ r s               ⍝ approx real equivalent of rational numbers.⍞000D    1.7778 0.5⍞000D⍞000Dor from one of the dyadic functions + - × ÷ * ∨ ∧:⍞000D⍞000D        rfmt r +rats s          ⍝ + sum of rational numbers 16r9 + 1r2⍞000D    41r18⍞000D⍞000D        rfmt r -rats s          ⍝ - difference  ·   ·   ·   16r9 - 1r2⍞000D    23r18⍞000D⍞000D        rfmt r ×rats s          ⍝ × product ·   ·   ·   ·   16r9 × 1r2⍞000D    8r9⍞000D⍞000D        rfmt r ÷rats s          ⍝ ÷ quotient    ·   ·   ·   16r9 ÷ 1r2⍞000D    32r9⍞000D⍞000D        rfmt r *rats s          ⍝ * power       ·   ·   ·   16r9 * 1r2⍞000D    4r3⍞000D⍞000D        rfmt r ∨rats s          ⍝ ∨ gcd ·   ·   ·   ·   ·   16r9 ∨ 1r2⍞000D    1r18⍞000D⍞000D        rfmt r ∧rats s          ⍝ ∧ lcm ·   ·   ·   ·   ·   16r9 ∧ 1r2⍞000D    16r1⍞000D⍞000D[rats]  assumes the presence of function →factors←, which it calls when it needs⍞000Dto  determine the prime factors of an argument. In practice, this happens relat-⍞000Dively infrequently.⍞000D⍞000DTechnical notes⍞000D---------------⍞000DA rational  number ⍺r⍵ is conveniently represented as a pair [P Q] of vectors of⍞000Dprime  factors  and corresponding powers. Within [rats] these vectors are stored⍞000Das a 2-row simple integer matrix.⍞000D⍞000DFor example: the rational number 28r75 has P≡(2 7 3 5) and Q≡(2 1 ¯1 ¯2):⍞000D⍞000D        28 rats 75              ⍝ internal form of 28r75.⍞000D    2 7  3  5⍞000D    2 1 ¯1 ¯2⍞000D⍞000DPositive  powers contribute to the numerator and negative ones to the denominat-⍞000Dor. The approximate real equivalent of [P Q] is thus: P×.*Q.⍞000D⍞000D        28÷75                   ⍝ approx real 28r75⍞000D    0.37333⍞000D⍞000D        ×/*⌿ 28 rats 75         ⍝   ..      ..⍞000D    0.37333⍞000D⍞000DThis  representation  makes  arithmetic particularly straightforward. Almost all⍞000Doperations  are  expressed in terms of factor matrices and even sums and differ-⍞000Dences  are  applied only to what remains after common factors have been removed.⍞000DThis  means that the relatively expensive factoring of large numbers into primes⍞000Dis reduced to a minimum.⍞000D⍞000DNormal Form⍞000D-----------⍞000DSubfunction  [norm] normalises its argument by collecting like factors and summ-⍞000Ding  their  powers.  The sum of powers with differing signs is equivalent to the⍞000Dcancelling operation, when dealing with fractions.⍞000D⍞000DIn  addition,  [norm]  removes  factors-of-power-0, and powers-of-factor-1. This⍞000Dmeans that the structure for rational number 1r1 is a 0-column matrix:⍞000D⍞000D        display 1 rats 1                ⍝ 1r1 - 0-column matrix.⍞000D    ┌⊖┐⍞000D    ↓0│⍞000D    │0│⍞000D    └~┘⍞000D⍞000DFinally, as 0r1, 0r2, ·· 0r<anything> are equivalent, [norm] chooses 0r1.⍞000D⍞000DNB: [norm] does not arrange factor-power columns in any particular order, so the⍞000Dfollowing are equivalent normal forms:⍞000D⍞000D        r35 r53                         ⍝ equivalent expressions of 15r1⍞000D    ┌───┬───┐⍞000D    │3 5│5 3│⍞000D    │1 1│1 1│⍞000D    └───┴───┘⍞000D⍞000D        ⍕rats¨ r35 r53                  ⍝ r-formats are identical.⍞000D     15r1  15r1⍞000D⍞000DProduct ×⍞000D---------⍞000DThe product of two rational structures is just the normalisation of their caten-⍞000Dation!⍞000D⍞000D        mul ← {norm ⍺,⍵}                ⍝ ⍺×⍵   (⍺ and ⍵ are rational numbers).⍞000D                                           ¯⍞000DQuotient ÷⍞000D----------⍞000DThe integer power of a rational number [P Q]*⍵ = [P Q×1 ⍵].⍞000D⍞000D        expn ← {↑1 ⍵×↓⍺}                ⍝ ⍺*⍵   (⍺ is rational, ⍵ is integer).⍞000Dor⍞000D        expn ← {1 ⍵×[⎕io]⍺}             ⍝ ... according to taste.⍞000DSo:⍞000D        (28 rats 75)∘expn¨1 2 3         ⍝ 28r75 * 1 2 3⍞000D    ┌─────────┬─────────┬─────────┐⍞000D    │2 7  3  5│2 7  3  5│2 7  3  5│⍞000D    │2 1 ¯1 ¯2│4 2 ¯2 ¯4│6 3 ¯3 ¯6│⍞000D    └─────────┴─────────┴─────────┘⍞000D⍞000DIn particular, expn∘¯1 returns the _reciprocal_ of its rational argument:⍞000D⍞000D        {⍵∘expn¨1 ¯1} 28 rats 75        ⍝ 28r75 * 1 ¯1⍞000D    ┌─────────┬─────────┐⍞000D    │2 7  3  5│ 2  7 3 5│⍞000D    │2 1 ¯1 ¯2│¯2 ¯1 1 2│⍞000D    └─────────┴─────────┘⍞000D⍞000Dso we can use expn to implement division:⍞000D⍞000D        div ← {norm ⍺,⍵ expn ¯1}        ⍝ ⍺÷⍵   (⍺ and ⍵ rational).⍞000D                                           ¯⍞000DNext, notice that function 0∘⌈ returns the (un-normalised) numerator:⍞000D⍞000D          0∘⌈ 28 rats 75                ⍝ 28r1⍞000D    2 7 3 5⍞000D    2 1 0 0⍞000D⍞000D        real 0∘⌈ 28 rats 75             ⍝ 28r1⍞000D    28⍞000D⍞000Dand applied to the reciprocal, reveals the denominator:⍞000D⍞000D        {0⌈⍵∘expn¨1 ¯1} 28 rats 75     ⍝ 28r75 → 28 75⍞000D    ┌───────┬───────┐⍞000D    │2 7 3 5│2 7 3 5│⍞000D    │2 1 0 0│0 0 1 2│⍞000D    └───────┴───────┘⍞000D⍞000D        sepr ← {0⌈⍵∘expn¨1 ¯1}          ⍝ separate numerator/denominator.⍞000D⍞000D        real¨ sepr 28 rats 75           ⍝ round trip: (28 75) → 28r75 → (28 75)⍞000D    28 75⍞000D⍞000DPower *⍞000D-------⍞000DThe _rational_ power of a rational number:⍞000D·⍞000D    [P Q]*[R S] = [P X],⍞000D        where X = Q×R×.*S,⍞000D            as long as X≡⌊X,⍞000D                otherwise, error "irrational".⍞000D·⍞000D    4r9 * 3r2 → 8r27⍞000D·⍞000D    2r1 * 1r2 → irrational    (square root of 2).⍞000D⍞000DGCD ∨  /  LCM ∧⍞000D---------------⍞000DWe  can  extract greatest-common-divisor and least-common-multiple directly from⍞000Dthe factors of a pair of normalised rational numbers.⍞000D⍞000DIf  two  _whole_ numbers have normal rational forms [P Q] and [R S] (which means⍞000Dthat vectors Q and S have no negative items) then:⍞000D⍞000D    [P Q] ∨ [R S]  =  [PiR QnS],                ⍝ ∨ ----------------------gcd[1]⍞000D          ¯⍞000D    where:⍞000D⍞000D        PiR is the intersection of factor vectors P and R and⍞000D                   ¯¯¯¯¯¯¯¯¯¯¯¯⍞000D        QnS is the minimum of power vectors Q and S within the intersection.⍞000D                   ¯¯¯¯¯¯¯                          ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯⍞000Dand⍞000D    [P Q] ∧ [R S]  =  [PuR QxS],                ⍝ ∧ ----------------------lcm[1]⍞000D          ¯⍞000D    where:⍞000D⍞000D        PuR is the union of factor vectors P and R and⍞000D                   ¯¯¯¯¯⍞000D        QxS is the maximum of power vectors Q and S within the union.⍞000D                   ¯¯¯¯¯¯¯                          ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯⍞000DFor example:⍞000D⍞000D          90 rats 1                             ⍝ [(2 3 5)(1 2 1)]⍞000D    2 3 5⍞000D    1 2 1⍞000D⍞000D          84 rats 1                             ⍝ [(2 3 7)(2 1 1)]⍞000D    2 3 7⍞000D    2 1 1⍞000D⍞000D          (90 rats 1)∨rats 84 rats 1            ⍝ gcd ∨: intersection / minimum.⍞000D    2 3⍞000D    1 1⍞000D⍞000D          (90 rats 1)∧rats 84 rats 1            ⍝ lcm ∧: union / maximum.⍞000D    2 3 5 7⍞000D    2 2 1 1⍞000D⍞000DSecondly, if a, b, c and d are whole numbers, then in general:⍞000D⍞000D    (a÷b) ∨ (c÷d)  =  (a∨c) ÷ (b∧c)             ⍝ ∨ ----------------------gcd[2]⍞000D⍞000D    (a÷b) ∧ (c÷d)  =  (a∧c) ÷ (b∨c)             ⍝ ∧ ----------------------lcm[2]⍞000D⍞000DLet ⌈P Q] and ⌊P Q] be notation for the numerator and denominator of [P Q]⍞000D⍞000D    ⌈P Q]  =  num ← {norm 0⌈⍵}                  ⍝ numerator.⍞000D    ⌊P Q]  =  den ← {norm 0⌈⍵ expn ¯1}          ⍝ denominator.⍞000D⍞000DFor example:⍞000D⍞000D    if⍞000D        [P Q] = [(2 3 5 7)(¯1 2 1 ¯3)]⍞000D    then⍞000D        ⌈P Q]  =  [(3 5)(2 1)]                  ⍝ numerator.⍞000D⍞000D        ⌊P Q]  =  [(2 7)(1 3)]                  ⍝ denominator.⍞000D    and⍞000D        [P Q]  = ⌈P Q] × ⌊P Q] * ¯1             ⍝ numerator × ÷ denominator.⍞000D                       ¯⍞000Dtherefore:⍞000D⍞000D    [P Q] ∨ [R S]⍞000D          ¯⍞000D⍞000D    ⌈P Q]   ⌈R S]                               ⍝ defn of ⌈...] and ⌊...]⍞000D=>  ----- ∨ -----⍞000D    ⌊P Q] ¯ ⌊R S]⍞000D⍞000D⍞000D    ⌈P Q]∨⌈R S]                                 ⍝ from gcd[2] above.⍞000D=>  -----------⍞000D    ⌊P Q]∧⌊R S]⍞000D⍞000D⍞000D    [PiR QnS]                                   ⍝ from gcd[1] above.⍞000D=>  ---------⍞000D    [PuR QxS]⍞000D⍞000D⍞000D=>  [PiR QnS], [PuR QxS] * ¯1                   ⍝ as in the quotient case.⍞000D⍞000DSimilarly, for lcm (∧):⍞000D⍞000D    [P Q] ∧ [R S]⍞000D          ¯⍞000D⍞000D    ⌈P Q]   ⌈R S]                               ⍝ defn of ⌈...] and ⌊...]⍞000D=>  ----- ∧ -----⍞000D    ⌊P Q] ¯ ⌊R S]⍞000D⍞000D⍞000D    ⌈P Q]∧⌈R S]                                 ⍝ from lcm[2] above.⍞000D=>  -----------⍞000D    ⌊P Q]∨⌊R S]⍞000D⍞000D⍞000D    [PuR QxS]                                   ⍝ from lcm[1] above.⍞000D=>  ---------⍞000D    [PiR QnS]⍞000D⍞000D⍞000D=>  [PuR QxS], [PiR QnS] * ¯1                   ⍝ as in the quotient case.⍞000D⍞000D⍞000DSum / difference⍞000D----------------⍞000DIn general, for numbers A and B and any N≠0:⍞000D⍞000D                  ┌  A     B  ┐⍞000D    A + B  =  N × │ --- + --- │⍞000D      ¯           └  N  ¯  N  ┘⍞000D⍞000DIf  we  choose N = A∨B (greatest common divisor of A and B), then both (A÷N) and⍞000D(B÷N)  are  whole numbers and may be added (resp. subtracted) directly. Further,⍞000D(A÷N)  and  (B÷N)  are the smallest whole numbers for which this holds, so their⍞000Dsum (resp. difference) is as small as possible and so easiest to re-factorise.⍞000D⍞000D(muse:⍞000D⍞000D    sum/difference deals separately with zero arguments.  Zero seems (to JMS) to⍞000D    be, let''s say, an uneasy member of the set of rational numbers.⍞000D⍞000D    sum←{                           ⍝ sum (difference).⍞000D        0∊⍵:⍺                       ⍝ ⍺+0 → ⍺, ⍺-0 → ⍺⍞000D        0∊⍺:⍵×nchk ⍺⍺ 1             ⍝ 0+⍵ → ⍵, 0-⍵ → error⍞000D        mul←⍺ gcd ⍵                 ⍝ gcd multiplier⍞000D        ...⍞000D)⍞000D⍞000DExamples:⍞000D⍞000D    factors¨28 75                       ⍝ prime factors.⍞000D 2 2 7  3 5 5⍞000D⍞000D    28 rats 75                          ⍝ rational representation.⍞000D2 7  3  5⍞000D2 1 ¯1 ¯2⍞000D⍞000D    ⍕rats 28 rats 75                    ⍝ r-format.⍞000D28r75⍞000D⍞000D    ⍎rats 28 rats 75                    ⍝ approx real number equivalent.⍞000D0.3733333333⍞000D⍞000D    ⍝ We can make a translator for simple expressions of rational scalars:⍞000D⍞000D    rexp←{⍺←''r''                         ⍝ simple r-expression translator.⍞000D        rat←{'')'',⍵,''rats(''}             ⍝ ⍵ → )⍵rats(⍞000D        svec←rat\¨2/¨''+-×÷*∧^∨⍎⍕''       ⍝ subs pair for each op fn.⍞000D        src←↑subs/(svec,⊂⍺'' rats ''),⊂⍵  ⍝ translated source. See →subs←.⍞000D        ''('',src,'')''                     ⍝ source for apl expression.⍞000D    }⍞000D⍞000D    rexp''2r3 + 3r4''                     ⍝ r-expression translation.⍞000D(2 rats 3 )+rats( 3 rats 4)⍞000D⍞000D    eval ← ⍕rats∘⍎∘rexp                 ⍝ r-expression evaluation.⍞000D⍞000D    eval '' 36r140 ''                     ⍝ simplify.⍞000D9r35⍞000D⍞000D    eval ''1r2 + 1r3''                    ⍝ sum.⍞000D5r6⍞000D⍞000D    eval ''1r2 - 1r3''                    ⍝ difference.⍞000D1r6⍞000D⍞000D    eval ''3r4 × 2r3''                    ⍝ product.⍞000D1r2⍞000D⍞000D    eval ''2r3 ÷ 2r3''                    ⍝ quotient.⍞000D1r1⍞000D⍞000D    eval ''4r9 * 3r2''                    ⍝ power⍞000D8r27⍞000D⍞000D    eval ''2r5 ∨ 3r5''                    ⍝ gcd.⍞000D1r5⍞000D⍞000D    eval ''2r5 ∧ 3r5''                    ⍝ lcm.⍞000D6r5⍞000D⍞000D    eval '' (1r2 × 3r4) + 1r8 ''          ⍝ more complex expression.⍞000D1r2⍞000D⍞000DSee also: pco factors rational subs gcd nats bt ary⍞000DSee also: numbers⍞000D⍞000DIndex:rational number|prime number⍞000DIndex:greatest common divisor|least common multiple' 
