'rslt ← (⍺⍺ ##.each) array               ⍝ Fast each for pure operand function.⍞000D⍞000DMike Day''s each operator indentifies unique items in its  argument  [array]  and⍞000Dapplies monadic operand function ⍺⍺ only once to each in turn.  It then distrib-⍞000Dutes the resulting items among any duplicates.⍞000D⍞000DIf⍞000D    The operand function takes a significant time to evaluate,⍞000D    But has no side-effects,⍞000D    And the argument array has a significant number of duplicate items,⍞000DThen⍞000D    [each] may produce a significant time saving.⍞000D⍞000DExamples:⍞000D⍞000D⍝ This rather contrived example takes only 3 seconds to run:⍞000D⍞000D      ⎕ ← ⎕dl each time ?10 10⍴2⍞000D03.00⍞000D1 2 1 2 1 1 2 2 2 1⍞000D2 2 1 1 2 2 1 1 1 1⍞000D2 2 2 2 2 1 2 1 2 2⍞000D2 1 1 2 1 2 2 2 1 1⍞000D2 2 2 2 1 2 2 1 1 2⍞000D1 1 1 1 1 1 2 2 1 2⍞000D2 2 1 2 1 1 1 2 1 2⍞000D1 1 2 2 1 2 1 2 2 2⍞000D1 1 2 2 2 2 2 2 2 1⍞000D1 1 2 2 2 1 2 1 1 2⍞000D⍞000D    count←0                             ⍝ count of operand function calls.⍞000D⍞000D    {count+←1 ⋄ ⍵+1}¨ 5 5⍴1 2 3         ⍝ primitive each:⍞000D2 3 4 2 3⍞000D4 2 3 4 2⍞000D3 4 2 3 4⍞000D2 3 4 2 3⍞000D4 2 3 4 2⍞000D⍞000D    ⎕ count ← count 0                   ⍝ operand function called 25 times.⍞000D25⍞000D⍞000D    {count+←1 ⋄ ⍵+1}each 5 5⍴1 2 3      ⍝ [each]: same result:⍞000D2 3 4 2 3⍞000D4 2 3 4 2⍞000D3 4 2 3 4⍞000D2 3 4 2 3⍞000D4 2 3 4 2⍞000D⍞000D    count                               ⍝ operand functin called only 3 times.⍞000D3⍞000D⍞000DSee also: sam time⍞000D⍞000DIndex:each|pure function⍞000DIndex;Day M.' 
