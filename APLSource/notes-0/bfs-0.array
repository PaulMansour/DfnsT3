'Classic Breadth-First Search⍞000D----------------------------⍞000DDijkstra''s classic breadth-first search algorithm  maintains a _queue_ of yet-to⍞000D-be-visited vertices. Items are taken one at a time from the front of the queue,⍞000Dand unvisited vertices  reachable from the head item are added to the back.  The⍞000Dalgorithm terminates when the queue is empty.⍞000D⍞000DAn APL coding of the classic algorithm might look like this:⍞000D⍞000D    search←{                        ⍝ Classical breadth-first search.⍞000D        graph←⍺                     ⍝ ⍺ is graph vector.⍞000D        ⍬{                          ⍝ no vertices visited.⍞000D            ⍵≡⍬:⍺                   ⍝ no vertices left: done.⍞000D            head←1↑⍵ ⋄ tail←1↓⍵     ⍝ next and remaining vertices in queue.⍞000D            next←head⊃graph         ⍝ vertices adjacent to head.⍞000D            (⍺,head)∇(tail∪next)~⍺  ⍝ accumulate visited vertices.⍞000D        }⍵                          ⍝ from starting vertex.⍞000D    }⍞000D⍞000DThe  inner tail-recursive function uses ⍺ as an accumulator for vertices already⍞000Dvisited,  and ⍵ as a queue for those still to be visited. By appending new vert-⍞000Dices  to  the back of the queue and removing them from the front, we are assured⍞000Dof visiting nearer vertices before more remote ones.⍞000D⍞000DUsing the following graph as an example:⍞000D⍞000D    graph←(2 5)(1 3 6)(2 4 7)(3 8)(1 6 9)(2 5)(3 8)(4 7 12)(5 10 13)(9 14)(12 15)(8 11 16)(9 14)(10 13 15)(11 14 16)(12 15)⍞000D⍞000D    1───────2───────3───────4       Graph Vertex numbers:⍞000D    │       │       │       │⍞000D    │       │       │       │⍞000D    │       │       │       │⍞000D    5───────6       7───────8⍞000D    │                       │⍞000D    │                       │⍞000D    │                       │⍞000D    9──────10      11──────12⍞000D    │       │       │       │⍞000D    │       │       │       │⍞000D    │       │       │       │⍞000D   13──────14──────15──────16⍞000D⍞000DBreadth-first search from vertex 1 visits vertices in the following order:⍞000D⍞000D   [1]─────[2]─────[4]─────[7]      BREADTH-first order of visits:⍞000D    │       │       │       │⍞000D    │       │       │       │⍞000D    │       │       │       │⍞000D   [3]─────[5]     [8]─────[11]⍞000D    │                       │⍞000D    │                       │⍞000D    │                       │⍞000D   [6]─────[9]     [15]────[13]⍞000D    │       │       │       │⍞000D    │       │       │       │⍞000D    │       │       │       │⍞000D   [10]────[12]────[14]────[16]⍞000D⍞000DThe  function may be changed to produce a depth-first search, by _prefixing_ new⍞000Dvertices to the queue, which then operates as a stack. See →dfspan←.⍞000D⍞000D   [1]─────[2]─────[3]─────[4]      DEPTH-first order of visits:⍞000D    │       │       │       │⍞000D    │       │       │       │⍞000D    │       │       │       │⍞000D   [13]────[14]    [6]─────[5]⍞000D    │                       │⍞000D    │                       │⍞000D    │                       │⍞000D   [12]────[11]    [8]─────[7]⍞000D    │       │       │       │⍞000D    │       │       │       │⍞000D    │       │       │       │⍞000D   [15]────[10]────[9]─────[16]⍞000D⍞000DRef: Dijkstra, E.W. (1959), "A note on two problems in connection with graphs."⍞000D     Numerische Mathematik, (1), pp. 269-271.⍞000D⍞000DParallel Breath-First Search⍞000D----------------------------⍞000DIn APL we can process ALL vertices at the same distance from the starting vertex⍞000Din parallel. For non-trivial graphs, this leads to a significant performance im-⍞000Dprovement.  Conceptually, starting from the originating vertext ⍵, the algorithm⍞000Dgenerates  a  "fringe" or "wave", which ripples outwards in all possible direct-⍞000Dions through the graph. At each pass of the algorithm, the wave front is advanc-⍞000Ded one step further from the starting vertex.⍞000D⍞000D    search←{                    ⍝ Parallel breadth-first search.⍞000D        graph←⍺                 ⍝ ⍺ is graph vector.⍞000D        ⍵{                      ⍝ from starting vertex.⍞000D            ⍵≡⍬:⍺               ⍝ no unvisited vertices: done.⍞000D            adjv←graph[⍵]       ⍝ nested vector of ALL adjacent vertices.⍞000D            next←∪(↑,/adjv)~⍺   ⍝ simple vector of next unvisited vertices.⍞000D            (⍺,next)∇ next      ⍝ advance wave of visited vertices.⍞000D        }⍵                      ⍝ from starting vertex.⍞000D    }⍞000D⍞000DUsing graph as above:⍞000D⍞000D   [1]─────[2]─────[3]─────[4]      PARALLEL BREADTH-first order of visits:⍞000D    │       │       │       │⍞000D    │       │       │       │⍞000D    │       │       │       │⍞000D   [2]─────[3]     [4]─────[5]⍞000D    │                       │⍞000D    │                       │⍞000D    │                       │⍞000D   [3]─────[4]     [7]─────[6]⍞000D    │       │       │       │⍞000D    │       │       │       │⍞000D    │       │       │       │⍞000D   [4]─────[5]─────[6]─────[7]⍞000D⍞000DSee also: dfspan Graphs wGraphs⍞000D⍞000DIndex:breadth-first search|queue|graph⍞000DIndex;Dijkstra E.W.' 
