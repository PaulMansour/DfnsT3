'{ok} ← {opts←''q''} ##.test script        ⍝ Run test script: no news => good news.⍞000D⍞000DNamespace _scripts_ contains character-vector test scripts,  which  exercise the⍞000Dfunctions and operators in this workspace. In general, test''s argument is a vec-⍞000Dtor or matrix of the names of scripts to be executed. For example:⍞000D⍞000D      test''display''     ⍝ test display function.⍞000D⍞000D      test''hex'' ''dec''   ⍝ test functions: hex and dec.⍞000D⍞000D      test ⎕nl 4        ⍝ test scripts for all operators.⍞000D⍞000DAs a convenience, right argument '''' is interpreted as (scripts.⎕nl 2),  a matrix⍞000Dof all scripts, except for those starting with ''_''.   Such names may be used for⍞000Dauxiliary sub-scripts, which are not intended to be run in isolation.⍞000D⍞000DDuring test''s evaluation of each script, differences between actual and expected⍞000Dresults  are displayed in the session; the shy result is a boolean vector indic-⍞000Dating which scripts succeeded without fault.⍞000D⍞000DIf  a  difference  is detected, the script name, and expected and actual results⍞000Dare shown in the form:⍞000D⍞000D    name expected → actual⍞000D⍞000DBlanks  in  expected and actual results are replaced with ''·'' characters to show⍞000Dwhere differences may be attributed to spacing. A common example of this is with⍞000Dnested arrays, where the display form often contains trailing blanks.⍞000D⍞000D      ⍳1 2              ⍝ nested array.⍞000D 1 1  1 2⍞000D⍞000D      '' ·''subs ⍕⍳1 2    ⍝ note trailing blank in output:⍞000D·1·1··1·2·⍞000D⍞000DIn  this case, expected trailing blanks must be present in the script, otherwise⍞000Ddifferences will be reported.⍞000D⍞000DOptional left argument [opts] determines:⍞000D⍞000D    ''q'' quietly execute each script (default),⍞000D    ''v'' (verbosely) show the progress of each script.⍞000D    ''e'' edit script(s).⍞000D    ''l'' list script names, for example: cols''l''test''''.⍞000D    ''s'' stop on difference and display the actual result in an edit window.⍞000D⍞000DOption ''s'' is useful when developing scripts. When a difference is detected, ex-⍞000Decution is paused and the actual result is presented in an edit window.  If this⍞000Dnew value is acceptable,  just copy it into the clipboard;  close the window and⍞000Dthen paste it into the script edit-window at the appropriate place.  On  closing⍞000Dscript-window, execution will proceed until the  end  of  the  script or another⍞000Ddifference is detected.⍞000D⍞000DThe left argument value is set in variable "Alpha", which is visible from within⍞000Dthe script. This is useful, for example, in passing the "show progress" value to⍞000Da recursive call on test. For example, a script may contain the lines:⍞000D⍞000D        Alpha test ''_sub''       ⍝ pass verbose option to auxiliary script.⍞000D    1⍞000D⍞000DScripts may contain :If control structures for conditional inclusion of tests.⍞000D⍞000D    :If 80=⎕dr'' ''⍞000D        ... unicode-specific tests⍞000D    :Else⍞000D        ... classic-specific tests⍞000D    :EndIf⍞000D⍞000DNote  that  variables  and (even multi-line) functions defined in the script are⍞000Dlocal  to  that  script.  An example of a script might be the following newline-⍞000Ddelimited character vector:⍞000D⍞000D          display scripts.sample⍞000D┌→──────────────────────────────────────────────────┐⍞000D│      ⍝ Sample Script                              │⍞000D│                                                   │⍞000D│      cvec ← 1↓''                                   │⍞000D│mult-line                                          │⍞000D│character                                          │⍞000D│vector''                 ⍝ Temp variable.           │⍞000D│                                                   │⍞000D│      dup←{             ⍝ Temp function.           │⍞000D│          ⍵ ⍵                                      │⍞000D│      }                                            │⍞000D│                                                   │⍞000D│      disp dup cvec     ⍝ disp available to script.│⍞000D│┌→────────┬─────────┐                              │⍞000D││mult-line│mult-line│                              │⍞000D││character│character│                              │⍞000D││vector   │vector   │                              │⍞000D│└────────→┴────────→┘                              │⍞000D│                                                   │⍞000D│:If ''v''∊Alpha       ⍝ verbose mode:                │⍞000D│        ''Sqrt ¯1:'',¯1*÷2                           │⍞000D│    Sqrt ¯1: 0J1                                   │⍞000D│:Else                                              │⍞000D│        ¯1*÷2                                      │⍞000D│    0J1                                            │⍞000D│:EndIf                                             │⍞000D└───────────────────────────────────────────────────┘⍞000D⍞000DIt  is  easy  to add extra tests to a script: we just execute a test case in the⍞000Dsession,  and if we''re sure the result is correct, copy and paste the input line⍞000Dand its result into the script. Note however, the following restrictions:⍞000D⍞000DBugs:⍞000D⍞000D[1] Some of the scripts will report differences unless [AutoFormat functions] is⍞000D    switched _off_, using the Session menu:⍞000D⍞000D    ┌──···Options···───────────────⍞000D    │ ┌──···Configure···─────────────⍞000D    │ │ ┌──···Trace/Edit···────────────⍞000D    │ │ │   ···⍞000D    │ │ │    [ ] AutoFormat functions⍞000D    │ │ │     ↑⍞000D    │ │ │     └── Uncheck box.⍞000D⍞000D    Or set environment variable AUTOFORMAT=0 in the calling line (or shell).⍞000D⍞000D[2] Test is currently confused by script lines that contain:⍞000D⍞000D    Embedded assignments:   ·   ·   ·   ·   ·   2+a←3⍞000D    Diamonds:   ·   ·   ·   ·   ·   ·   ·   ·   2+3 ⋄ 4+5⍞000D    Shy results:·   ·   ·   ·   ·   ·   ·   ·   ⎕ex''a''⍞000D    System commands ·   ·   ·   ·   ·   ·   ·   )erase a⍞000D    Quad output ·   ·   ·   ·   ·   ·   ·   ·   ⎕←...⍞000D    Assigned result of raw dfn application: ·   a←{...}0⍞000D    Assigned functions derived from dfns:   ·   f←{...}¨⍞000D⍞000D    (⍞000D        The  latter  two  problems occur because the lines are misinterpreted as⍞000D        simple dfn definitions. The test function could be more sophisticated in⍞000D        distinguishing  such  cases, but it is easy to avoid the error by coding⍞000D        it as: "a← {...}0" or "f← {...}¨" (with a blank after the ←), which con-⍞000D        founds the part of the code that is looking for dfns to fix.⍞000D    )⍞000D⍞000D[3] It would be nice to have :ElseIf, :Select/:Case[List] and :Return keywords.⍞000D⍞000DTechnical notes:⍞000D⍞000D[test] creates a temporary namespace in which to execute scripts, and into which⍞000Dall  root space functions and operators (#.⎕nl 3 4) are copied. Within the temp-⍞000Dorary space, the script is processed as follows:⍞000D⍞000D    Removing comments and ignoring blank lines:⍞000D⍞000D    If the next line contains an unclosed quoted vector⍞000D        form a multi-line character vector with the following line.⍞000D⍞000D    Otherwise, if the next line starts with a '':''⍞000D        process the :If/:Else/:End[If] control structure.⍞000D⍞000D    Otherwise, if the next line contains a dfn definition:⍞000D        identify and ⎕fx the single- or multiple-line dfn.⍞000D⍞000D    Otherwise, if the next line is an assign (''←'' at outer level):⍞000D        execute the assignment in the tmp space.⍞000D⍞000D    Otherwise:⍞000D        execute the expression and compare the result with following lines.⍞000D⍞000DExamples:⍞000D⍞000D      test''hex''                 ⍝ test hex function (no news is good news).⍞000D⍞000D      test''hex'' ''dec''           ⍝ test two scripts.⍞000D⍞000D      test scripts.⎕nl 2        ⍝ test all scripts.⍞000D⍞000D      (∧/test'''')/''ok''           ⍝ test all scripts.⍞000Dok⍞000D      test time''''               ⍝ time the test.⍞000D19.30⍞000D⍞000D    ''l'' test ''a'' ⎕nl 4          ⍝ scripts for a-operators.⍞000Dacc⍞000Dascan⍞000Dascana⍞000D⍞000D    ''q'' test''gcd'' ''osc''         ⍝ quiet: report only differences.⍞000D⍞000D    ''e'' test''gcd'' ''osc''         ⍝ edit script(s).⍞000D⍞000D    ''v'' test''gcd'' ''osc''         ⍝ verbose: show test running.⍞000D⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝ scripts.gcd⍞000D⍝ Greatest Common Divisor:⍞000D⍞000D      105 gcd 330⍞000D15⍞000D⍞000D      factors (3×5×7) gcd 5×7×11⍞000D5 7⍞000D⍞000D      lcm←{⍺×⍵÷⍺ gcd ⍵}                     ⍝ lowest common multiple⍞000D⍞000D      factors (3×5×7) lcm 5×7×11⍞000D3 5 7 11⍞000D⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝ scripts.osc⍞000D⍝ Oscillate - probably returns 1:⍞000D⍞000D      osc¨1 to 40⍞000D1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1⍞000D⍞000D      {2|⍵:1+3×⍵ ⋄ ⍵÷2}traj 27⍞000D27 82 41 124 62 31 94 47 142 71 214 107 322 161 484 242 121 364 182 91 274 137 4⍞000D⍞000D      12 206 103 310 155 466 233 700 350 175 526 263 790 395 1186 593 1780 890 4⍞000D⍞000D      45 1336 668 334 167 502 251 754 377 1132 566 283 850 425 1276 638 319 958⍞000D⍞000D      479 1438 719 2158 1079 3238 1619 4858 2429 7288 3644 1822 911 2734 1367 41⍞000D⍞000D      02 2051 6154 3077 9232 4616 2308 1154 577 1732 866 433 1300 650 325 976 48⍞000D⍞000D      8 244 122 61 184 92 46 23 70 35 106 53 160 80 40 20 10 5 16 8 4 2 1⍞000D⍞000DSee also: time⍞000D⍞000DIndex:quality assurance|unit testing|autoformat' 
