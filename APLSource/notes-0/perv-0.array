'rslt ← {lft} (fun ##.perv) rgt              ⍝ Scalar pervasion.⍞000D⍞000DThe function operand is applied between (or to in the monadic case)  correspond-⍞000Ding simple scalars in its argument(s).⍞000D⍞000DTechnical note:⍞000D⍞000D[perv]  is  closely  related to the dyadic form of operator →saw← (simple-array-⍞000Dwise).  The only difference is that [perv] applies its function operand  between⍞000D(or to) depth-0 arrays and →saw←, between depth-(0 or 1) arrays.⍞000D⍞000DWe  could  parameterize  the  maximum  depth at which the function is applied by⍞000Dpassing it as a right operand:⍞000D⍞000D    wwaw←{                  ⍝ Function operand applied ⍵⍵-Array-Wise.⍞000D        ⍵⍵≥¯1+|≡⍺ ⍵:⍺ ⍺⍺ ⍵  ⍝ Both shallow enough: apply operand.⍞000D        ⍵⍵≥|≡⍵:∇∘⍵¨⍺        ⍝ ⍵ shallow: traverse ⍺.⍞000D        ⍵⍵≥|≡⍺:⍺∘∇¨⍵        ⍝ ⍺ shallow: traverse ⍵.⍞000D        ⍺ ∇¨⍵               ⍝ Both deep: traverse both.⍞000D    }⍞000D⍞000DRemember  that  in Dyalog, vector strands bind tighter than operands. This means⍞000Dthat it may be necessary to separate the right operand from the argument:⍞000D⍞000D    aaa (, wwaw 0) bbb      ⍝ operand 0 separated from argument bbb.⍞000D    aaa , wwaw 0 ⌽ bbb      ⍝ parentheses unnecessary in this case.⍞000D⍞000DExample:⍞000D⍞000D    1(2 3) ,perv (4 5)6     ⍝ pervasive join⍞000D┌─────────┬─────────┐⍞000D│┌───┬───┐│┌───┬───┐│⍞000D││1 4│1 5│││2 6│3 6││⍞000D│└───┴───┘│└───┴───┘│⍞000D└─────────┴─────────┘⍞000D⍞000D    {⍵ ⍵}perv 1(2 3)        ⍝ pervasive "dup"⍞000D┌───┬─────────┐⍞000D│1 1│┌───┬───┐│⍞000D│   ││2 2│3 3││⍞000D│   │└───┴───┘│⍞000D└───┴─────────┘⍞000D⍞000DSee also: saw rows truth_tables⍞000D⍞000DIndex:scalar-wise|pervasive function' 
