'rslt ← indx ##.from array                   ⍝ Select (1↓⍴⍵)-cells from array ⍵.⍞000D⍞000DGianluigi  Quario  suggests [from], an alternative to "square-bracket" indexing:⍞000Darray[···;···;···].⍞000D⍞000D[indx]  is  a vector of simple indices, each item of which selects along an axis⍞000Dof [array]. In other words:⍞000D⍞000D    (inx1 inx2 ···) from array  ≡≡  array[inx1;inx2;···]⍞000D⍞000DThe number of items in [indx] must equal the rank of [array]:⍞000D⍞000D    (⍴indx) ≡ ⍴⍴array⍞000D⍞000DThe shape of [rslt] is the concatenation of the shapes of the items of [indx]:⍞000D⍞000D    (⍴rslt) ≡ ↑,/⍴¨indx⍞000D⍞000DA  special short-hand "null": (,⊂⍬) may be used for any item of the index vector⍞000Dto  mean "all items along this axis". It is equivalent to an elided subscript ;;⍞000Din conventional square-bracket indexing.⍞000D⍞000DTechnical notes:⍞000D⍞000DApart from the expansion of null indices, this function could be coded succinct-⍞000Dly  by  converting to "choose" indexing, using an outer product reduction of the⍞000Dindex arrays:⍞000D⍞000D    from←{⍞000D        ⍵[↑∘.,/⍺]⍞000D    }⍞000D⍞000DAs  selecting  from a scalar array requires a zero-length index, we must pad the⍞000Dreduction''s argument with a dummy item to avoid a domain error:⍞000D⍞000D    from←{⍞000D        ⍵[1↓¨↑∘.,/0,⍺]⍞000D    }     │ │     ││⍞000D          ├─┘     ├┘⍞000D          │       └──── prefix dummy item.⍞000D          └──────────── remove dummy items.⍞000D⍞000D    ⍬ from 42           ⍝ null select from scalar.⍞000D42⍞000D⍞000DPurists  who find square bracket indexing offensive (gnomoparenthiphobes? tetra-⍞000Dclaustrophobes?), might prefer to use the "pick each enclose" (chipmunk) idiom:⍞000D⍞000D    from←{⍞000D        (⊂¨1↓¨↑∘.,/0,⍺)⊃¨⊂⍵⍞000D    }⍞000D⍞000DWe could extend our function  to accommodate null indices  by borrowing from the⍞000D→select← function, although this would complicate and slow down the coding, con-⍞000Dsiderably.⍞000D⍞000D    from←{⍞000D        (⊂¨1↓¨↑∘.,/0,(⎕IO+⍺∊⊂,⊂⍬)⊃¨↑,¨/⊂¨¨⍺(⍳¨⍴⍵))⊃¨⊂⍵⍞000D    }                 ├────────┘ ├───────┘│ ├──┘⍞000D                      │          │        │ └──── full index vector per axis.⍞000D                      │          │        └────── supplied index vector.⍞000D                      │          └─────────────── select expanded nulls.⍞000D                      └────────────────────────── nulls in index vector.⍞000D⍞000DExamples:⍞000D⍞000D    _←,⊂⍬                       ⍝ special value: select all items along axis.⍞000D⍞000D    ⎕←a3←⍉10⊥⍉↑⍳3 4 5           ⍝ a3 is a rank-3 array.⍞000D111 112 113 114 115⍞000D121 122 123 124 125⍞000D131 132 133 134 135⍞000D141 142 143 144 145⍞000D⍞000D211 212 213 214 215⍞000D221 222 223 224 225⍞000D231 232 233 234 235⍞000D241 242 243 244 245⍞000D⍞000D311 312 313 314 315⍞000D321 322 323 324 325⍞000D331 332 333 334 335⍞000D341 342 343 344 345⍞000D⍞000D      1 2 3 from a3             ⍝ a3[1;2;3]⍞000D123⍞000D⍞000D      1 2 _ from a3             ⍝ a3[1;2;]⍞000D121 122 123 124 125⍞000D⍞000D      1 _ _ from a3             ⍝ a3[1;;]⍞000D111 112 113 114 115⍞000D121 122 123 124 125⍞000D131 132 133 134 135⍞000D141 142 143 144 145⍞000D⍞000D      _ 2 _ from a3             ⍝ a3[;2;]⍞000D121 122 123 124 125⍞000D221 222 223 224 225⍞000D321 322 323 324 325⍞000D⍞000D      (2 1)_ _ from a3          ⍝ a3[2 1;;]⍞000D211 212 213 214 215⍞000D221 222 223 224 225⍞000D231 232 233 234 235⍞000D241 242 243 244 245⍞000D⍞000D111 112 113 114 115⍞000D121 122 123 124 125⍞000D131 132 133 134 135⍞000D141 142 143 144 145⍞000D⍞000D      (2 2⍴2 1)_ _from a3       ⍝ a3[2 2⍴2 1;;]⍞000D211 212 213 214 215⍞000D221 222 223 224 225⍞000D231 232 233 234 235⍞000D241 242 243 244 245⍞000D⍞000D111 112 113 114 115⍞000D121 122 123 124 125⍞000D131 132 133 134 135⍞000D141 142 143 144 145⍞000D⍞000D⍞000D211 212 213 214 215⍞000D221 222 223 224 225⍞000D231 232 233 234 235⍞000D241 242 243 244 245⍞000D⍞000D111 112 113 114 115⍞000D121 122 123 124 125⍞000D131 132 133 134 135⍞000D141 142 143 144 145⍞000D⍞000D      _ 2 _ from a3             ⍝ a3[;2;]⍞000D121 122 123 124 125⍞000D221 222 223 224 225⍞000D321 322 323 324 325⍞000D⍞000D      _ _ 2 from a3             ⍝ a3[;;2]⍞000D112 122 132 142⍞000D212 222 232 242⍞000D312 322 332 342⍞000D⍞000D      _ _ (2 2⍴2 1)from a3      ⍝ a3[;;2 2⍴2 1]⍞000D112 111⍞000D112 111⍞000D⍞000D122 121⍞000D122 121⍞000D⍞000D132 131⍞000D132 131⍞000D⍞000D142 141⍞000D142 141⍞000D⍞000D⍞000D212 211⍞000D212 211⍞000D⍞000D222 221⍞000D222 221⍞000D⍞000D232 231⍞000D232 231⍞000D⍞000D242 241⍞000D242 241⍞000D⍞000D⍞000D312 311⍞000D312 311⍞000D⍞000D322 321⍞000D322 321⍞000D⍞000D332 331⍞000D332 331⍞000D⍞000D342 341⍞000D342 341⍞000D⍞000D      ⍴(,1)(,2)(,3) from a3             ⍝ rank-3 result.⍞000D1 1 1⍞000D      ⍴(,1)( 2)(,3) from a3             ⍝ rank-2 result.⍞000D1 1⍞000D      ⍴( 1)( 2)(,3) from a3             ⍝ rank-1 result.⍞000D1⍞000D      ⍴( 1)( 2)( 3) from a3             ⍝ rank-0 result.⍞000D⍞000D      (⊂2 2⍴2 1 1)from''hello'' ''world''   ⍝ works for nested arg.⍞000D world  hello⍞000D hello  world⍞000D⍞000DSee also: select⍞000D⍞000DIndex:indexing, array⍞000DIndex;Quario G.' 
