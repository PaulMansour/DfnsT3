'rslt ← (dewy ##.do) rarg         ⍝ Apply no-result function "en passant".⍞000D⍞000DA  function [sic] that doesn''t return its result is an embarrassment to  the  D-⍞000Dprogrammer.  Operator  [do]  applies such a function to its argument and returns⍞000Dthe argument as result.⍞000D⍞000D    {} do 3⍞000D3⍞000D⍞000DFor example, suppose we want a D-fn "wset" which, given a ref to an object and a⍞000Dproperty-value  pair, sets the new value and returns the previous one as result.⍞000DWe might be tempted to try something along the lines of:⍞000D⍞000D    wset←{                  ⍝ Set new prop-value ⍵ on object ⍺.⍞000D        rslt←⍺ ⎕WG ⎕IO⊃⍵    ⍝ get old value.⍞000D        ⍺ ⎕WS ⍵             ⍝ set new value.       !!!!!!! wrong⍞000D        rslt                ⍝ return old value.⍞000D    }⍞000D⍞000DThis  won''t work because the function terminates on the second line (⎕WS) before⍞000Dreturning  "rslt"  on  the  third. We can''t use a local assignment on the second⍞000Dline to prolong execution:⍞000D⍞000D        _←⍺ ⎕WS ⍵           ⍝ set new value.       !!!!!!! wrong⍞000D⍞000Dbecause  ⎕WS  does  not (currently) return a result and so would produce a VALUE⍞000DERROR. So we use [do] in the following way. Note that, as [do] derives a monadic⍞000Dfunction  (takes no left argument), we are obliged to bind ⎕WS''s left argument ⍺⍞000Dto form a monadic operand ⍺∘⎕WS:⍞000D⍞000D        _←⍺∘⎕WS do ⍵        ⍝ set new value.⍞000Dor⍞000D        0⊣⍺∘⎕WS do ⍵:       ⍝ set new value.⍞000D⍞000Dor we could combine the final two lines into:⍞000D⍞000D    wset←{                  ⍝ Set new prop-value ⍵ on object ⍺.⍞000D        rslt←⍺ ⎕WG ⎕IO⊃⍵    ⍝ get old value.⍞000D        rslt⊣⍺∘⎕WS do ⍵     ⍝ set new value and return old value.⍞000D    }⍞000D⍞000D(muse:⍞000D    To  be  of  any  value, functions that don''t return results must have useful⍞000D    side-effects.  In  other  words, they _do_ things, rather than indicate what⍞000D    the  value  of the function at a particular argument _is_. For more on this,⍞000D    see: http://dfns.dyalog.com/downloads/howcomp.pdf⍞000D}⍞000D⍞000DTechnical notes:⍞000D⍞000DThis  coding  of [do] depends on the behaviour of primitive execute (⍎): Execute⍞000Dof  a diamond-separated string is defined to return the evaluation of the right-⍞000Dmost segment as result.⍞000D⍞000D    do←{                  ⍝ Apply no-result function.⍞000D        ⍎''⍺⍺ ⍵ ⋄ ⍵'' ⋄ ⍺⍺⍞000D    }⍞000D⍞000DNotice that we must include an unquoted (and unvisited) ⍺⍺ within the braces, in⍞000Dorder  to  denote [do] as an operator and so consume the function operand to its⍞000Dleft.⍞000D⍞000DAn  alternative  coding  might trap the expected value error. This has the minor⍞000Ddisadvantage that it disturbs any diagnostic message (⎕DM) and it appears to run⍞000Da little slower:⍞000D⍞000D    do←{                  ⍝ Apply no-result function.⍞000D        6::⍵ ⋄ ⍺⍺ ⍵⍞000D    }⍞000D⍞000DDepressingly, [do] may be coded more simply and efficiently as a traditional op-⍞000Derator:⍞000D⍞000D        ∇ RARG ← (FUNC DO) RARG⍞000D    [1]   FUNC RARG⍞000D        ∇⍞000D⍞000Dbut  perhaps  this  is to be expected as tradfns are generally better for "do-y"⍞000Dprogramming,  while  D-functions excel at the "is-y" style (see the muse section⍞000Dabove).⍞000D⍞000DExamples:⍞000D⍞000D    ''F1''∘⎕WS do ''Caption'' ''Pugwash''⍞000D Caption  Pugwash⍞000D⍞000DIndex:no-result|is-y function|do-y function|passant, en⍞000DIndex;Izzy' 
