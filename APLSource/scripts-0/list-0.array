'⍝ List from vector ⍵:⍞000D⍞000D      disp list''hello''⍞000D┌─┬──────────────┐⍞000D│h│┌─┬──────────┐│⍞000D│ ││e│┌─┬──────┐││⍞000D│ ││ ││l│┌─┬──┐│││⍞000D│ ││ ││ ││l│o∘││││⍞000D│ ││ ││ │└─┴──┘│││⍞000D│ ││ │└─┴──────┘││⍞000D│ │└─┴──────────┘│⍞000D└─┴──────────────┘⍞000D⍞000D    0 {⍺+1} ltrav list''hello''   ⍝ length of list.⍞000D5⍞000D    length←0∘({⍺+1} ltrav)      ⍝ ditto⍞000D⍞000D    length list ⎕a⍞000D26⍞000D    vect←⍬∘({⍺,⊂⍵} ltrav)       ⍝ vector from list.⍞000D⍞000D    vect list ''hello''⍞000Dhello⍞000D⍞000D    {⍵≡vect list ⍵},\⎕a         ⍝ nested argument vector.⍞000D1⍞000D    revl←''∘''∘({⍺ ⍵}⍨ ltrav)     ⍝ reverse of list.⍞000D⍞000D    vect revl list ''hello''⍞000Dolleh⍞000D⍞000D    rmdups←{                    ⍝ remove adjacent duplicates.⍞000D        ⍺←''∘''                   ⍝ null accumulator.⍞000D        (a(b tail))←⍵           ⍝ first two items.⍞000D        b≡''∘'': revl a ⍺         ⍝ b null: list expired.⍞000D        a≡b:⍺ ∇ b tail          ⍝ two items match: drop first one.⍞000D        a ⍺ ∇ b tail            ⍝ accumulate first, continue.⍞000D    }                   ⍞000D⍞000D    vect rmdups list''Mississippi''⍞000DMisisipi⍞000D⍞000D    parse←{                                 ⍝ Right-to-left lambda expr parser.⍞000D        ↑{ ⍝ ⎕←⍺''│''⍵                        ⍝ (uncomment to see trace).⍞000D            (toks a)(b(c accs))←⍺ ⍵         ⍝  a│b c : a│b c    3-item window.⍞000D            ''⊣''≡a:b                         ⍝  ⊣│*   :  *       finished⍞000D            ''()''≡a c:toks ∇ b accs          ⍝  (│* ) :  │* ·⍞000D            ''(→''≡a b:⍺ ∇ c accs             ⍝  (│→ * : (│*· ·⍞000D            ''→→''≡a b:toks ∇ ⍵               ⍝  →│→ * :  │→ *⍞000D            ''→''≡b:toks ∇ b((''→''a c)accs)    ⍝  v│→ b :  │→ v→b  lambda node.⍞000D            ''→)''≡a c:toks ∇ a ⍵             ⍝  →│* ) :  │→ * )⍞000D            a∊''→('':⍺ ∇(''@''b c)accs          ⍝  (│f a : (│fa     apply node.⍞000D            toks ∇ a ⍵                      ⍝  *│* · :  │* *⍞000D        }/↑{⍺ ⍵}⍨/⌽''⊣('',⍵,'')''               ⍝ parse of token list ⍵.⍞000D    }⍞000D⍞000D    ∆CY←{                   ⍝ Extension-tolerant ⎕CY.⍞000D        6::                 ⍝ :-( no result from ⎕CY.⍞000D        11:: ⍺ ⎕CY ⍵        ⍝ try to copy from ''wsid'' only⍞000D             ⍺ ⎕CY ⍵,''.dws'' ⍝    if can''t find ''wsid.dws''.⍞000D    }⍞000D⍞000D    ''trees''∆CY''min''                     ⍝  borrow Min''s expression tree display.⍞000D⍞000D    trees parse ''(t→ttt)(fx→f(fx))+0''   ⍝ parse tree for lambda expression.⍞000D         ┌─@┐   ⍞000D      ┌──@┐ 0   ⍞000D ┌────@─┐ +     ⍞000D┌→──┐  ┌→─┐     ⍞000Dt ┌─@┐ f ┌→─┐   ⍞000D ┌@┐ t   x ┌@─┐ ⍞000D t t       f ┌@┐⍞000D             f x' 
