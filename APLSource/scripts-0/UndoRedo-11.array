'⍝ Derive undo/redo function:⍞000D⍞000D      commit←(⎕ns'''')UndoRedo            ⍝ derive a commit function.⍞000D⍞000D      ''!''commit 0                       ⍝ initialise history stacks.⍞000D⍞000D      ''?''commit 0                       ⍝ both stacks empty.⍞000D0 0⍞000D      A B C D←''now'' ''is'' ''the'' ''time''   ⍝ initial application state.⍞000D      commit A B C D                    ⍝ commit application state.⍞000D⍞000D      A B←''then'' ''was''                  ⍝ change state,⍞000D      commit A B C D                    ⍝ commit changes.⍞000D⍞000D      A C←''that'' ''a''                    ⍝ change state,⍞000D      commit A B C D                    ⍝ commit changes.⍞000D⍞000D      B D←''took'' ''while''                ⍝ change state,⍞000D⍞000D      A B C D                           ⍝ show current state.⍞000D that  took a while ⍞000D⍞000D      ''?''commit 0                       ⍝ undo stack present.⍞000D0 3⍞000D      A B C D←''<''commit A B C D         ⍝ Undo last change,⍞000D      A B C D                           ⍝ show current state.⍞000D that  was a time ⍞000D⍞000D      ''?''commit 0                       ⍝ items on both stacks.⍞000D1 2⍞000D      A B C D←''<''commit A B C D         ⍝ and previous change,⍞000D      A B C D                           ⍝ show current state.⍞000D then  was  the  time ⍞000D      A B C D←''<''commit A B C D         ⍝ and change before that.⍞000D      A B C D                           ⍝ show current state.⍞000D now  is  the  time ⍞000D⍞000D      ''?''commit 0                       ⍝ undo stack empty.⍞000D3 0⍞000D⍞000D      A B C D← ''>''commit A B C D        ⍝ Redo last undo.⍞000D      A B C D                           ⍝ show current state.⍞000D then  was  the  time ⍞000D⍞000D      A B C D← ''>''commit A B C D        ⍝ Redo previous undo.⍞000D      A B C D                           ⍝ show current state.⍞000D that  was a time ⍞000D      A B C D← ''>''commit A B C D        ⍝ Redo undo before that.⍞000D      A B C D                           ⍝ show current state.⍞000D that  took a while ⍞000D⍞000D      A B C D←''<''commit A B C D         ⍝ Undo last Redo.⍞000D      A B C D                           ⍝ show current state.⍞000D that  was a time ⍞000D      A B C D←''<''commit A B C D         ⍝ Undo previous redo.⍞000D      A B C D                           ⍝ show current state.⍞000D then  was  the  time ⍞000D      A B C D←''<''commit A B C D         ⍝ Undo redo before that.⍞000D      A B C D                           ⍝ show current state.⍞000D now  is  the  time ⍞000D⍞000D      commit¨⍳10                        ⍝ commit 10 transactions.⍞000D          ⍞000D      ''?''commit 0                       ⍝ 10 items in undo stack.⍞000D0 10⍞000D      {}''↑''commit 4                     ⍝ cut to ...⍞000D⍞000D      ''?''commit 0                       ⍝ ... 4 items.⍞000D0 4⍞000D      ''!''commit 0                       ⍝ clear history⍞000D      commit¨ 1 2 3                     ⍝ commits⍞000D      ''⊃''commit ''∘''                     ⍝ most recent undo/redo (Kai)⍞000D3 ∘⍞000D      ''<''commit 4                       ⍝ undo⍞000D3⍞000D      ''⊃''commit ''∘''                     ⍝ most recent undo/redo⍞000D2 4⍞000D      ''!''commit 0                       ⍝ clear history⍞000D      ''≠''commit¨ 1 2 2 3 3 3 4          ⍝ avoid duplicates⍞000D      ''?''commit 0                       ⍝ only 4 commits⍞000D0 4⍞000D⍞000D⍝ The following example shows that the space overhead of history is small.⍞000D⍞000D      rand←{1e4?1e4}⍞000D      a b c d e f g h i j←rand¨⍳10      ⍝ ten large variables.⍞000D⍞000D      ''!''commit 0                       ⍝ initialise history.⍞000D⍞000D      wsused←{                          ⍝ WS bytes used.⍞000D          wa←⎕wa⍞000D          6::wa-⎕wa⍞000D          _←⍺⍺ ⍵⍞000D      }⍞000D⍞000D          commit         a b c d e f g h i j    ⍝ commit vars.⍞000D⍞000D     2000>|commit wsused a b c d e f g h i j    ⍝ committing unchanged vars ...⍞000D1⍞000D     2000>|commit wsused a b c d e f g h i j    ⍝ ... consumes little workspace.⍞000D1⍞000D     2000>|commit wsused a b c d e f g h i j    ⍝ ... consumes little workspace.⍞000D1⍞000D⍞000D⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝  This version uses a limited size vector for history ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍞000D⍞000D    UndoRedoV←{⎕ml←0                    ⍝ Derive undo/redo fn (vector history).⍞000D        ⍺←⊢                             ⍝ default: commit values.⍞000D⍞000D        pop←{(⊃⍵)(1↓⍵)}                 ⍝ pop top vector item.⍞000D        psh←{(⊂⍺),⍵}                    ⍝ push ⍺ to vector ⍵.⍞000D⍞000D        1≡⍺ 1:⍺⍺{                       ⍝ monadic commit: push new hist record.⍞000D            size←⍺.(max⌊1+⍴undo)        ⍝ max size of undo vector.⍞000D            ⍺.undo←size↑⍵ psh ⍺.undo    ⍝ push new undo record.⍞000D            1:⍺.redo←⍬                  ⍝ discard redo history.⍞000D        }⍵⍞000D⍞000D        ''!''≡⍺:⍺⍺.(redo undo max←⍬ ⍬ ⍵)  ⍝ initialize history vectors.⍞000D⍞000D        ''?''≡⍺:,↑⍴¨⍺⍺.(redo undo)        ⍝ query history vectors.⍞000D⍞000D        ''<''≡⍺:⍺⍺{                       ⍝ undo:⍞000D            0=⍴⍺.undo:⍵                 ⍝ no more undo: state unchanged.⍞000D            ⍺.redo←⍵ psh ⍺.redo         ⍝ push current state on redo vector.⍞000D            ⊃last ⍺.undo←pop ⍺.undo     ⍝ pop last state.⍞000D        }⍵⍞000D⍞000D        ''>''≡⍺:⍺⍺{                       ⍝ redo:⍞000D            0=⍴⍺.redo:⍵                 ⍝ no more redo: state unchanged.⍞000D            ⍺.undo←⍵ psh ⍺.undo         ⍝ push current state on undo vector.⍞000D            ⊃next ⍺.redo←pop ⍺.redo     ⍝ pop last state.⍞000D        }⍵⍞000D⍞000D        ''↑''≡⍺:⍺⍺{                       ⍝ resize undo vector.⍞000D            ⍺.max←⍵                     ⍝ set new undo vector size limit.⍞000D            ⍺.(undo←(⍵⌊⍴undo)↑undo)     ⍝ truncate undo vector.⍞000D            1:⍺.redo←⍬                  ⍝ remove redo records.⍞000D        }⍵⍞000D    }⍞000D⍞000D    commitV←(⎕ns'''')UndoRedoV⍞000D⍞000D    ''!''commitV 4                ⍝ history limited to 4 records.⍞000D⍞000D       commitV¨⍳10              ⍝ commit 10 transactions.⍞000D                    ⍞000D    ''?''commitV 0                ⍝ last 4 items in undo vector.⍞000D0 4⍞000D⍞000D    ''<''commitV ¨10+⍳2           ⍝ undo last two changes.⍞000D10 9⍞000D⍞000D    ''?''commitV 0                ⍝ lengths of redo and undo vectors.⍞000D2 2⍞000D⍞000D    ''<''commitV ¨12+⍳4           ⍝ only first 2 undos take effect.⍞000D8 7 15 16⍞000D⍞000D    ''?''commitV 0                ⍝ sizes of redo and undo vectors.⍞000D4 0⍞000D⍞000D    ''>''commitV ¨16+⍳3           ⍝ redo 3 transactions.⍞000D14 13 12⍞000D⍞000D    ''?''commitV 0                ⍝ sizes of redo and undo vectors.⍞000D1 3⍞000D⍞000D    ''↑''commitV 2                ⍝ reduce history size.⍞000D⍞000D    ''?''commitV 0                ⍝ sizes of redo and undo vectors.⍞000D0 2' 
