'⍝ Bunda-Gerth parsing:⍞000D⍞000D    defs ← scripts._defs            ⍝ alias for definitions in scripts space.⍞000D⍞000D    display defs                    ⍝ definitions:⍞000D┌→─────────────────────────────────────────────────────────────────────────────┐⍞000D│⍝ Bunda-Gerth definitions for a dfns-like language, in which:                 │⍞000D│⍝ - An expression may evaluate to:                                            │⍞000D│⍝ - - An Array,                                                               │⍞000D│⍝ - - A Function,                                                             │⍞000D│⍝ - - An Operator,                                                            │⍞000D│⍝ - - A dyadic function bound (curried) with its left argument,               │⍞000D│⍝ - - A dyadic operator bound (curried) with its right operand,               │⍞000D│⍝ - - A train of arrays and functions with a function as rightmost item.      │⍞000D│⍝ - The result of any expression may be named.                                │⍞000D│⍝ - Only an Array expression may be guarded.                                  │⍞000D│⍝ - A diamond-separated expression list must terminate in an Array expression.│⍞000D│                                                                              │⍞000D│⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝ Categories:                         │⍞000D│A a b c  0 1 2 3 4 5 6 7 8 9  ⍺ ⍵  #    ⍝ Arrays                              │⍞000D│F + - × ÷ ⍳ ⍴ = | ↑ ↓ ⊢ ⊣ ∇             ⍝ Functions                           │⍞000D│N x y z                                 ⍝ Names (unassigned).                 │⍞000D│H / ⌿ \ ⍀                               ⍝ Hybrid function/operators           │⍞000D│AF                                      ⍝ bound left argument                 │⍞000D│JOT ∘                                   ⍝ compose / null operand.             │⍞000D│DOT .                                   ⍝ ref / product.                      │⍞000D│DX                                      ⍝ dotted ...                          │⍞000D│MOP ¨ ⍨ &                               ⍝ Monadic operators                   │⍞000D│DOP ⍣                                   ⍝ Dyadic operators                    │⍞000D│IDX                                     ⍝ index/axis                          │⍞000D│XAS                                     ⍝ indexed assignment: [IDX]←          │⍞000D│SL  ;                                   ⍝ subscript list  ..;..;..            │⍞000D│CLN :                                   ⍝ colon token                         │⍞000D│GRD                                     ⍝ guard :                             │⍞000D│XL  ⋄                                   ⍝ expression list ..⋄..⋄..            │⍞000D│ARO ←                                   ⍝ assignment arrow                    │⍞000D│ASG                                     ⍝ name assignment                     │⍞000D│ERR                                     ⍝ error                               │⍞000D│() [IDX] {F}                            ⍝ brackets                            │⍞000D│⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝                                     │⍞000D│                                                                              │⍞000D│⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝ Macros:                                             │⍞000D│fun=F.H                 ⍝ function                                            │⍞000D│rand=A.fun.AF.N         ⍝ operand                                             │⍞000D│thing=rand.MOP.DOP.JOT  ⍝ nameable object                                     │⍞000D│⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝                                                     │⍞000D│                                                                              │⍞000D│DX:thing→thing          ⍝ dotted expression.                                  │⍞000D│                                                                              │⍞000D│A:DOT→DX                ⍝ dotted expression                                   │⍞000D│                                                                              │⍞000D│  N:ARO→ASG             ⍝ name to assignment arrow                            │⍞000D│IDX:ARO→XAS             ⍝ indexed assign ]←                                   │⍞000D│                                                                              │⍞000D│N:XAS→ASG               ⍝ n[x]←                                               │⍞000D│                                                                              │⍞000D│A:A→A                   ⍝ array stranding                                     │⍞000D│N:N→N                   ⍝ name stranding                                      │⍞000D│DOT:A→ERR               ⍝   to prevent #.a+b → #.(a+b)                        │⍞000D│                                                                              │⍞000D│rand:MOP→F              ⍝ monadic and                                         │⍞000D│DOP:rand→MOP            ⍝ ... dyadic operators                                │⍞000D│fun:H→F                 ⍝ hybrid as operator                                  │⍞000D│DOT:fun→MOP             ⍝ inner product                                       │⍞000D│JOT:MOP→F DOP:JOT→MOP   ⍝ jot-as-null: outer product                          │⍞000D│JOT:rand→MOP            ⍝ compose                                             │⍞000D│rand:IDX→rand           ⍝ axis / index                                        │⍞000D│MOP:H→ERR               ⍝   top prevent +¨/¨ → (+¨)(/¨)                       │⍞000D│                                                                              │⍞000D│A:fun→AF                ⍝ left argument to its function                       │⍞000D│IDX:A.fun→ERR           ⍝   to prevent v[0]+1 → v[0](+1)                      │⍞000D│                                                                              │⍞000D│F.AF:A→A                ⍝ function to its right argument                      │⍞000D│                                                                              │⍞000D│fun.AF:F→F  F.AF:AF→F   ⍝ function trains                                     │⍞000D│                                                                              │⍞000D│A.SL:SL→SL SL:A→SL      ⍝ subscript list: [2;] [2;;]                          │⍞000D│                                                                              │⍞000D│ASG:thing→thing         ⍝ naming leaves / as hybrid                           │⍞000D│ASG:DOT→DOP             ⍝ naming fixes  . as product                          │⍞000D│                                                                              │⍞000D│A:CLN→GRD               ⍝ guard expr is a bool scalar                         │⍞000D│GRD:A→A                 ⍝ guard returns an Array.                             │⍞000D│CLN:A→ERR               ⍝   to prevent: 1:2⋄ → 1:(2⋄)                         │⍞000D│ARO:thing→ERR           ⍝   to prevent a←1⋄2 → a←(1⋄2)                        │⍞000D│                                                                              │⍞000D│thing.DOT.XL:XL→XL      ⍝ leading side-effect thing-expressions               │⍞000D│XL:A→A                  ⍝ expression list returns only an array               │⍞000D└──────────────────────────────────────────────────────────────────────────────┘⍞000D⍞000D    defs parse ''''                   ⍝ formatted binding matrix:⍞000D    ┌─────┬─────┬─────┬─────┬─────┬──────┬─────┬──────┬──────┬────┬──────┬────┬─────┬────┬──────┐⍞000D    │A    │F    │N    │H    │AF   │JOT   │DOT  │MOP   │DOP   │IDX │XAS   │SL  │CLN  │XL  │ARO   │⍞000D┌───┼─────┼─────┼─────┼─────┼─────┼──────┼─────┼──────┼──────┼────┼──────┼────┼─────┼────┼──────┤⍞000D│A  │9 A  │7 AF │     │7 AF │     │      │12 DX│8 F   │      │8 A │      │4 SL│2 GRD│1 XL│      │⍞000D├───┼─────┼─────┼─────┼─────┼─────┼──────┼─────┼──────┼──────┼────┼──────┼────┼─────┼────┼──────┤⍞000D│F  │6 A  │5 F  │     │8 F  │5 F  │      │     │8 F   │      │8 F │      │    │     │1 XL│      │⍞000D├───┼─────┼─────┼─────┼─────┼─────┼──────┼─────┼──────┼──────┼────┼──────┼────┼─────┼────┼──────┤⍞000D│N  │     │     │9 N  │     │     │      │     │8 F   │      │8 N │10 ASG│    │     │1 XL│11 ASG│⍞000D├───┼─────┼─────┼─────┼─────┼─────┼──────┼─────┼──────┼──────┼────┼──────┼────┼─────┼────┼──────┤⍞000D│H  │     │5 F  │     │8 F  │     │      │     │8 F   │      │8 H │      │    │     │1 XL│      │⍞000D├───┼─────┼─────┼─────┼─────┼─────┼──────┼─────┼──────┼──────┼────┼──────┼────┼─────┼────┼──────┤⍞000D│AF │6 A  │5 F  │     │     │5 F  │      │     │8 F   │      │8 AF│      │    │     │1 XL│      │⍞000D├───┼─────┼─────┼─────┼─────┼─────┼──────┼─────┼──────┼──────┼────┼──────┼────┼─────┼────┼──────┤⍞000D│JOT│8 MOP│8 MOP│8 MOP│8 MOP│8 MOP│      │     │8 F   │      │    │      │    │     │1 XL│      │⍞000D├───┼─────┼─────┼─────┼─────┼─────┼──────┼─────┼──────┼──────┼────┼──────┼────┼─────┼────┼──────┤⍞000D│DOT│9 ERR│8 MOP│     │8 MOP│     │      │     │      │      │    │      │    │     │1 XL│      │⍞000D├───┼─────┼─────┼─────┼─────┼─────┼──────┼─────┼──────┼──────┼────┼──────┼────┼─────┼────┼──────┤⍞000D│DX │13 A │13 F │13 N │13 H │13 AF│13 JOT│     │13 MOP│13 DOP│    │      │    │     │    │      │⍞000D├───┼─────┼─────┼─────┼─────┼─────┼──────┼─────┼──────┼──────┼────┼──────┼────┼─────┼────┼──────┤⍞000D│MOP│     │     │     │8 ERR│     │      │     │      │      │    │      │    │     │1 XL│      │⍞000D├───┼─────┼─────┼─────┼─────┼─────┼──────┼─────┼──────┼──────┼────┼──────┼────┼─────┼────┼──────┤⍞000D│DOP│8 MOP│8 MOP│8 MOP│8 MOP│8 MOP│8 MOP │     │      │      │    │      │    │     │1 XL│      │⍞000D├───┼─────┼─────┼─────┼─────┼─────┼──────┼─────┼──────┼──────┼────┼──────┼────┼─────┼────┼──────┤⍞000D│IDX│7 ERR│7 ERR│     │7 ERR│     │      │     │      │      │    │      │    │     │    │11 XAS│⍞000D├───┼─────┼─────┼─────┼─────┼─────┼──────┼─────┼──────┼──────┼────┼──────┼────┼─────┼────┼──────┤⍞000D│SL │4 SL │     │     │     │     │      │     │      │      │    │      │4 SL│     │    │      │⍞000D├───┼─────┼─────┼─────┼─────┼─────┼──────┼─────┼──────┼──────┼────┼──────┼────┼─────┼────┼──────┤⍞000D│CLN│2 ERR│     │     │     │     │      │     │      │      │    │      │    │     │    │      │⍞000D├───┼─────┼─────┼─────┼─────┼─────┼──────┼─────┼──────┼──────┼────┼──────┼────┼─────┼────┼──────┤⍞000D│GRD│2 A  │     │     │     │     │      │     │      │      │    │      │    │     │    │      │⍞000D├───┼─────┼─────┼─────┼─────┼─────┼──────┼─────┼──────┼──────┼────┼──────┼────┼─────┼────┼──────┤⍞000D│XL │1 A  │     │     │     │     │      │     │      │      │    │      │    │     │1 XL│      │⍞000D├───┼─────┼─────┼─────┼─────┼─────┼──────┼─────┼──────┼──────┼────┼──────┼────┼─────┼────┼──────┤⍞000D│ARO│2 ERR│2 ERR│2 ERR│2 ERR│2 ERR│2 ERR │     │2 ERR │2 ERR │    │      │    │     │    │      │⍞000D├───┼─────┼─────┼─────┼─────┼─────┼──────┼─────┼──────┼──────┼────┼──────┼────┼─────┼────┼──────┤⍞000D│ASG│3 A  │3 F  │3 N  │3 H  │3 AF │3 JOT │3 DOP│3 MOP │3 DOP │    │      │    │     │    │      │⍞000D└───┴─────┴─────┴─────┴─────┴─────┴──────┴─────┴──────┴──────┴────┴──────┴────┴─────┴────┴──────┘⍞000D⍞000D    try ← (0 defs parse'''')∘parse                ⍝ parse of expression ⍵.⍞000D⍞000D⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝ Arrays Functions Operators⍞000D⍞000D    try ''1+2-3×4÷5''         ⍝ dyadic functions and arrays⍞000D    A            ⍞000D ┌──┴───┐        ⍞000D┌┴┐  ┌──┴──┐     ⍞000D1 + ┌┴┐  ┌─┴──┐  ⍞000D    2 - ┌┴┐  ┌┴─┐⍞000D        3 × ┌┴┐ 5⍞000D            4 ÷  ⍞000D⍞000D    try ''1+-×÷5''            ⍝ monadic functions⍞000D   A       ⍞000D ┌─┴─┐     ⍞000D┌┴┐ ┌┴─┐   ⍞000D1 + - ┌┴─┐ ⍞000D      × ┌┴┐⍞000D        ÷ 5⍞000D⍞000D    try ''+∘×¨2+3''           ⍝ operator-function binding⍞000D      A      ⍞000D   ┌──┴───┐  ⍞000D ┌─┴──┐  ┌┴─┐⍞000D┌┴─┐  ¨ ┌┴┐ 3⍞000D+ ┌┴┐   2 +  ⍞000D  ∘ ×        ⍞000D⍞000D    try ''+∘-∘×∘÷''           ⍝ operator-operand sequences associate left.⍞000D       F     ⍞000D    ┌──┴───┐ ⍞000D ┌──┴──┐  ┌┴┐⍞000D┌┴─┐  ┌┴┐ ∘ ÷⍞000D+ ┌┴┐ ∘ ×    ⍞000D  ∘ -        ⍞000D⍞000D    try ''+∘2 3''             ⍝ strand binds tighter than dop⍞000D F     ⍞000D┌┴─┐   ⍞000D+ ┌┴─┐ ⍞000D  ∘ ┌┴┐⍞000D    2 3⍞000D⍞000D    try ''(2+3)×4''           ⍝ parentheses in array-function sequence.⍞000D       A   ⍞000D     ┌─┴──┐⍞000D  ┌──┴──┐ 4⍞000D┌─┴─┐   ×  ⍞000D(  ┌┴─┐    ⍞000D  ┌┴┐ 3    ⍞000D  2 +      ⍞000D⍞000D    try ''+∘(×∘÷)''           ⍝ parentheses in function-operator sequence.⍞000D F         ⍞000D┌┴─┐       ⍞000D+ ┌┴─┐     ⍞000D  ∘ ┌┴─┐   ⍞000D    ( ┌┴─┐ ⍞000D      × ┌┴┐⍞000D        ∘ ÷⍞000D⍞000D    try ''(+∘×)∘÷''           ⍝ redundant parentheses.⍞000D     F     ⍞000D ┌───┴───┐ ⍞000D┌┴─┐    ┌┴┐⍞000D( ┌┴─┐  ∘ ÷⍞000D  + ┌┴┐    ⍞000D    ∘ ×    ⍞000D⍞000D    try ''(1 2)3+4(5 6)''     ⍝ array stranding⍞000D        A        ⍞000D     ┌──┴──┐     ⍞000D   ┌─┴──┐ ┌┴─┐   ⍞000D ┌─┴──┐ + 4 ┌┴─┐ ⍞000D┌┴─┐  3     ( ┌┴┐⍞000D( ┌┴┐         5 6⍞000D  1 2            ⍞000D⍞000D    try¨ ''1 2 3'' ''(1 2)3'' ''1(2 3)''  ⍝ stranding distinctions.⍞000D   A       A      A      ⍞000D  ┌┴─┐   ┌─┴──┐  ┌┴─┐    ⍞000D ┌┴┐ 3  ┌┴─┐  3  1 ┌┴─┐  ⍞000D 1 2    ( ┌┴┐      ( ┌┴┐ ⍞000D          1 2        2 3 ⍞000D⍞000D⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝ Jots ''n Dots⍞000D⍞000D    try¨ ''#.×'' ''∘.×'' ''+.×'' ''+∘÷''    ⍝ jots ''n dots⍞000D   F     F      F      F    ⍞000D  ┌┴─┐  ┌┴─┐   ┌┴─┐   ┌┴─┐  ⍞000D ┌┴┐ ×  ∘ ┌┴┐  + ┌┴┐  + ┌┴┐ ⍞000D # .      . ×    . ×    ∘ ÷ ⍞000D⍞000D    try ''#.×.∘.+.×∘÷''               ⍝ jot ''n dot medley⍞000D              F      ⍞000D         ┌────┴────┐ ⍞000D    ┌────┴─────┐  ┌┴┐⍞000D  ┌─┴──┐      ┌┴┐ ∘ ÷⍞000D ┌┴─┐ ┌┴─┐    . ×    ⍞000D┌┴┐ × . ┌┴─┐         ⍞000D# .     ∘ ┌┴┐        ⍞000D          . +        ⍞000D⍞000D    try¨ ''(1+)∘(1+)'' ''(1+)⍣2''       ⍝ monadic function (MF) as operand.⍞000D     F              F     ⍞000D  ┌──┴──┐        ┌──┴──┐  ⍞000D ┌┴─┐  ┌┴─┐     ┌┴─┐  ┌┴┐ ⍞000D ( ┌┴┐ ∘ ┌┴─┐   ( ┌┴┐ ⍣ 2 ⍞000D   1 +   ( ┌┴┐    1 +     ⍞000D           1 +            ⍞000D⍞000D    try¨ ''1+¨'' ''(1+)¨''              ⍝ test binding difference⍞000D  AF       F    ⍞000D ┌┴─┐    ┌─┴──┐ ⍞000D 1 ┌┴┐  ┌┴─┐  ¨ ⍞000D   + ¨  ( ┌┴┐   ⍞000D          1 +   ⍞000D⍞000D    try ''⍣∘''                        ⍝ jot-as-null: power limit.⍞000D MOP⍞000D┌┴┐ ⍞000D⍣ ∘ ⍞000D⍞000D    try ''↑⍣∘''                       ⍝ disclose limit.⍞000D F   ⍞000D┌┴─┐ ⍞000D↑ ┌┴┐⍞000D  ⍣ ∘⍞000D⍞000D    try¨ ''∘.+'' ''+∘1''                ⍝ outer product vs. compose⍞000D  F      F    ⍞000D ┌┴─┐   ┌┴─┐  ⍞000D ∘ ┌┴┐  + ┌┴┐ ⍞000D   . +    ∘ 1 ⍞000D⍞000D    try ''# #.a[1]''                  ⍝ strand vs dot vs index.⍞000D     A     ⍞000D  ┌──┴───┐ ⍞000D┌─┴─┐   ┌┴┐⍞000D#  ┌┴─┐ [ 1⍞000D  ┌┴┐ a    ⍞000D  # .      ⍞000D⍞000D⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝ Naming⍞000D⍞000D    try ''x←2 3''                     ⍝ array naming.⍞000D   A   ⍞000D ┌─┴─┐ ⍞000D┌┴┐ ┌┴┐⍞000Dx ← 2 3⍞000D⍞000D    try ''y←+.×''                     ⍝ function naming.⍞000D   F     ⍞000D ┌─┴─┐   ⍞000D┌┴┐ ┌┴─┐ ⍞000Dy ← + ┌┴┐⍞000D      . ×⍞000D⍞000D    try ''z←¨''                       ⍝ mop naming.⍞000D  MOP⍞000D ┌┴─┐⍞000D┌┴┐ ¨⍞000Dz ←  ⍞000D⍞000D    try ''z←⍣''                       ⍝ dop naming.⍞000D  DOP⍞000D ┌┴─┐⍞000D┌┴┐ ⍣⍞000Dz ←  ⍞000D⍞000D    try¨ ''z←∘'' ''z←.''                ⍝ jot ''n dot naming.⍞000D   JOT    DOP ⍞000D  ┌┴─┐   ┌┴─┐ ⍞000D ┌┴┐ ∘  ┌┴┐ . ⍞000D z ←    z ←   ⍞000D⍞000D    try¨ ''+(z←∘)÷'' ''(z←∘).×''        ⍝ naming null/compose.⍞000D    F              F      ⍞000D ┌──┴───┐       ┌──┴───┐  ⍞000D +   ┌──┴──┐  ┌─┴─┐   ┌┴┐ ⍞000D   ┌─┴─┐   ÷  (  ┌┴─┐ . × ⍞000D   (  ┌┴─┐      ┌┴┐ ∘     ⍞000D     ┌┴┐ ∘      z ←       ⍞000D     z ←                  ⍞000D⍞000D    try ''(x←∘).((y←∘)(z←.)(x←∘))''   ⍝ jot ''n dot naming.⍞000D      F                            ⍞000D  ┌───┴────┐                       ⍞000D┌─┴─┐   ┌──┴───┐                   ⍞000D(  ┌┴─┐ . ┌────┴────┐              ⍞000D  ┌┴┐ ∘   (   ┌─────┴─────┐        ⍞000D  x ←       ┌─┴─┐     ┌───┴───┐    ⍞000D            (  ┌┴─┐ ┌─┴─┐   ┌─┴─┐  ⍞000D              ┌┴┐ ∘ (  ┌┴─┐ (  ┌┴─┐⍞000D              y ←     ┌┴┐ .   ┌┴┐ ∘⍞000D                      z ←     x ←  ⍞000D⍞000D    try ''x y''                       ⍝ name stranding.⍞000D N ⍞000D┌┴┐⍞000Dx y⍞000D⍞000D    try ''(x y)←3 4''                 ⍝ struct naming.⍞000D      A    ⍞000D   ┌──┴──┐ ⍞000D ┌─┴──┐ ┌┴┐⍞000D┌┴─┐  ← 3 4⍞000D( ┌┴┐      ⍞000D  x y      ⍞000D⍞000D    try ''(x(y z))←(1 2)3''           ⍝ struct naming.⍞000D          A        ⍞000D     ┌────┴────┐   ⍞000D ┌───┴────┐  ┌─┴──┐⍞000D┌┴─┐      ← ┌┴─┐  3⍞000D( ┌┴─┐      ( ┌┴┐  ⍞000D  x ┌┴─┐      1 2  ⍞000D    ( ┌┴┐          ⍞000D      y z          ⍞000D⍞000D    try ''a x←3''                     ⍝ stranding with naming.⍞000D  A    ⍞000D┌─┴─┐  ⍞000Da  ┌┴─┐⍞000D  ┌┴┐ 3⍞000D  x ←  ⍞000D⍞000D    try ''(x←+)(y←/)(z←3)''           ⍝ naming en-passant.⍞000D            A          ⍞000D      ┌─────┴─────┐    ⍞000D  ┌───┴───┐     ┌─┴─┐  ⍞000D┌─┴─┐   ┌─┴─┐   (  ┌┴─┐⍞000D(  ┌┴─┐ (  ┌┴─┐   ┌┴┐ 3⍞000D  ┌┴┐ +   ┌┴┐ /   z ←  ⍞000D  x ←     y ←          ⍞000D⍞000D    try ''x←1:2⋄3''                   ⍝ naming guard condition⍞000D          A  ⍞000D        ┌─┴─┐⍞000D      ┌─┴─┐ 3⍞000D    ┌─┴─┐ ⋄  ⍞000D  ┌─┴─┐ 2    ⍞000D ┌┴─┐ :      ⍞000D┌┴┐ 1        ⍞000Dx ←          ⍞000D⍞000D    try ''x←(1:2⋄3)''                 ⍝ naming guard expression⍞000D    A          ⍞000D ┌──┴───┐      ⍞000D┌┴┐ ┌───┴───┐  ⍞000Dx ← (     ┌─┴─┐⍞000D        ┌─┴─┐ 3⍞000D       ┌┴─┐ ⋄  ⍞000D      ┌┴┐ 2    ⍞000D      1 :      ⍞000D⍞000D    try¨ ''1(z←/)¨2'' ''+(z←/)¨2''      ⍝ naming retains hybrid behaviour⍞000D        A                A    ⍞000D    ┌───┴────┐        ┌──┴──┐ ⍞000D ┌──┴───┐    2    ┌───┴───┐ 2 ⍞000D 1   ┌──┴──┐    ┌─┴─┐     ¨   ⍞000D   ┌─┴─┐   ¨    + ┌─┴─┐       ⍞000D   (  ┌┴─┐        (  ┌┴─┐     ⍞000D     ┌┴┐ /          ┌┴┐ /     ⍞000D     z ←            z ←       ⍞000D⍞000D    grid ← 0 0∘disp                 ⍝ undecorated grid⍞000D⍞000D    grid try¨ ''z←''∘,¨ ''0+/¨⍣∘.''     ⍝ naming of each category⍞000D┌─────┬─────┬─────┬─────┬─────┬─────┬─────┐⍞000D│  A  │  F  │  H  │  MOP│  DOP│  JOT│  DOP│⍞000D│ ┌┴─┐│ ┌┴─┐│ ┌┴─┐│ ┌┴─┐│ ┌┴─┐│ ┌┴─┐│ ┌┴─┐│⍞000D│┌┴┐ 0│┌┴┐ +│┌┴┐ /│┌┴┐ ¨│┌┴┐ ⍣│┌┴┐ ∘│┌┴┐ .│⍞000D│z ←  │z ←  │z ←  │z ←  │z ←  │z ←  │z ←  │⍞000D└─────┴─────┴─────┴─────┴─────┴─────┴─────┘⍞000D⍞000D⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝ Hybrids⍞000D⍞000D    try¨ ''+/¨0'' ''1/¨0''              ⍝ hybrids: defining example.⍞000D     A       A    ⍞000D   ┌─┴─┐   ┌─┴──┐ ⍞000D  ┌┴─┐ 0  ┌┴─┐  0 ⍞000D ┌┴┐ ¨    1 ┌┴┐   ⍞000D + /        / ¨   ⍞000D⍞000D    try¨ ''/./'' ''/∘/''                ⍝ hybrids, jots ''n dots⍞000D  F      F    ⍞000D ┌┴─┐   ┌┴─┐  ⍞000D / ┌┴┐  / ┌┴┐ ⍞000D   . /    ∘ / ⍞000D⍞000D    try ''x←↑(//)(1 2)(3 4)''         ⍝ replication-reduction⍞000D    A                  ⍞000D ┌──┴──┐               ⍞000D┌┴┐ ┌──┴───┐           ⍞000Dx ← ↑  ┌───┴────┐      ⍞000D      ┌┴─┐   ┌──┴──┐   ⍞000D      ( ┌┴┐ ┌┴─┐  ┌┴─┐ ⍞000D        / / ( ┌┴┐ ( ┌┴┐⍞000D              1 2   3 4⍞000D⍞000D    try ''z←//''                      ⍝ ← doesn''t bind with /⍞000D   F   ⍞000D ┌─┴─┐ ⍞000D┌┴┐ ┌┴┐⍞000Dz ← / /⍞000D⍞000D⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝ Guards & Diamonds⍞000D⍞000D    try ''⍺=0: ⍵+1''                  ⍝ guard.⍞000D       A     ⍞000D    ┌──┴──┐  ⍞000D  ┌─┴─┐  ┌┴─┐⍞000D ┌┴─┐ : ┌┴┐ 1⍞000D┌┴┐ 0   ⍵ +  ⍞000D⍺ =          ⍞000D⍞000D    try ''0 ⋄ 1 ⋄ 2 ⋄ 3''             ⍝ diamond segments.⍞000D          A  ⍞000D        ┌─┴─┐⍞000D      ┌─┴─┐ 3⍞000D    ┌─┴─┐ ⋄  ⍞000D  ┌─┴─┐ 2    ⍞000D ┌┴─┐ ⋄      ⍞000D┌┴┐ 1        ⍞000D0 ⋄          ⍞000D⍞000D    try ''0:0+0 ⋄ 0:1+1 ⋄ 0:2+2 ⋄ 3'' ⍝ guarded segments.⍞000D                               A     ⍞000D                           ┌───┴────┐⍞000D                     ┌─────┴──────┐ 3⍞000D                ┌────┴─────┐      ⋄  ⍞000D          ┌─────┴─────┐  ┌─┴──┐      ⍞000D      ┌───┴────┐      ⋄ ┌┴┐  ┌┴─┐    ⍞000D   ┌──┴───┐  ┌─┴──┐     0 : ┌┴┐ 2    ⍞000D ┌─┴──┐   ⋄ ┌┴┐  ┌┴─┐       2 +      ⍞000D┌┴┐  ┌┴─┐   0 : ┌┴┐ 1                ⍞000D0 : ┌┴┐ 0       1 +                  ⍞000D    0 +                              ⍞000D⍞000D    try ''(z←+ ⋄ 1+2)+3''             ⍝ leading non-array segment.⍞000D              A    ⍞000D          ┌───┴───┐⍞000D    ┌─────┴─────┐ 3⍞000D┌───┴────┐      +  ⍞000D(     ┌──┴──┐      ⍞000D    ┌─┴─┐  ┌┴─┐    ⍞000D   ┌┴─┐ ⋄ ┌┴┐ 2    ⍞000D  ┌┴┐ +   1 +      ⍞000D  z ←              ⍞000D⍞000D    dmd ← '' ⋄ ⋄ '' '' ⋄ ⋄2'' '' ⋄1⋄ '' '' ⋄1⋄2''⍞000D    dmd,← ''0⋄ ⋄ '' ''0⋄ ⋄2'' ''0⋄1⋄ '' ''0⋄1⋄2''⍞000D⍞000D    grid try¨ 2 4⍴ dmd              ⍝ expression lists⍞000D┌─────┬───────┬───────┬─────────┐⍞000D│ XL  │  A    │  XL   │    A    │⍞000D│┌┴┐  │ ┌┴─┐  │ ┌┴─┐  │  ┌─┴─┐  │⍞000D│⋄ ⋄  │┌┴┐ 2  │┌┴┐ ⋄  │ ┌┴─┐ 2  │⍞000D│     │⋄ ⋄    │⋄ 1    │┌┴┐ ⋄    │⍞000D│     │       │       │⋄ 1      │⍞000D├─────┼───────┼───────┼─────────┤⍞000D│  XL │    A  │    XL │      A  │⍞000D│ ┌┴─┐│  ┌─┴─┐│  ┌─┴─┐│    ┌─┴─┐│⍞000D│┌┴┐ ⋄│ ┌┴─┐ 2│ ┌┴─┐ ⋄│  ┌─┴─┐ 2│⍞000D│0 ⋄  │┌┴┐ ⋄  │┌┴┐ 1  │ ┌┴─┐ ⋄  │⍞000D│     │0 ⋄    │0 ⋄    │┌┴┐ 1    │⍞000D│     │       │       │0 ⋄      │⍞000D└─────┴───────┴───────┴─────────┘⍞000D⍞000D    grid try¨ ''0+/¨⍣∘.'' ,¨⊂''⋄0''     ⍝ expression lists⍞000D┌─────┬─────┬─────┬─────┬─────┬─────┬─────┐⍞000D│  A  │  A  │  A  │  A  │  A  │  A  │  A  │⍞000D│ ┌┴─┐│ ┌┴─┐│ ┌┴─┐│ ┌┴─┐│ ┌┴─┐│ ┌┴─┐│ ┌┴─┐│⍞000D│┌┴┐ 0│┌┴┐ 0│┌┴┐ 0│┌┴┐ 0│┌┴┐ 0│┌┴┐ 0│┌┴┐ 0│⍞000D│0 ⋄  │+ ⋄  │/ ⋄  │¨ ⋄  │⍣ ⋄  │∘ ⋄  │. ⋄  │⍞000D└─────┴─────┴─────┴─────┴─────┴─────┴─────┘⍞000D⍞000D⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝ axis and index⍞000D⍞000D    idx ← ''[ ;;]'' ''[ ;;3]'' ''[ ;2;]'' ''[ ;2;3]''   ⍝ subscripts⍞000D    idx,← ''[1;;]'' ''[1;;3]'' ''[1;2;]'' ''[1;2;3]''⍞000D⍞000D    grid try¨ 2 4⍴ idx              ⍝ subscript lists⍞000D┌───────┬─────────┬─────────┬───────────┐⍞000D│ IDX   │  IDX    │  IDX    │   IDX     │⍞000D│┌┴─┐   │┌─┴─┐    │┌─┴─┐    │┌──┴──┐    │⍞000D│[ ┌┴┐  │[  ┌┴─┐  │[  ┌┴─┐  │[   ┌─┴─┐  │⍞000D│  ; ;  │  ┌┴┐ 3  │  ┌┴┐ ;  │   ┌┴─┐ 3  │⍞000D│       │  ; ;    │  ; 2    │  ┌┴┐ ;    │⍞000D│       │         │         │  ; 2      │⍞000D├───────┼─────────┼─────────┼───────────┤⍞000D│  IDX  │   IDX   │   IDX   │    IDX    │⍞000D│┌─┴─┐  │┌──┴──┐  │┌──┴──┐  │┌───┴───┐  │⍞000D│[  ┌┴─┐│[   ┌─┴─┐│[   ┌─┴─┐│[     ┌─┴─┐│⍞000D│  ┌┴┐ ;│   ┌┴─┐ 3│   ┌┴─┐ ;│    ┌─┴─┐ 3│⍞000D│  1 ;  │  ┌┴┐ ;  │  ┌┴┐ 2  │   ┌┴─┐ ;  │⍞000D│       │  1 ;    │  1 ;    │  ┌┴┐ 2    │⍞000D│       │         │         │  1 ;      │⍞000D└───────┴─────────┴─────────┴───────────┘⍞000D⍞000D    try¨ ''()'' ''[]'' ''{}''             ⍝ empty brackets⍞000D ┌─┬─┐  IDX  F ⍞000D │(│)│  [    { ⍞000D └─┴─┘         ⍞000D⍞000D    try¨ ''⍵[;;]'' ''⍵[;]'' ''⍵[]''       ⍝ decreasing rank⍞000D  A        A      A  ⍞000D ┌┴─┐     ┌┴─┐   ┌┴┐ ⍞000D ⍵ ┌┴─┐   ⍵ ┌┴┐  ⍵ [ ⍞000D   [ ┌┴┐    [ ;      ⍞000D     ; ;             ⍞000D⍞000D    try ''a[1][2][3]''                ⍝ contiguous IDXs.⍞000D       A     ⍞000D    ┌──┴───┐ ⍞000D ┌──┴──┐  ┌┴┐⍞000D┌┴─┐  ┌┴┐ [ 3⍞000Da ┌┴┐ [ 2    ⍞000D  [ 1        ⍞000D⍞000D    try ''x[2]←0''                    ⍝ indexed assignment⍞000D     A   ⍞000D  ┌──┴──┐⍞000D┌─┴─┐   0⍞000Dx  ┌┴─┐  ⍞000D  ┌┴┐ ←  ⍞000D  [ 2    ⍞000D⍞000D    try ''[0]←''                      ⍝ partial indexed assignment⍞000D  XAS⍞000D ┌┴─┐⍞000D┌┴┐ ←⍞000D[ 0  ⍞000D⍞000D    try ''a x[2]←0''                  ⍝ stranding with indexed assignment.⍞000D   A       ⍞000D┌──┴───┐   ⍞000Da   ┌──┴──┐⍞000D  ┌─┴─┐   0⍞000D  x  ┌┴─┐  ⍞000D    ┌┴┐ ←  ⍞000D    [ 2    ⍞000D⍞000D    try ''(x y)[0]←1''                ⍝ selective assignment.⍞000D        A    ⍞000D    ┌───┴───┐⍞000D ┌──┴───┐   1⍞000D┌┴─┐   ┌┴─┐  ⍞000D( ┌┴┐ ┌┴┐ ←  ⍞000D  x y [ 0    ⍞000D⍞000D    try ''1/[0]⍵''                    ⍝ hybrid-fn axis⍞000D    A    ⍞000D ┌──┴───┐⍞000D┌┴─┐    ⍵⍞000D1 ┌┴─┐   ⍞000D  / ┌┴┐  ⍞000D    [ 0  ⍞000D⍞000D    try ''+/[0]⍵''                    ⍝ derived-fn axis⍞000D     A   ⍞000D   ┌─┴──┐⍞000D ┌─┴─┐  ⍵⍞000D┌┴┐ ┌┴┐  ⍞000D+ / [ 0  ⍞000D⍞000D    try ''2+/[0]⍵''                   ⍝ dyadic derived-fn axis⍞000D      A    ⍞000D  ┌───┴───┐⍞000D┌─┴──┐    ⍵⍞000D2  ┌─┴─┐   ⍞000D  ┌┴┐ ┌┴┐  ⍞000D  + / [ 0  ⍞000D⍞000D    try ''(1/)[0]⍵''                  ⍝ AF with axis⍞000D       A   ⍞000D    ┌──┴──┐⍞000D ┌──┴──┐  ⍵⍞000D┌┴─┐  ┌┴┐  ⍞000D( ┌┴┐ [ 0  ⍞000D  1 /      ⍞000D⍞000D    try¨ ''⍵[1]'' ''+[1]'' ''z[1]''       ⍝ array, function, name.⍞000D  A      F      N    ⍞000D ┌┴─┐   ┌┴─┐   ┌┴─┐  ⍞000D ⍵ ┌┴┐  + ┌┴┐  z ┌┴┐ ⍞000D   [ 1    [ 1    [ 1 ⍞000D⍞000D    try ''{+/[0]⍵}(2 3⍴⍳4)[;0]''      ⍝ parentheses, brackets and braces.⍞000D           A                 ⍞000D   ┌───────┴────────┐        ⍞000D┌──┴───┐       ┌────┴────┐   ⍞000D{    ┌─┴──┐ ┌──┴──┐     ┌┴─┐ ⍞000D   ┌─┴─┐  ⍵ (   ┌─┴──┐  [ ┌┴┐⍞000D  ┌┴┐ ┌┴┐      ┌┴─┐ ┌┴┐   ; 0⍞000D  + / [ 0     ┌┴┐ ⍴ ⍳ 4      ⍞000D              2 3            ⍞000D⍞000D⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝ Function trains⍞000D⍞000D    try ''+-×÷''                      ⍝ function train.⍞000D    F  ⍞000D  ┌─┴─┐⍞000D ┌┴─┐ ÷⍞000D┌┴┐ ×  ⍞000D+ -    ⍞000D⍞000D    try ''1+÷''                       ⍝ Agh train⍞000D  F  ⍞000D ┌┴─┐⍞000D┌┴┐ ÷⍞000D1 +  ⍞000D⍞000D    try ''÷1+''                       ⍝ fBh train⍞000D F   ⍞000D┌┴─┐ ⍞000D÷ ┌┴┐⍞000D  1 +⍞000D⍞000D    try ''1+3×''                      ⍝ A(fBh)⍞000D   F   ⍞000D ┌─┴─┐ ⍞000D┌┴┐ ┌┴┐⍞000D1 + 3 ×⍞000D⍞000D    try ''1+2-3×4÷''                  ⍝ longer (A:F)* train⍞000D         F     ⍞000D      ┌──┴───┐ ⍞000D   ┌──┴──┐  ┌┴┐⍞000D ┌─┴─┐  ┌┴┐ 4 ÷⍞000D┌┴┐ ┌┴┐ 3 ×    ⍞000D1 + 2 -        ⍞000D⍞000D    try ''+/÷⍴''                      ⍝ train for vector mean⍞000D    F  ⍞000D  ┌─┴─┐⍞000D ┌┴─┐ ⍴⍞000D┌┴┐ ÷  ⍞000D+ /    ⍞000D⍞000D    try ''/∘⊢''                       ⍝ fix / as replicate function⍞000D F   ⍞000D┌┴─┐ ⍞000D/ ┌┴┐⍞000D  ∘ ⊢⍞000D⍞000D    try¨ ''+/×'' ''+(/∘⊢)×''            ⍝ 2-train vs 3-train⍞000D   F         F      ⍞000D  ┌┴─┐   ┌───┴────┐ ⍞000D ┌┴┐ ×  ┌┴─┐      × ⍞000D + /    + ┌┴─┐      ⍞000D          ( ┌┴─┐    ⍞000D            / ┌┴┐   ⍞000D              ∘ ⊢   ⍞000D⍞000D⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝ Miscellaneous⍞000D⍞000D    try ''∘''                         ⍝ single token.⍞000DJOT⍞000D∘  ⍞000D⍞000D    try¨ ∘.,⍨ ''#=⍨⍣∘.''              ⍝ not all pairs bind:⍞000D  A        AF       F         ┌─┬───┐    ┌─┬───┐     DX       ⍞000D ┌┴┐      ┌┴┐      ┌┴┐        │A│DOP│    │A│JOT│    ┌┴┐       ⍞000D # #      # =      # ⍨        │#│⍣  │    │#│∘  │    # .       ⍞000D                              └─┴───┘    └─┴───┘              ⍞000D  A        F        F         ┌─┬───┐    ┌─┬───┐    ┌─┬───┐   ⍞000D ┌┴┐      ┌┴┐      ┌┴┐        │F│DOP│    │F│JOT│    │F│DOT│   ⍞000D = #      = =      = ⍨        │=│⍣  │    │=│∘  │    │=│.  │   ⍞000D                              └─┴───┘    └─┴───┘    └─┴───┘   ⍞000D ┌───┬─┐  ┌───┬─┐  ┌───┬───┐  ┌───┬───┐  ┌───┬───┐  ┌───┬───┐ ⍞000D │MOP│A│  │MOP│F│  │MOP│MOP│  │MOP│DOP│  │MOP│JOT│  │MOP│DOT│ ⍞000D │⍨  │#│  │⍨  │=│  │⍨  │⍨  │  │⍨  │⍣  │  │⍨  │∘  │  │⍨  │.  │ ⍞000D └───┴─┘  └───┴─┘  └───┴───┘  └───┴───┘  └───┴───┘  └───┴───┘ ⍞000D  MOP      MOP     ┌───┬───┐  ┌───┬───┐   MOP       ┌───┬───┐ ⍞000D ┌┴┐      ┌┴┐      │DOP│MOP│  │DOP│DOP│  ┌┴┐        │DOP│DOT│ ⍞000D ⍣ #      ⍣ =      │⍣  │⍨  │  │⍣  │⍣  │  ⍣ ∘        │⍣  │.  │ ⍞000D                   └───┴───┘  └───┴───┘             └───┴───┘ ⍞000D  MOP      MOP      F         ┌───┬───┐  ┌───┬───┐  ┌───┬───┐ ⍞000D ┌┴┐      ┌┴┐      ┌┴┐        │JOT│DOP│  │JOT│JOT│  │JOT│DOT│ ⍞000D ∘ #      ∘ =      ∘ ⍨        │∘  │⍣  │  │∘  │∘  │  │∘  │.  │ ⍞000D                              └───┴───┘  └───┴───┘  └───┴───┘ ⍞000D  ERR      MOP     ┌───┬───┐  ┌───┬───┐  ┌───┬───┐  ┌───┬───┐ ⍞000D ┌┴┐      ┌┴┐      │DOT│MOP│  │DOT│DOP│  │DOT│JOT│  │DOT│DOT│ ⍞000D . #      . =      │.  │⍨  │  │.  │⍣  │  │.  │∘  │  │.  │.  │ ⍞000D                   └───┴───┘  └───┴───┘  └───┴───┘  └───┴───┘ ⍞000D⍞000D    try ''()''                        ⍝ null expression: error.⍞000D┌─┬─┐⍞000D│(│)│⍞000D└─┴─┘⍞000D⍞000D    try ''(((3)))''                   ⍝ deep parentheses.⍞000D A     ⍞000D┌┴─┐   ⍞000D( ┌┴─┐ ⍞000D  ( ┌┴┐⍞000D    ( 3⍞000D⍞000D    try ''#.a #.(b+1) #.#.c + 2''     ⍝ lotsa dots.⍞000D                         A     ⍞000D                    ┌────┴────┐⍞000D             ┌──────┴───────┐ 2⍞000D     ┌───────┴───────┐      +  ⍞000D  ┌──┴───┐         ┌─┴──┐      ⍞000D ┌┴─┐  ┌─┴──┐     ┌┴┐  ┌┴─┐    ⍞000D┌┴┐ a ┌┴┐ ┌─┴─┐   # . ┌┴┐ c    ⍞000D# .   # . (  ┌┴─┐     # .      ⍞000D            ┌┴┐ 1              ⍞000D            b +                ⍞000D⍞000D    try ''{⍵=1:1 ⋄ 2|⍵:∇ 1+3×⍵ ⋄ ∇ ⍵÷2}''     ⍝ →osc← function⍞000D               F                           ⍞000D┌──────────────┴───────────────┐           ⍞000D{                       ┌──────┴──────┐    ⍞000D               ┌────────┴─────────┐ ┌─┴─┐  ⍞000D          ┌────┴─────┐            ⋄ ∇  ┌┴─┐⍞000D        ┌─┴─┐     ┌──┴──┐             ┌┴┐ 2⍞000D      ┌─┴─┐ ⋄   ┌─┴─┐ ┌─┴──┐          ⍵ ÷  ⍞000D    ┌─┴─┐ 1    ┌┴─┐ : ∇  ┌─┴──┐            ⍞000D   ┌┴─┐ :     ┌┴┐ ⍵     ┌┴┐  ┌┴─┐          ⍞000D  ┌┴┐ 1       2 |       1 + ┌┴┐ ⍵          ⍞000D  ⍵ =                       3 ×            ⍞000D⍞000D    try ''x←3 4⍴⍳5 ⋄ #.a ∘.+ b[⍳3;] +.× ∘.{(+/⍵)÷⍴⍵}⍨ c''     ⍝ complex expression⍞000D                     A                                             ⍞000D         ┌───────────┴───────────┐                                 ⍞000D    ┌────┴────┐     ┌────────────┴─────────────┐                   ⍞000D ┌──┴───┐     ⋄   ┌─┴──┐          ┌────────────┴────────────┐      ⍞000D┌┴┐   ┌─┴──┐     ┌┴─┐ ┌┴─┐    ┌───┴────┐               ┌────┴─────┐⍞000Dx ←  ┌┴─┐ ┌┴┐   ┌┴┐ a ∘ ┌┴┐ ┌─┴─┐     ┌┴─┐    ┌────────┴────────┐ c⍞000D    ┌┴┐ ⍴ ⍳ 5   # .     . + b ┌─┴─┐   + ┌┴┐ ┌─┴──┐              ⍨  ⍞000D    3 4                       [  ┌┴─┐   . × ∘ ┌──┴───┐             ⍞000D                                ┌┴┐ ;         . ┌────┴────┐        ⍞000D                                ⍳ 3             {      ┌──┴──┐     ⍞000D                                                    ┌──┴──┐ ┌┴┐    ⍞000D                                                  ┌─┴─┐   ÷ ⍴ ⍵    ⍞000D                                                  (  ┌┴─┐          ⍞000D                                                    ┌┴┐ ⍵          ⍞000D                                                    + /            ' 
