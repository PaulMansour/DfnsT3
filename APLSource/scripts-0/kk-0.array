'⍝ Kind Koloring of d-fnop named ⍵:⍞000D⍞000D    ∆←{⎕IO←0                                    ⍝ colouring of segs ⍵⍞000D        0⊣⎕EX fnop←''fnop'':                      ⍝ local name "fnop"⍞000D        ⍎''fnop←{'',⍵,''} ⋄ 0'':                    ⍝ local fnop←{...}⍞000D        xk←(,¨''NFMD'')(1 2 3 4)                  ⍝ simulated external kinds⍞000D        cv←⊃⍎''xk kk''''fnop''''''                    ⍝ colour vector⍞000D        (6↑''''),6↓¯1↓cv                          ⍝ alignment⍞000D    }                                           ⍝ :: Kmap ← ∇ Body⍞000D⍞000D    ∆''a←⍺ ⋄ b←⍵ ⋄ a+b''                          ⍝ local a and b : nil⍞000D      N·····N·····N·N⍞000D⍞000D    ∆''sum←+/⍵ ⋄ num←≢ ⋄ (sum÷num)⍵''             ⍝ (sum÷num) : fun⍞000D      NNN·······FFF·····FNNN·FFFF·⍞000D⍞000D    ∆''sum←+/⍵ ⋄ num←≢⍵ ⋄ (sum÷num)''             ⍝ (sum÷num) : nil⍞000D      NNN·······NNN······NNNN·NNNN⍞000D⍞000D    ∆''a(b(c d))←((e f)g)h←⍵''                    ⍝ struct and multiple assignment⍞000D      N·N·N·N·····N·N·N·N··⍞000D⍞000D    ∆''vec[vec←⍵]''                               ⍝ indexing⍞000D      NNN·NNN···⍞000D⍞000D    ∆''vec[vec←⍵]←⍵''                             ⍝ indexed assignment⍞000D      NNN·NNN·····⍞000D⍞000D    ∆''mop←{⍺⍺}''                                 ⍝ monadic operator⍞000D      MMM·M··M⍞000D⍞000D    ∆''dop←{⍵⍵}''                                 ⍝ dyadic operator⍞000D      DDD·D··D⍞000D⍞000D    ∆''nil←{⍵}⍵''                                 ⍝ applied fn returns nil⍞000D      NNN·F·F·⍞000D⍞000D    ∆''nil←1+2+3 ⋄ fun←1+2+-''                    ⍝ array v train⍞000D      NNN·········FFF······⍞000D⍞000D    ∆''nil←⍺⍺ 0 ⋄ fun←⍵⍵ +''                      ⍝ array v train⍞000D      NNN········FFF····⍞000D⍞000D    ∆''nil←N N ⋄ mop←D F ⋄ dop←D ⋄ fun←F M F''    ⍝ various expressions⍞000D      NNN·N·N···MMM·D·F···DDD·D···FFF·F·M·F⍞000D⍞000D    ∆''nil←N D F N''                              ⍝ needs BG parsing?⍞000D      NNN·N·D·F·N⍞000D⍞000D    ∆''((1))''                                    ⍝ nested parens⍞000D      NN·NN⍞000D⍞000D    ∆''qqq←+ ⋄ nil←{qqq}0 ⋄ fun←{qqq} ⋄ qqq←0''   ⍝ deferred fn evaluation⍞000D      FFF·····NNN·FFFFF····FFF·FNNNF···NNN··⍞000D⍞000D    ∆''aaa←(bbb←0)''                              ⍝ assignment expression⍞000D      NNN·NNNN··N⍞000D⍞000D    ∆''(# #).(⍺+.×⍵)∘.,0''                        ⍝ space-ref and products⍞000D      N···N·N·····N····⍞000D⍞000D    ∆''nil←(+)1''                                 ⍝ parenthises fn⍞000D      NNN·F·F·⍞000D⍞000D    ∆''((x[0+0])⊃x)←0''                           ⍝ selective assignment⍞000D      ·NN·····N·N···⍞000D    ∆''(0/1,v)←1''                                ⍝ selective assignment⍞000D      ·····N···⍞000D⍞000D    ∆''nil←⍺''                                    ⍝ alpha default⍞000D      NNN··⍞000D    ∆''⍺←0 ⋄ nil←⍺''                              ⍝ alpha assignment⍞000D      ······NNN··⍞000D    ∆''⍺←⊢ ⋄ rnd←⍺''                              ⍝ alpha assignment⍞000D      ······rrr··⍞000D⍞000D    ∆''nil←0/¨0 ⋄ nil←+/¨0''                      ⍝ hybrid⍞000D      NNN········NNN·····⍞000D⍞000D    ∆''zzz←⍎⍵''                                   ⍝ execute assumes N⍞000D      NNN···⍞000D⍞000D    ∆''this←+ ⋄ ⍵:this←0 ⋄ this''                 ⍝ guarded expr: envt unaltered⍞000D      FFFF·······NNNN·····FFFF⍞000D⍞000D    ∆''⍺{⍺⍺ ⍵}{⍺ ⍺⍺ ⍵⍵ ⍵}⍵⍵⊢⍵''                   ⍝ example from Cut operator⍞000D      ·M····MD·········D····⍞000D⍞000D    show←{↑↑,/(⎕NR ⍵){⍺ ⍵}¨⍺⍺ ⍵}                ⍝ interleaved lines and colours⍞000D⍞000D    kk show''show''                               ⍝ selfie⍞000Dshow←{↑↑,/(⎕NR ⍵){⍺ ⍵}¨⍺⍺ ⍵}⍞000DMMMM·M····N·····NF···F·····M⍞000D⍞000D    kk show''∆''                                  ⍝ colouring of colouring fn⍞000D∆←{⎕IO←0                                    ⍝ colouring of segs ⍵         ⍞000DF·F······························································         ⍞000D        0⊣⎕EX fnop←''fnop'':                      ⍝ local name "fnop"       ⍞000D··············NNNN·················································       ⍞000D        ⍎''fnop←{'',⍵,''} ⋄ 0'':                    ⍝ local fnop←{...}        ⍞000D··································································        ⍞000D        xk←(,¨''NFMD'')(1 2 3 4)                  ⍝ simulated external kinds⍞000D········NN·N········NN·······N············································⍞000D        cv←⊃⍎''xk kk''''fnop''''''                    ⍝ colour vector           ⍞000D········NN·····················································           ⍞000D        (6↑''''),6↓¯1↓cv                          ⍝ alignment               ⍞000D········N····N······NN·····································               ⍞000D    }                                                                     ⍞000D····F                                                                     ' 
