'⍝ Trace function application:⍞000D⍞000D⍝ [trace] uses ⎕← to display monitoring information in the session.⍞000D⍝ For testing, we modify the temporary copy of the operator in this⍞000D⍝ namespace to output to variable ∆out.⍞000D⍞000D    sout←''⎕←'' ''∆out,∘⊂∘⍕←''∘subs         ⍝ subs ∆out← for ⎕←⍞000D⍞000D    _←⎕fx sout ⎕cr''trace''               ⍝ modify trace operator.⍞000D⍞000D    ∆out←''''                             ⍝ initialise output buffer.⍞000D    +/trace ⍳5                          ⍝ trace "over" reduction.⍞000D15⍞000D    ↑∆out                               ⍝ show traced output.⍞000D +/  1 2 3 4 5  =>  15⍞000D⍞000D    ∆out←''''⍞000D    +trace/ ⍳5                          ⍝ trace "into" reduction⍞000D15⍞000D    ↑∆out⍞000D4  +  5  =>  9  ⍞000D3  +  9  =>  12 ⍞000D2  +  12  =>  14⍞000D1  +  14  =>  15⍞000D⍞000D    ∆out←''''⍞000D    +trace/ 2 4⍴⍳8                      ⍝ reduction of matrix⍞000D10 26⍞000D    ↑∆out⍞000D3  +  4  =>  7  ⍞000D2  +  7  =>  9  ⍞000D1  +  9  =>  10 ⍞000D7  +  8  =>  15 ⍞000D6  +  15  =>  21⍞000D5  +  21  =>  26⍞000D⍞000D    ∆out←''''⍞000D    2(+trace ,trace ×trace)3            ⍝ trace of fork⍞000D5 6⍞000D    ↑∆out⍞000D2  ×  3  =>  6   ⍞000D2  +  3  =>  5   ⍞000D5  ,  6  =>  5 6 ⍞000D⍞000D    ∆out←''''⍞000D    +trace\⍳4                           ⍝ trace of scan⍞000D1 3 6 10⍞000D    ↑∆out⍞000D1  +  2  =>  3 ⍞000D2  +  3  =>  5 ⍞000D1  +  5  =>  6 ⍞000D3  +  4  =>  7 ⍞000D2  +  7  =>  9 ⍞000D1  +  9  =>  10⍞000D⍞000D    ∆out←''''⍞000D    ⊢trace¨⍳4                           ⍝ trace of each⍞000D1 2 3 4⍞000D    ↑∆out⍞000D ⊢  1  =>  1⍞000D ⊢  2  =>  2⍞000D ⊢  3  =>  3⍞000D ⊢  4  =>  4⍞000D⍞000D:If 0               ⍝ for change to evaluation order of inner product:⍞000D        ∆out←''''⍞000D        2 3 4 5 +trace.(×trace) 6 7 8 9     ⍝ trace inner product.⍞000D    110⍞000D        ↑∆out⍞000D    5  ×  9  =>  45   ⍞000D    4  ×  8  =>  32   ⍞000D    32  +  45  =>  77 ⍞000D    3  ×  7  =>  21   ⍞000D    21  +  77  =>  98 ⍞000D    2  ×  6  =>  12   ⍞000D    12  +  98  =>  110⍞000D:EndIf' 
