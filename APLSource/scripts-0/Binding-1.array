'⍝ Simplified version of Dyalog''s binding rules:⍞000D⍞000D    defs ← scripts._dyalog⍞000D⍞000D⍝ The rules are encoded as follows. See ##.notes.parse for details.⍞000D⍞000D    display defs⍞000D┌→───────────────────────────────────────────────────────────────────────────┐⍞000D│⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝ Categories:                               │⍞000D│⍝   ┌──── sample tokens ────┐   ⍝ ┌ First-class (from V14) nameable items   │⍞000D│A   1 2 3 4 5 6 # ⍺ ⍵ a b c d   ⍝ * Array                                   │⍞000D│F   + - × ÷ ⌊ ↓ ⍳ ⍴ ⊂ ≢ , f g   ⍝ * Function                                │⍞000D│H   / ⌿ \ ⍀                 ←   ⍝ * Hybrid function/operator                │⍞000D│AF                              ⍝   bound left argument                     │⍞000D│MOP  ¨ ⍨ &                      ⍝ * Monadic operator                        │⍞000D│DOP  ⍣                          ⍝   Dyadic operator                         │⍞000D│JOT  ∘                          ⍝   Jot: compose / null operand             │⍞000D│DOT  .                          ⍝   Dot: ref / product                      │⍞000D│REF                             ⍝   ref:dot                                 │⍞000D│IDX                             ⍝   index/axis                              │⍞000D│ERR                             ⍝   error                                   │⍞000D│() [IDX]                        ⍝   brackets                                │⍞000D│⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝ Macros:                                   │⍞000D│func=F.H                        ⍝   function                                │⍞000D│rand=A.func                     ⍝   operand                                 │⍞000D│1st=rand.MOP                    ⍝   first-class item                        │⍞000D│item=1st.DOP                    ⍝   dottable item                           │⍞000D│⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝ Bindings:                                 │⍞000D│                                ⍝ ┌ strength                                │⍞000D│A:DOT→REF REF:item→item         ⍝ 7 ref to dot to item                      │⍞000D│                                ⍝                                           │⍞000D│A:A→A                           ⍝ 6 array to array: vector (strand)         │⍞000D│DOT:A.DOP→ERR                   ⍝   prevents: #.a+b → #.(a+b)               │⍞000D│                                ⍝                                           │⍞000D│DOP.JOT:rand→MOP                ⍝ 5 dyadic operator (inc ∘) to right operand│⍞000D│DOT:func→MOP                    ⍝   inner product (with dot as operator)    │⍞000D│                                ⍝                                           │⍞000D│rand.JOT:MOP→F                  ⍝ 4 left operand (inc ∘) to monadic operator│⍞000D│func:H→F                        ⍝   hybrid as operator                      │⍞000D│rand:IDX→rand                   ⍝   axis / index                            │⍞000D│MOP:H→ERR                       ⍝   prevents: +¨/¨ → (+¨)(/¨)               │⍞000D│                                ⍝                                           │⍞000D│A:func→AF                       ⍝ 3 left argument to function (inc hybrid)  │⍞000D│IDX:A.func→ERR                  ⍝   prevents: v[0]+1 → v[0](+1)             │⍞000D│                                ⍝                                           │⍞000D│AF.F:A→A                        ⍝ 2 function to its right argument          │⍞000D│                                ⍝                                           │⍞000D│AF.func:F→F                     ⍝ 1 function to function (train)            │⍞000D│                                ⍝                                           │⍞000D│⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝                                           │⍞000D└────────────────────────────────────────────────────────────────────────────┘⍞000D⍞000D⍝ ... which generates this binding table:⍞000D⍞000D    defs parse ''''⍞000D    ┌─────┬─────┬─────┬─────┬─────┬─────┬───┐⍞000D    │A    │F    │H    │MOP  │DOP  │DOT  │IDX│⍞000D┌───┼─────┼─────┼─────┼─────┼─────┼─────┼───┤⍞000D│A  │6 A  │3 AF │3 AF │4 F  │     │7 REF│4 A│⍞000D├───┼─────┼─────┼─────┼─────┼─────┼─────┼───┤⍞000D│F  │2 A  │1 F  │4 F  │4 F  │     │     │4 F│⍞000D├───┼─────┼─────┼─────┼─────┼─────┼─────┼───┤⍞000D│H  │     │1 F  │4 F  │4 F  │     │     │4 H│⍞000D├───┼─────┼─────┼─────┼─────┼─────┼─────┼───┤⍞000D│AF │2 A  │1 F  │     │     │     │     │   │⍞000D├───┼─────┼─────┼─────┼─────┼─────┼─────┼───┤⍞000D│MOP│     │     │4 ERR│     │     │     │   │⍞000D├───┼─────┼─────┼─────┼─────┼─────┼─────┼───┤⍞000D│DOP│5 MOP│5 MOP│5 MOP│     │     │     │   │⍞000D├───┼─────┼─────┼─────┼─────┼─────┼─────┼───┤⍞000D│JOT│5 MOP│5 MOP│5 MOP│4 F  │     │     │   │⍞000D├───┼─────┼─────┼─────┼─────┼─────┼─────┼───┤⍞000D│DOT│6 ERR│5 MOP│5 MOP│     │6 ERR│     │   │⍞000D├───┼─────┼─────┼─────┼─────┼─────┼─────┼───┤⍞000D│REF│7 A  │7 F  │7 H  │7 MOP│7 DOP│     │   │⍞000D├───┼─────┼─────┼─────┼─────┼─────┼─────┼───┤⍞000D│IDX│3 ERR│3 ERR│3 ERR│     │     │     │   │⍞000D└───┴─────┴─────┴─────┴─────┴─────┴─────┴───┘⍞000D⍞000D⍝ ... which is used to parse the following expressions:⍞000D⍞000D    try ← defs∘parse        ⍝ Handy shortcut.⍞000D⍞000D    try ''2×3-⌊4÷5+6''        ⍝ Function-Argument expressions associate right.⍞000D    A              ⍞000D ┌──┴──┐           ⍞000D┌┴┐  ┌─┴──┐        ⍞000D2 × ┌┴┐ ┌─┴──┐     ⍞000D    3 - ⌊  ┌─┴──┐  ⍞000D          ┌┴┐  ┌┴─┐⍞000D          4 ÷ ┌┴┐ 6⍞000D              5 +  ⍞000D⍞000D    try ''+.×/¨⍣2⍨⍀&''        ⍝ Operand-Operator expressions associate left.⍞000D               F   ⍞000D             ┌─┴──┐⍞000D           ┌─┴──┐ &⍞000D        ┌──┴──┐ ⍀  ⍞000D     ┌──┴──┐  ⍨    ⍞000D   ┌─┴──┐ ┌┴┐      ⍞000D ┌─┴──┐ ¨ ⍣ 2      ⍞000D┌┴─┐  /            ⍞000D+ ┌┴┐              ⍞000D  . ×              ⍞000D⍞000D    try ''+⌿ ÷ ≢''            ⍝ Function-train: fork.⍞000D    F  ⍞000D  ┌─┴─┐⍞000D ┌┴─┐ ≢⍞000D┌┴┐ ÷  ⍞000D+ ⌿    ⍞000D⍞000D    try ''⍺[2+⍳3]×4''         ⍝ Square-bracket indexing.⍞000D          A    ⍞000D       ┌──┴───┐⍞000D  ┌────┴────┐ 4⍞000D┌─┴─┐       ×  ⍞000D⍺ ┌─┴──┐       ⍞000D  [  ┌─┴─┐     ⍞000D    ┌┴┐ ┌┴┐    ⍞000D    2 + ⍳ 3    ⍞000D⍞000D    try ''#.a #.b[2]''        ⍝ Dotting trumps stranding trumps bracketing.⍞000D         A     ⍞000D     ┌───┴───┐ ⍞000D  ┌──┴──┐   ┌┴┐⍞000D ┌┴─┐  ┌┴─┐ [ 2⍞000D┌┴┐ a ┌┴┐ b    ⍞000D# .   # .      ⍞000D⍞000D    try ''a[],[1]←2''         ⍝ Modified (with axis) indexed assignment.⍞000D        A    ⍞000D    ┌───┴───┐⍞000D ┌──┴──┐    2⍞000D┌┴┐  ┌─┴──┐  ⍞000Da [ ┌┴─┐  ←  ⍞000D    , ┌┴┐    ⍞000D      [ 1    ⍞000D⍞000D    try ''(a b)(c d)←⍵''      ⍝ Structured assignment.⍞000D           A   ⍞000D        ┌──┴──┐⍞000D    ┌───┴───┐ ⍵⍞000D ┌──┴──┐    ←  ⍞000D┌┴─┐  ┌┴─┐     ⍞000D( ┌┴┐ ( ┌┴┐    ⍞000D  a b   c d    ⍞000D⍞000D    try ''a←(f←(g←+)/)b←⍵''   ⍝ Embedded name assignments.⍞000D       A                 ⍞000D ┌─────┴──────┐          ⍞000D┌┴┐    ┌──────┴───────┐  ⍞000Da ← ┌──┴───┐         ┌┴─┐⍞000D    (  ┌───┴───┐    ┌┴┐ ⍵⍞000D      ┌┴┐   ┌──┴──┐ b ←  ⍞000D      f ← ┌─┴─┐   /      ⍞000D          (  ┌┴─┐        ⍞000D            ┌┴┐ +        ⍞000D            g ←          ⍞000D⍞000D    try¨ ''1/¨⍵'' ''+/¨⍵''      ⍝ Hybrid ''/'' as function and operator.⍞000D    A         A   ⍞000D  ┌─┴──┐    ┌─┴─┐ ⍞000D ┌┴─┐  ⍵   ┌┴─┐ ⍵ ⍞000D 1 ┌┴┐    ┌┴┐ ¨   ⍞000D   / ¨    + /     ⍞000D⍞000D    try ''∘.⍺.⍳∘+''           ⍝ Jots & dots in different guises.⍞000D      F      ⍞000D  ┌───┴────┐ ⍞000D┌─┴─┐     ┌┴┐⍞000D∘ ┌─┴─┐   ∘ +⍞000D  .  ┌┴─┐    ⍞000D    ┌┴┐ ⍳    ⍞000D    ⍺ .      ⍞000D⍞000D    try¨ ''⊂⍣2 a'' ''(⊂⍣2)a'' ''⊂⍣2,a''   ⍝ Separating array operand from argument.⍞000D  F           A           A    ⍞000D ┌┴─┐      ┌──┴───┐     ┌─┴──┐ ⍞000D ⊂ ┌┴─┐   ┌┴─┐    a   ┌─┴──┐ a ⍞000D   ⍣ ┌┴┐  ( ┌┴─┐     ┌┴─┐  ,   ⍞000D     2 a    ⊂ ┌┴┐    ⊂ ┌┴┐     ⍞000D              ⍣ 2      ⍣ 2     ⍞000D⍞000D    try ''(↓(a↓¨b)[⍳c])←1''   ⍝ Selective assignment.⍞000D                A      ⍞000D           ┌────┴─────┐⍞000D   ┌───────┴────────┐ 1⍞000D┌──┴──┐             ←  ⍞000D( ┌───┴───┐            ⍞000D  ↓   ┌───┴────┐       ⍞000D    ┌─┴──┐    ┌┴─┐     ⍞000D    (  ┌─┴──┐ [ ┌┴┐    ⍞000D      ┌┴─┐  b   ⍳ c    ⍞000D      a ┌┴┐            ⍞000D        ↓ ¨            ⍞000D⍞000D⍝ We can extend this simple binding table with, for example:⍞000D⍝ - Dfns, guards and diamonds,⍞000D⍝ - Subscript lists x;y;... for indexing.⍞000D⍞000D    xdefs ← scripts._dyalogX⍞000D⍞000D    display xdefs           ⍝ Extended definitions: "⍝⍝" lines are new:⍞000D┌→───────────────────────────────────────────────────────────────────────────┐⍞000D│⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝ Categories:                               │⍞000D│⍝   ┌──── sample tokens ────┐   ⍝ ┌ First-class (from V14) nameable items   │⍞000D│A   0 1 2 3 4 5 6 ⍺ ⍵ a b c d   ⍝ * Array                                   │⍞000D│F   + - × ÷ = ⍳ | ∇ e f g       ⍝ * Function                                │⍞000D│H   / ⌿ \ ⍀                 ←   ⍝ * Hybrid function/operator                │⍞000D│AF                              ⍝   bound left argument                     │⍞000D│MOP  ¨ ⍨ &                      ⍝ * Monadic operator                        │⍞000D│DOP  ⍣                          ⍝   Dyadic operator                         │⍞000D│JOT  ∘                          ⍝   Jot: compose / null operand             │⍞000D│DOT  .                          ⍝   Dot: ref / product                      │⍞000D│REF                             ⍝   ref-dot ...                             │⍞000D│IDX                             ⍝   index/axis                              │⍞000D│ERR                             ⍝   error                                   │⍞000D│LST  ;                         ⍝⍝   subscript list separator                │⍞000D│XLS  ⋄                         ⍝⍝   expression list separator               │⍞000D│CLN  :                         ⍝⍝   colon for guard                         │⍞000D│GRD                            ⍝⍝   guard:                                  │⍞000D│() [IDX] {F}                   ⍝⍝   brackets, note dfn: {F}                 │⍞000D│⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝ Macros:                                   │⍞000D│func=F.H                        ⍝   function                                │⍞000D│rand=A.func                     ⍝   operand                                 │⍞000D│1st=rand.MOP                    ⍝   first-class item                        │⍞000D│item=1st.DOP                    ⍝   dottable item                           │⍞000D│⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝ Bindings:                                 │⍞000D│                                ⍝ ┌ strength                                │⍞000D│A:DOT→REF REF:item→item         ⍝ 10 dotted expression                      │⍞000D│                                ⍝                                           │⍞000D│A:A→A                           ⍝ 9 array to array: vector (strand)         │⍞000D│DOT:A.DOP→ERR                   ⍝   prevents: #.a+b → #.(a+b)               │⍞000D│                                ⍝                                           │⍞000D│DOP.JOT:rand→MOP                ⍝ 8 dyadic operator (inc ∘) to right operand│⍞000D│DOT:func→MOP                    ⍝   inner product (with dot as operator)    │⍞000D│                                ⍝                                           │⍞000D│rand.JOT:MOP→F                  ⍝ 7 left operand (inc ∘) to monadic operator│⍞000D│func:H→F                        ⍝   hybrid as operator                      │⍞000D│rand:IDX→rand                   ⍝   axis / index                            │⍞000D│MOP:H→ERR                       ⍝   prevents: +¨/¨ → (+¨)(/¨)               │⍞000D│                                ⍝                                           │⍞000D│A:func→AF                       ⍝ 6 left argument to function (inc hybrid)  │⍞000D│IDX:A.func→ERR                  ⍝   prevents: v[0]+1 → v[0](+1)             │⍞000D│                                ⍝                                           │⍞000D│AF.F:A→A                        ⍝ 5 function to its right argument          │⍞000D│                                ⍝                                           │⍞000D│AF.func:F→F                     ⍝ 4 function to function (train)            │⍞000D│                                ⍝                                           │⍞000D│A.LST:LST→LST LST:A→LST        ⍝⍝ 3 subscript list: [2;] [2;;]              │⍞000D│                               ⍝⍝                                           │⍞000D│A:CLN→GRD GRD:A→A              ⍝⍝ 2 guard returns an Array.                 │⍞000D│CLN:A→ERR                      ⍝⍝   to prevent: 1:2⋄ → 1:(2⋄)               │⍞000D│                               ⍝⍝                                           │⍞000D│1st.XLS:XLS→XLS XLS:1st→1st    ⍝⍝ 1 expression list .. ⋄ .. ⋄ ..            │⍞000D│                               ⍝⍝                                           │⍞000D│⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝                                           │⍞000D└────────────────────────────────────────────────────────────────────────────┘⍞000D⍞000D⍝ ... which generates this binding table with 4 more rows and 3 more columns:⍞000D⍞000D    xdefs parse ''''⍞000D    ┌─────┬─────┬─────┬──────┬──────┬──────┬───┬─────┬─────┬─────┐⍞000D    │A    │F    │H    │MOP   │DOP   │DOT   │IDX│LST  │XLS  │CLN  │⍞000D┌───┼─────┼─────┼─────┼──────┼──────┼──────┼───┼─────┼─────┼─────┤⍞000D│A  │9 A  │6 AF │6 AF │7 F   │      │10 REF│7 A│3 LST│1 XLS│2 GRD│⍞000D├───┼─────┼─────┼─────┼──────┼──────┼──────┼───┼─────┼─────┼─────┤⍞000D│F  │5 A  │4 F  │7 F  │7 F   │      │      │7 F│     │1 XLS│     │⍞000D├───┼─────┼─────┼─────┼──────┼──────┼──────┼───┼─────┼─────┼─────┤⍞000D│H  │     │4 F  │7 F  │7 F   │      │      │7 H│     │1 XLS│     │⍞000D├───┼─────┼─────┼─────┼──────┼──────┼──────┼───┼─────┼─────┼─────┤⍞000D│AF │5 A  │4 F  │     │      │      │      │   │     │     │     │⍞000D├───┼─────┼─────┼─────┼──────┼──────┼──────┼───┼─────┼─────┼─────┤⍞000D│MOP│     │     │7 ERR│      │      │      │   │     │1 XLS│     │⍞000D├───┼─────┼─────┼─────┼──────┼──────┼──────┼───┼─────┼─────┼─────┤⍞000D│DOP│8 MOP│8 MOP│8 MOP│      │      │      │   │     │     │     │⍞000D├───┼─────┼─────┼─────┼──────┼──────┼──────┼───┼─────┼─────┼─────┤⍞000D│JOT│8 MOP│8 MOP│8 MOP│7 F   │      │      │   │     │     │     │⍞000D├───┼─────┼─────┼─────┼──────┼──────┼──────┼───┼─────┼─────┼─────┤⍞000D│DOT│9 ERR│8 MOP│8 MOP│      │9 ERR │      │   │     │     │     │⍞000D├───┼─────┼─────┼─────┼──────┼──────┼──────┼───┼─────┼─────┼─────┤⍞000D│REF│10 A │10 F │10 H │10 MOP│10 DOP│      │   │     │     │     │⍞000D├───┼─────┼─────┼─────┼──────┼──────┼──────┼───┼─────┼─────┼─────┤⍞000D│IDX│6 ERR│6 ERR│6 ERR│      │      │      │   │     │     │     │⍞000D├───┼─────┼─────┼─────┼──────┼──────┼──────┼───┼─────┼─────┼─────┤⍞000D│LST│3 LST│     │     │      │      │      │   │3 LST│     │     │⍞000D├───┼─────┼─────┼─────┼──────┼──────┼──────┼───┼─────┼─────┼─────┤⍞000D│XLS│1 A  │1 F  │1 H  │1 MOP │      │      │   │     │1 XLS│     │⍞000D├───┼─────┼─────┼─────┼──────┼──────┼──────┼───┼─────┼─────┼─────┤⍞000D│CLN│2 ERR│     │     │      │      │      │   │     │     │     │⍞000D├───┼─────┼─────┼─────┼──────┼──────┼──────┼───┼─────┼─────┼─────┤⍞000D│GRD│2 A  │     │     │      │      │      │   │     │     │     │⍞000D└───┴─────┴─────┴─────┴──────┴──────┴──────┴───┴─────┴─────┴─────┘⍞000D⍞000D⍝ ... which is used to parse the following expressions:⍞000D⍞000D    try ← xdefs∘parse           ⍝ Handy shortcut.⍞000D⍞000D    try ''a[2+⍳3;;4+⍳5]''         ⍝ Indexing with subscript list⍞000D    A                  ⍞000D┌───┴───┐              ⍞000Da ┌─────┴──────┐       ⍞000D  [        ┌───┴───┐   ⍞000D         ┌─┴──┐  ┌─┴─┐ ⍞000D       ┌─┴──┐ ; ┌┴┐ ┌┴┐⍞000D     ┌─┴─┐  ;   4 + ⍳ 5⍞000D    ┌┴┐ ┌┴┐            ⍞000D    2 + ⍳ 3            ⍞000D⍞000D    try ''f←+ ⋄ g←f/ ⋄ g''        ⍝ Expression list returning function⍞000D              F    ⍞000D           ┌──┴───┐⍞000D       ┌───┴────┐ g⍞000D    ┌──┴───┐    ⋄  ⍞000D  ┌─┴─┐  ┌─┴─┐     ⍞000D ┌┴─┐ ⋄ ┌┴┐ ┌┴┐    ⍞000D┌┴┐ +   g ← f /    ⍞000Df ←                ⍞000D⍞000D    try ''e←{⍺=0:|⍵ ⋄ ⍵ ∇ |⍺-⍵}''     ⍝ Euclid''s GCD as a named dfn⍞000D      F                        ⍞000D ┌────┴────┐                   ⍞000D┌┴┐ ┌──────┴───────┐           ⍞000De ← {          ┌───┴───┐       ⍞000D            ┌──┴──┐  ┌─┴──┐    ⍞000D          ┌─┴──┐  ⋄ ┌┴┐ ┌─┴─┐  ⍞000D        ┌─┴─┐ ┌┴┐   ⍵ ∇ |  ┌┴─┐⍞000D       ┌┴─┐ : | ⍵         ┌┴┐ ⍵⍞000D      ┌┴┐ 0               ⍺ -  ⍞000D      ⍺ =                      ' 
