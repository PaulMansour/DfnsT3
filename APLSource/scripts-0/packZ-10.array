'⍝ Lempel-Ziv-Welch compression:⍞000D⍞000D      packZ''mississippi''                    ⍝ compress char vector.⍞000D 11  0 0 0 0 1 1 0 0 0  misp ⍞000D     0 0 1 1 0 1 1 1 0       ⍞000D     0 1 0 0 1 1 1 1 1       ⍞000D⍞000D      {⍵≡0 packZ packZ ⍵}''mississippi''      ⍝ expand recovers original.⍞000D1⍞000D⍞000D      2⊥2⊃packZ''mississippi''                ⍝ ... bool matrix decoded.⍞000D0 1 2 2 5 7 3 3 1⍞000D⍞000D      disp ¯8 packZ''mississippi''            ⍝ final compression dictionary.⍞000D┌─┬─┬─┬─┬──┬──┬──┬──┬───┬───┬──┬──┐⍞000D│m│i│s│p│mi│is│ss│si│iss│sip│pp│pi│⍞000D└─┴─┴─┴─┴──┴──┴──┴──┴───┴───┴──┴──┘⍞000D⍞000D      segs←{(¯12 packZ ⍵)[⎕io+2⊥2⊃packZ ⍵]} ⍝ dictionary entry per code word.⍞000D⍞000D      disp segs''mississippi''                ⍝ segments for string.⍞000D┌─┬─┬─┬─┬──┬──┬─┬─┬─┐⍞000D│m│i│s│s│is│si│p│p│i│⍞000D└─┴─┴─┴─┴──┴──┴─┴─┴─┘⍞000D⍞000D      {⍵≡↑,/segs ⍵}''mississippi''            ⍝ enlist of segs recovers original.⍞000D1⍞000D      disp segs 40⍴''a''                      ⍝ segs for highly repetitive string.⍞000D┌─┬──┬───┬────┬─────┬──────┬───────┬────────┬────┐⍞000D│a│aa│aaa│aaaa│aaaaa│aaaaaa│aaaaaaa│aaaaaaaa│aaaa│⍞000D└─┴──┴───┴────┴─────┴──────┴───────┴────────┴────┘⍞000D⍞000D      disp segs 40⍴''abcd''                   ⍝ segs for less repetitive string.⍞000D┌─┬─┬─┬─┬──┬──┬───┬──┬──┬───┬───┬───┬────┬─────┬────┬───┐⍞000D│a│b│c│d│ab│cd│abc│da│bc│dab│cda│bcd│abcd│abcda│bcda│bcd│⍞000D└─┴─┴─┴─┴──┴──┴───┴──┴──┴───┴───┴───┴────┴─────┴────┴───┘⍞000D⍞000D      disp packZ''hello world''               ⍝ compressed char vector.⍞000D┌──┬─────────────────────┬────────┐⍞000D│11│0 0 0 0 0 1 1 0 1 0 1│helo wrd│⍞000D│  │0 0 1 1 1 0 0 1 1 1 1│        │⍞000D│  │0 1 0 0 1 0 1 1 0 0 1│        │⍞000D└──┴─────────────────────┴────────┘⍞000D⍞000D      disp packZ 11 ⎕dr''hello world''        ⍝ compressed bool vector.⍞000D┌──┬───────────────────────────────────────────────────────────────┬───┐⍞000D│88│0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 0 1 0│0 1│⍞000D│  │0 0 0 0 0 0 0 0 0 0 0 1 0 1 1 0 1 0 1 1 0 1 1 0 0 1 0 0 1 1 1 0│   │⍞000D│  │0 0 0 0 0 1 0 1 1 1 0 0 1 1 1 1 1 0 0 0 1 0 0 0 1 0 1 0 0 1 1 0│   │⍞000D│  │0 0 0 1 0 1 1 0 0 0 1 0 1 0 0 1 1 1 0 0 1 0 1 1 1 0 0 0 0 1 0 0│   │⍞000D│  │0 1 1 0 0 0 0 0 1 0 1 0 1 0 0 0 1 1 1 1 1 0 1 0 1 0 0 1 0 0 0 0│   │⍞000D└──┴───────────────────────────────────────────────────────────────┴───┘⍞000D⍞000D      disp packZ 83 ⎕DR''hello world''        ⍝ compressed integer vector.⍞000D┌──┬─────────────────────┬──────────────────────────────┐⍞000D│11│0 0 0 0 0 1 1 0 1 0 1│104 101 108 111 32 119 114 100│⍞000D│  │0 0 1 1 1 0 0 1 1 1 1│                              │⍞000D│  │0 1 0 0 1 0 1 1 0 0 1│                              │⍞000D└──┴─────────────────────┴──────────────────────────────┘⍞000D⍞000D      size←{⍬⍴⎕size''⍵''}                     ⍝ function for size in bytes.⍞000D⍞000D:If {32=2×⎕size''⍵''}⍬                        ⍝ 32-bit interpreter:⍞000D⍞000D          size 100 100⍴⍳7                   ⍝ size of numeric matrix.⍞000D    10020⍞000D          size packZ 100 100⍴⍳7             ⍝ compressed size.⍞000D    512⍞000D:Else                                       ⍝ 64-bit interpreter:⍞000D          size 100 100⍴⍳7                   ⍝ size of numeric matrix.⍞000D    10040⍞000D          size packZ 100 100⍴⍳7             ⍝ compressed size.⍞000D    600⍞000D⍞000D:EndIf⍞000D⍞000D      chk←{⍺←⊢ ⋄ ⍵≡0 packZ ⍺ packZ ⍵}       ⍝ check unpack pack round trip.⍞000D⍞000D      chk notes.packZ                       ⍝ round-trip notes.⍞000D1⍞000D      8 chk notes.packZ                     ⍝ ... with 8-bit code words.⍞000D1⍞000D⍞000D      mat←''Scissors'' ''Stone'' ''Paper''[2 3⍴1 2 3 2 3 1]⍞000D⍞000D      disp mat                              ⍝ nested matrix.⍞000D┌────────┬─────┬────────┐⍞000D│Scissors│Stone│Paper   │⍞000D├────────┼─────┼────────┤⍞000D│Stone   │Paper│Scissors│⍞000D└────────┴─────┴────────┘⍞000D⍞000D:If {32=2×⎕size''⍵''}⍬                        ⍝ 32-bit interpreter:⍞000D⍞000D          size mat                          ⍝ matrix size.⍞000D    188⍞000D          size packZ ⍉mat                   ⍝ compressed size.⍞000D    172⍞000D:Else                                       ⍝ 64-bit interpreter:⍞000D          size mat                          ⍝ matrix size.⍞000D    328⍞000D          size packZ ⍉mat                   ⍝ compressed size.⍞000D    320⍞000D⍞000D:EndIf⍞000D⍞000D      disp packZ mat                        ⍝ compressed matrix.⍞000D┌───┬─────────┬──────────────────────┐⍞000D│2 3│0 0 0 1 0│┌────────┬─────┬─────┐│⍞000D│   │0 0 1 0 0││Scissors│Stone│Paper││⍞000D│   │0 1 0 0 0│└────────┴─────┴─────┘│⍞000D└───┴─────────┴──────────────────────┘⍞000D⍞000D      disp tokens ⊃⎕nr''packZ''               ⍝ tokens in first line of packZ.⍞000D┌─────┬─┬─┬───┬─┬───┬─┬─┬─┬─┬──────────────────────────┬───────────────────────────────┐⍞000D│packZ│←│{│⎕IO│ │⎕ML│←│0│ │1│                          │⍝ Lempel-Ziv-Welch compression.│⍞000D└─────┴─┴─┴───┴─┴───┴─┴─┴─┴─┴──────────────────────────┴───────────────────────────────┘⍞000D⍞000D      toks←↑,/tokens¨⎕nr''packZ''             ⍝ nested vector of packZ''s tokens.⍞000D⍞000D      chk toks                              ⍝ nested pack: full circle.⍞000D1⍞000D      chk ''hello world''                     ⍝ char pack: full circle.⍞000D1⍞000D      chk 11 ⎕dr''hello world''               ⍝ bool pack: full circle.⍞000D1⍞000D      disp packZ{⍵/⍵}⍳8⍞000D┌──┬───────────────────────────────────────────┬───────────────┐⍞000D│36│0 0 0 0 0 0 0 0 0 1 1 0 1 1 0 1 1 0 0 1 1 1│1 2 3 4 5 6 7 8│⍞000D│  │0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1│               │⍞000D│  │0 0 0 0 0 0 1 0 1 0 0 1 0 1 1 1 1 1 1 0 0 0│               │⍞000D│  │0 0 0 1 1 1 0 1 0 0 0 0 1 0 1 1 1 1 1 1 1 1│               │⍞000D│  │0 1 1 0 1 1 1 1 0 0 0 1 1 0 0 0 1 0 1 0 1 0│               │⍞000D└──┴───────────────────────────────────────────┴───────────────┘⍞000D⍞000D      ⎕ml←⍴''VMJ''                                ⍝ Check OK in ⎕ML 3.⍞000D      ''OK''≡0 packZ packZ''OK''⍞000D1' 
