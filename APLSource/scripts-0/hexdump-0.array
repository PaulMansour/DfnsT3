'⍝ Hex dump of native file.⍞000D⍞000D⍝ Hexdump uses ⍞235E← and ←⍞235E for input/output. For testing, we modify⍞000D⍝ the  temporary copy  of the function in this namespace to input⍞000D⍝ from variable ∆i and output to variable ∆o.⍞000D⍞000D⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍞000D    ∆in←{                               ⍝ input from buffer         ⍝⍞000D        nl←⊃⌽⎕tc                                                    ⍝⍞000D        in←(∧\nl≠∆i)/∆i                                             ⍝⍞000D        buf←⍵,in                                                    ⍝⍞000D        ∆o,←buf,nl                                                  ⍝⍞000D        {buf}∆i∘←(1+⍴in)↓∆i                                         ⍝⍞000D    }                                                               ⍝⍞000D                                                                    ⍝⍞000D    qp←''⍞235E⊣⍞235E←'' ''∆in''∘subs                ⍝ subs quote quad prompt    ⍝⍞000D    qt←''⍞235E←'' ''_←{∆o,←⍵}''∘subs            ⍝ subs quote quad output    ⍝⍞000D                                                                    ⍝⍞000D    _←⎕fx qt qp ⎕cr''hexdump''            ⍝ modify function.          ⍝⍞000D⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍞000D⍞000D    make←{                              ⍝ make test file.⍞000D        22::⍵  ⎕ncreate 0               ⍝ create if not already there.⍞000D        tie←⍵  ⎕ntie 0                  ⍝ attempt to tie and⍞000D        {tie}0 ⎕nresize tie             ⍝   empty file.⍞000D    }⍞000D⍞000D    nfid←''hexdump test file''            ⍝ test file.⍞000D    ntie←make nfid                      ⍝ create file.⍞000D    _←(323type⍳4)⎕nappend ntie          ⍝ 32-bit words 1 2 3 4⍞000D    _←''hexdump test''⎕nappend ntie       ⍝ char vector⍞000D    _←(323type 0 ¯1)⎕nappend ntie       ⍝ 32-bit words 0··0  f··f⍞000D    ⎕nsize ntie⍞000D36⍞000D    _←⎕nuntie ntie                      ⍝ release⍞000D⍞000D⍝ accumulate from script:⍞000D⍞000D    in←{{1:}_in,←⍵,⊃⌽⎕tc}               ⍝ append command.⍞000D⍞000D⍝ Command Stream:⍞000D⍞000D    _in←''''                              ⍝ null cmd vector.⍞000D    in''\\0\⎕dw=0''⍞000D    in''                          ⍝ base'' ⍞000D    in''100\⊥\10\0\!\⊥''⍞000D    in''c *                       ⍝ indirect''⍞000D    in''?                         ⍝ help''⍞000D    in''                          ⍝ arithmetic:''⍞000D    in''+10\-8\×5\÷3\%10''⍞000D    in''''''msg''''                     ⍝ message''⍞000D    in''msg=''''hello\               world''''''⍞000D    in''msg                       ⍝ multi-msg''⍞000D    in''along = )+4(              ⍝ macro defn''⍞000D    in''(                         ⍝ call''⍞000D    in''100                      ⍝ go 100''⍞000D    in''along                    ⍝ macro call''⍞000D    in'')                        ⍝ retn''⍞000D    in''(1 :+ :- :× :÷)4          ⍝ select case''⍞000D    in''0(⊤(0:+4))                ⍝ trace''⍞000D    in''<sub                      ⍝ include subscript''⍞000D    in''<sub1                     ⍝ test <indentation''⍞000D    in''eh                        ⍝ error''⍞000D    in''reps=(::dec-1reps)''⍞000D    in''9reps''⍞000D    in''1000hex                   ⍝ conv dec to hex\0''⍞000D    in''(10 ascs)''⍞000D    in''(2+\(\3)\)''⍞000D    in''1+(1+(1+1))               ⍝ right arg''⍞000D    in''⎕dw=2                     ⍝ 2 cols''⍞000D    in''←dead''⍞000D    in''(8←(beef×10000))''⍞000D    in''0⎕dw=0''⍞000D    in''sum ⍵ = + ⍵''⍞000D    in''2 sum 3''⍞000D    in''osc⍵=(⍵ dec'''' ''''::1:(⍵%2:osc(⍵÷2):osc(⍵×3+1)))''⍞000D    in''osc 7''⍞000D    in'')''⍞000D    ⍞000D⍝ Input and output buffers:⍞000D⍞000D    ∆i←''\''(⊃⌽⎕tc)subs _in⍞000D    ∆o←''''⍞000D⍞000D⍝ subscripts:⍞000D⍞000D    sub←''''''hello world''''''         ⍝ subscript.⍞000D⍞000D    sub1←''\''(⊃⌽⎕tc)subs ''ok='''':-(''''\⍝\        <sub2\        ok='''':-)''''\ok''⍞000D    sub2←''sub2=''⍞000D⍞000D⍝ chars script:⍞000D⍞000D    _in←''''                              ⍝ null cmd vector.⍞000D    in''ascs=(*%100::(*%100 asc) +1 ascs)       ⍝ ASCII string from file.''⍞000D    in''''⍞000D    in''asc=(                                   ⍝ ASCII char translation.''⍞000D    in''    :''''⌷'''':''''⍞0001'''':''''⍞0002'''':''''⍞0003'''':''''⍞0004'''':''''⍞0005'''':''''⍞0006'''':''''⍞0007'''':''''·'''':''''⍞0009'''':''''''⍞000D    in''                                             ''''  :''''⌶'''':''''⍞000C'''':''''·'''':''''ɫ'''':''''^''''''⍞000D    in''    :''''Ø'''':''''É'''':''''Ü'''':''''À'''':''''Ö'''':''''Ñ'''':''''Æ'''':''''ø'''':''''Ä'''':''''Å'''':''''í'''':''''⍞001B'''':''''´'''':''''∣'''':''''⍞001E'''':''''⍞001F''''''⍞000D    in''    :'''' '''':''''!'''':''''"'''':''''#'''':''''$'''':''''%'''':''''&'''':'''''''''''''''':''''('''':'''')'''':''''*'''':''''+'''':'''','''':''''-'''':''''.'''':''''/''''''⍞000D    in''    :''''0'''':''''1'''':''''2'''':''''3'''':''''4'''':''''5'''':''''6'''':''''7'''':''''8'''':''''9'''':'''':'''':'''';'''':''''<'''':''''='''':''''>'''':''''?''''''⍞000D    in''    :''''@'''':''''A'''':''''B'''':''''C'''':''''D'''':''''E'''':''''F'''':''''G'''':''''H'''':''''I'''':''''J'''':''''K'''':''''L'''':''''M'''':''''N'''':''''O''''''⍞000D    in''    :''''P'''':''''Q'''':''''R'''':''''S'''':''''T'''':''''U'''':''''V'''':''''W'''':''''X'''':''''Y'''':''''Z'''':''''['''':''''\'''':'''']'''':''''∧'''':''''_''''''⍞000D    in''    :''''`'''':''''a'''':''''b'''':''''c'''':''''d'''':''''e'''':''''f'''':''''g'''':''''h'''':''''i'''':''''j'''':''''k'''':''''l'''':''''m'''':''''n'''':''''o''''''⍞000D    in''    :''''p'''':''''q'''':''''r'''':''''s'''':''''t'''':''''u'''':''''v'''':''''w'''':''''x'''':''''y'''':''''z'''':''''{'''':''''|'''':''''}'''':''''~'''':''''''''''⍞000D    in''    :''''⊢'''':''''⊣'''':''''⊤'''':''''⊥'''':''''←'''':''''→'''':''''↑'''':''''↓'''':''''≤'''':''''≥'''':''''⍲'''':''''⍱'''':''''⎕'''':''''⍞235E'''':''''⌹'''':''''⍙''''''⍞000D    in''    :''''⍫'''':''''∆'''':''''∇'''':''''⍋'''':''''⍒'''':''''⍕'''':''''⍎'''':''''⌈'''':''''⌊'''':''''⍀'''':''''⌿'''':''''⊂'''':''''⊃'''':''''∩'''':''''∪'''':''''∨''''''⍞000D    in''    :''''⍞00A0'''':''''¡'''':''''¢'''':''''£'''':''''⊢'''':''''¥'''':''''⌷'''':''''§'''':''''¨'''':''''⍝'''':''''⋄'''':''''⍬'''':''''≠'''':''''≡'''':''''⍪'''':''''¯''''''⍞000D    in''    :''''∘'''':''''○'''':''''⌽'''':''''⍉'''':''''⊖'''':''''⍟'''':''''¶'''':''''·'''':''''⍺'''':''''∊'''':''''⍷'''':''''≢'''':''''⍳'''':''''⍴'''':''''⍵'''':''''¿''''''⍞000D    in''    :''''└'''':''''Á'''':''''Â'''':''''Ã'''':''''┴'''':''''┬'''':''''├'''':''''Ç'''':''''È'''':''''┐'''':''''Ê'''':''''Ë'''':''''Ì'''':''''Í'''':''''Î'''':''''Ï''''''⍞000D    in''    :''''Ð'''':''''─'''':''''Ò'''':''''Ó'''':''''Ô'''':''''Õ'''':''''┼'''':''''×'''':''''┘'''':''''Ù'''':''''Ú'''':''''Û'''':''''┌'''':''''Ý'''':''''þ'''':''''ß''''''⍞000D    in''    :''''à'''':''''á'''':''''â'''':''''ã'''':''''ä'''':''''å'''':''''æ'''':''''ç'''':''''è'''':''''é'''':''''ê'''':''''ë'''':''''ì'''':''''│'''':''''î'''':''''ï''''''⍞000D    in''    :''''ð'''':''''ñ'''':''''ò'''':''''ó'''':''''ô'''':''''õ'''':''''ö'''':''''÷'''':''''┤'''':''''ù'''':''''ú'''':''''û'''':''''ü'''':''''ý'''':''''⍨'''':''''⍣''''''⍞000D    in''    )''⍞000D    chars←_in⍞000D⍞000D⍝ hexdec script:⍞000D⍞000D    _in←''''⍞000D    in''dec = (:''''0'''':''''1'''':''''2'''':''''3'''':''''4'''':''''5'''':''''6'''':''''7'''':''''8'''':''''9'''':(÷a dec)(%a dec))''⍞000D    in''''⍞000D    in''hex =''⍞000D    in''     . = ÷10 sub × a +''⍞000D    in''     sub = (::(%10:.0:.1:.2:.3:.4:.5:.6:.7:.8:.9))''⍞000D    in''     sub''⍞000D    hexdec←_in⍞000D⍞000D    (''←'',chars,hexdec)hexdump nfid ⋄ ∆o             ⍝ accumulated output.⍞000D00000000:·00000001 00000002 00000003 00000004·         ⍞000D00000010:·64786568 20706d75 74736574 00000000·         ⍞000D00000020:·ffffffff·0                                   ⍞000D00000000:·00000001 00000002 00000003 00000004·⎕dw=0    ⍞000D00000000:·                          ⍝ base             ⍞000D00000000:·100                                          ⍞000D00000100:·⊥                                            ⍞000D00000100:·10                                           ⍞000D00000110:·0                                            ⍞000D00000100:·!                                            ⍞000D00000000:·⊥                                            ⍞000D00000000:·c *                       ⍝ indirect         ⍞000D00000004:·?                         ⍝ help             ⍞000D    hex   set file position.                           ⍞000D  + hex   increment.                                   ⍞000D  - hex   decrement.                                   ⍞000D  × hex   multiply.                                    ⍞000D  ÷ hex   integer divide.                              ⍞000D  % hex   integer remainder.                           ⍞000D  (       call.                                        ⍞000D  )       return.                                      ⍞000D  *       get word from file.                          ⍞000D  ← hex   put word to file.                            ⍞000D  ⊥       set base address.                            ⍞000D  !       absolute position.                           ⍞000D  : case  select case.                                 ⍞000D  ''···''   display message.                             ⍞000D  ?       help.                                        ⍞000D  < var   include subscript.                           ⍞000D  ⊤       trace on/off.                                ⍞000D  ⍝       comment.                                     ⍞000D   name = niladic macro.                               ⍞000D name ⍵ = monadic macro.                               ⍞000D    ⎕dw = display width 0-8.                           ⍞000D    ⎕be = big-endian 0/1.                              ⍞000D00000004:·                          ⍝ arithmetic:      ⍞000D00000004:·+10                                          ⍞000D00000014:·-8                                           ⍞000D0000000c:·×5                                           ⍞000D0000003c:·÷3                                           ⍞000D00000014:·%10                                          ⍞000D00000004:·''msg''                     ⍝ message          ⍞000Dmsg                                                    ⍞000D00000004:·msg=''hello                                   ⍞000D               world''                                  ⍞000D00000004:·msg                       ⍝ multi-msg        ⍞000Dhello                                                  ⍞000Dworld                                                  ⍞000D00000004:·along = )+4(              ⍝ macro defn       ⍞000D00000004:·(                         ⍝ call             ⍞000D00000004:··100                      ⍝ go 100           ⍞000D00000100:··along                    ⍝ macro call       ⍞000D00000008:··)                        ⍝ retn             ⍞000D00000008:·(1 :+ :- :× :÷)4          ⍝ select case      ⍞000D00000004:·0(⊤(0:+4))                ⍝ trace            ⍞000D00000000⊤··(0:+4))                ⍝ trace              ⍞000D00000000⊤···0:+4))                ⍝ trace              ⍞000D00000000⊤···:+4))                ⍝ trace               ⍞000D00000000⊤···)+4)                ⍝ trace                ⍞000D00000000⊤··+4)                ⍝ trace                  ⍞000D00000000⊤··4)                ⍝ trace                   ⍞000D00000004⊤··)                ⍝ trace                    ⍞000D00000000:·<sub                      ⍝ include subscript⍞000Dhello world                                            ⍞000D00000000:·<sub1                     ⍝ test <indentation⍞000D:-)                                                    ⍞000D00000000:·eh                        ⍝ error            ⍞000Deh?                                                    ⍞000D00000000:·reps=(::dec-1reps)                           ⍞000D00000000:·9reps                                        ⍞000D987654321                                              ⍞000D00000000:·1000hex                   ⍝ conv dec to hex  ⍞000D000003e8:·0                                            ⍞000D00000000:·(10 ascs)                                    ⍞000Dhexdump test                                           ⍞000D00000000:·(2+                                          ⍞000D00000002:··(                                           ⍞000D00000002:···3)                                         ⍞000D00000005:··)                                           ⍞000D00000000:·1+(1+(1+1))               ⍝ right arg        ⍞000D00000004:·⎕dw=2                     ⍝ 2 cols           ⍞000D00000004:·00000002 00000003·←dead                      ⍞000D00000004:·0000dead 00000003·(8←(beef×10000))           ⍞000D00000004:·0000dead beef0000·0⎕dw=0                     ⍞000D00000000:·sum ⍵ = + ⍵                                  ⍞000D00000000:·2 sum 3                                      ⍞000D00000005:·osc⍵=(⍵ dec'' ''::1:(⍵%2:osc(⍵÷2):osc(⍵×3+1))) ⍞000D00000005:·osc 7                                        ⍞000D7 22 11 34 17 52 26 13 40 20 10 5 16 8 4 2 1           ⍞000D00000001:·)                                            ⍞000D                                                       ⍞000D    _←nfid ⎕nerase nfid ⎕ntie 0     ⍝ remove file.' 
