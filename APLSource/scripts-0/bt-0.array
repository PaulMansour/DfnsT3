'⍝ Balanced Ternary Arithmetic:⍞000D⍞000D⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝ monadic⍞000D⍞000D    cmps←{                              ⍝ monadic comparisons.⍞000D        cmp←{                           ⍝ operand function comparison.⍞000D            rarg←⊤bt ⍵                  ⍝ BT argument.⍞000D            rslt←⍵⍵ bt rarg             ⍝ BT result.⍞000D            (3⊥rslt)≡⍺⍺ ⍵               ⍝ comparison with integer result.⍞000D        }⍞000D        ∧/⍺⍺ cmp ⍵⍵¨⍵                   ⍝ outer-product comparison.⍞000D    }⍞000D⍞000D    +cmps+ ¯9 to 9                      ⍝ identity⍞000D1⍞000D    -cmps- ¯9 to 9                      ⍝ negative⍞000D1⍞000D    ×cmps× ¯9 to 9                      ⍝ signum⍞000D1⍞000D    |cmps| ¯9 to 9                      ⍝ absolute value⍞000D1⍞000D    ⊤bt +/3* 0 to 9                     ⍝ int to BT encode⍞000D1 1 1 1 1 1 1 1 1 1⍞000D⍞000D    ⊤bt 1++/3* 0 to 9                   ⍝ int to BT encode⍞000D1 ¯1 ¯1 ¯1 ¯1 ¯1 ¯1 ¯1 ¯1 ¯1 ¯1⍞000D⍞000D    ⊥bt¨,\10↑1                          ⍝ BT to int decodes⍞000D1 3 9 27 81 243 729 2187 6561 19683⍞000D⍞000D⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝ dyadic⍞000D⍞000D    cmps←{                              ⍝ dyadic comparisons.⍞000D        cmp←{                           ⍝ operand function comparison.⍞000D            larg rarg←⊤bt¨⍺ ⍵           ⍝ BT arguments.⍞000D            rslt←larg ⍵⍵ bt rarg        ⍝ BT result.⍞000D            (3⊥rslt)≡⍺ ⍺⍺ ⍵             ⍝ comparison with integer result.⍞000D        }⍞000D        ∧/,⍺∘.(⍺⍺ cmp ⍵⍵)⍵              ⍝ outer-product comparison.⍞000D    }⍞000D⍞000D    lcm←{⍺×⍵÷⍺ gcd ⍵}                   ⍝ least common multiple.⍞000D⍞000D    (¯9 to 9) +cmps+ ¯9 to 9            ⍝ + sum⍞000D1⍞000D    (¯9 to 9) -cmps- ¯9 to 9            ⍝ - difference⍞000D1⍞000D    (¯9 to 9) ×cmps× ¯9 to 9            ⍝ × product⍞000D1⍞000D    (¯9 to 9) {⌊⍺÷⍵}cmps÷(¯9 to 9)~0    ⍝ ÷ integer-quotient⍞000D1⍞000D    (¯9 to 9) |cmps| ¯9 to 9            ⍝ | residue⍞000D1⍞000D    (¯9 to 9) *cmps* 0 to 9             ⍝ * power⍞000D1⍞000D    (¯9 to 9) gcd cmps∨ ¯9 to 9         ⍝ ∨ gcd⍞000D1⍞000D    (¯9 to 9) lcm cmps∧ ¯9 to 9         ⍝ ∧ lcm⍞000D1⍞000D    (¯9 to 9) ⌊cmps⌊ ¯9 to 9            ⍝ ⌊ min⍞000D1⍞000D    (¯9 to 9) ⌈cmps⌈ ¯9 to 9            ⍝ ⌈ max⍞000D1⍞000D    rel←{⍺ (⍎⍵)cmps(⍎⍵) ⍺}              ⍝ relational function ⍵⍞000D⍞000D    ∧/(¯9 to 9)∘rel¨''<≤=≥>≠''            ⍝ test relational functions.⍞000D1⍞000D⍞000D⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝ errors⍞000D⍞000D    1÷bt 0                              ⍝ div-by-zero.⍞000D11::Divide by zero⍞000D⍞000D    1*bt ¯1                             ⍝ negative power.⍞000D11::Negative power⍞000D⍞000D⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝ LeRoy Eide''s method.⍞000D⍞000D    fast_div←{                      ⍝ Fast division by ⍵⍵ - LeRoy Eide.⍞000D⍞000D        scan←{(enc-⍺-+/2↑⍵),1↓⍵}    ⍝ pair-wise deduction of digits.⍞000D        nlz←{(-1⌈+/∨\0≠⍵)↑⍵}        ⍝ without superfluous leading zeros.⍞000D        enc←⍺⍺                      ⍝ 2-digit encode.⍞000D⍞000D        rslt←1↓↑scan/0,⍵,0          ⍝ remainder, quotient.⍞000D        rem←⍵⍵|⍵⍵-1↑rslt            ⍝ remainder.⍞000D        rem=0:(nlz rslt)rem         ⍝ exact divide: quotient and 0-remainder.⍞000D⍞000D        norm←{(⍺ 0+enc ⍬⍴⍵),1↓⍵}    ⍝ pair-wise overflow resolution.⍞000D        rslt←1↓↑norm/0,rem+rslt     ⍝ vector-sum of rem with each digit.⍞000D        (nlz rslt)rem               ⍝ integer quotient and remainder.⍞000D    }⍞000D⍞000D    enc_dec ← 0 10∘⊤                ⍝ 2-digit decimal encode.⍞000D    dec_div_9 ← enc_dec fast_div 9  ⍝ decimal divide-by-9.⍞000D                                    ⍝⍞000D    disp dec_div_9 1 2 3 4 5        ⍝ decimal 12345÷9 → 1371r6⍞000D┌───────┬─┐⍞000D│1 3 7 1│6│⍞000D└───────┴─┘⍞000D⍞000D    enc_bt ← {¯1+0 3⊤3⊥1+0 3⊤⍵}     ⍝ 2-digit balanced ternary encode.⍞000D    bt_div_2  ← enc_bt fast_div 2   ⍝ bt divide-by-2.⍞000D                                    ⍝                    __       _⍞000D    disp bt_div_2  1 0 ¯1 ¯1        ⍝ balanced ternary 1011÷2 → 111r1⍞000D┌──────┬─┐⍞000D│1 1 ¯1│1│⍞000D└──────┴─┘⍞000D⍞000D    ∧/{(⌊⍵÷9)(9|⍵)≡10⊥¨dec_div_9 ⍎¨⍕⍵}¨0 to 100         ⍝ dec_div_by_9s.⍞000D1⍞000D    ∧/{(⌊⍵÷2)(2|⍵)≡⊥bt¨bt_div_2 ⊤bt ⍵}¨¯100 to 100      ⍝ bt_div_by_2.⍞000D1' 
