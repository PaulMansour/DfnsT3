'⍝ Fast multi-digit product using FFT:⍞000D⍞000D⍝ xtimes requires support for complex arithmetic:⍞000D⍞000D⍝ Fast multi-digit product using FFT for cmpx:⍞000D⍞000D    ⎕io←0⍞000D⍞000D    roots     ← {×\1,1↓(⍵÷2)⍴¯1*2÷⍵}⍞000D    cube      ← {⍵⍴⍨2⍴⍨2⍟⍴⍵}⍞000D    extend    ← {(2*⌈2⍟¯1+(⍴⍺)+⍴⍵)↑¨⍺ ⍵}⍞000D    floop     ← {(⊣/⍺)∇⍣(×m)⊢(+⌿⍵),[m-0.5]⍺×[⍳m←≢⍴⍺]-⌿⍵}⍞000D    FFT       ← {      ,(cube  roots ⍴⍵)floop cube ⍵}⍞000D    iFFT      ← {(⍴⍵)÷⍨,(cube +roots ⍴⍵)floop cube ⍵}⍞000D    rconvolve ← {(¯1+(⍴⍺)+⍴⍵)↑iFFT ⊃×/FFT¨⍺ extend ⍵}⍞000D    carry     ← {1↓+⌿1 0⌽0,0 10⊤⍵}⍞000D⍞000D    convolve  ← {+⌿(-⍳⍴⍺)⌽⍺∘.×⍵,0×1↓⍺}⍞000D⍞000D    x←¯50+?23⍴100⍞000D    y←¯50+?17⍴100⍞000D⍞000D    (¯1+(⍴x)+⍴y)≡⍴x rconvolve y⍞000D1⍞000D    (x rconvolve y)≡x rconvolve⍨y⍞000D1⍞000D    (x convolve y)≡⌊0.5+9○ x rconvolve y⍞000D1⍞000D    x←¯500+?16⍴1000⍞000D⍞000D    x≡⌊0.5+9○ iFFT FFT x⍞000D1⍞000D    x≡⌊0.5+9○ FFT iFFT x⍞000D1⍞000D    x←?7⍴10⍞000D    y←?5⍴10⍞000D⍞000D    ('' ''~⍨⍕x xtimes y)≡{⎕pp←18 ⋄ ⍕⍵}(10⊥x)×10⊥y⍞000D1⍞000D    (x xtimes y)≡y xtimes x⍞000D1⍞000D    p←(?1000)⍴0⍞000D    q←(?1000)⍴0⍞000D⍞000D    ((x xtimes y),p,q)≡(x,p)xtimes(y,q)⍞000D1⍞000D    xtimes⍨ 9/9 ⍞000D9 9 9 9 9 9 9 9 8 0 0 0 0 0 0 0 0 1⍞000D⍞000D    ↑{⍕xtimes⍨ ⍵/9}¨2 to 10  ⍞000D9 8 0 1                                ⍞000D9 9 8 0 0 1                            ⍞000D9 9 9 8 0 0 0 1                        ⍞000D9 9 9 9 8 0 0 0 0 1                    ⍞000D9 9 9 9 9 8 0 0 0 0 0 1                ⍞000D9 9 9 9 9 9 8 0 0 0 0 0 0 1            ⍞000D9 9 9 9 9 9 9 8 0 0 0 0 0 0 0 1        ⍞000D9 9 9 9 9 9 9 9 8 0 0 0 0 0 0 0 0 1    ⍞000D9 9 9 9 9 9 9 9 9 8 0 0 0 0 0 0 0 0 0 1⍞000D⍞000D    try←{                       ⍝ test 999...s squared.⍞000D        exp←(⍵ 2 ⍵ 2-1)/9 8 0 1 ⍝ expected result⍞000D        act←xtimes⍨⍵/9          ⍝ actual result⍞000D        act≡exp                 ⍝ actual matches expected.⍞000D    }⍞000D⍞000D    ∧/try¨ 10 20 to 100         ⍝ square lots of 999...s.⍞000D1' 
