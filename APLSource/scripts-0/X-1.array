'⍝ Knuth''s Algorithm X:⍞000D⍞000D    M←⍉⍪ 1 0 0 1 0 0 1      ⍝ http://en.wikipedia.org/wiki/Algorithm_X⍞000D    M ⍪← 1 0 0 1 0 0 0⍞000D    M ⍪← 0 0 0 1 1 0 1⍞000D    M ⍪← 0 0 1 0 1 1 0⍞000D    M ⍪← 0 1 1 0 0 1 1⍞000D    M ⍪← 0 1 0 0 0 0 1⍞000D⍞000D    X M                     ⍝ Rows that form exact cover.⍞000D0 1 0 1 0 1⍞000D⍞000D    (X M)⌿M                 ⍝ covering rows⍞000D1 0 0 1 0 0 0⍞000D0 0 1 0 1 1 0⍞000D0 1 0 0 0 0 1⍞000D⍞000D    1∧.=+⌿(X M)⌿M           ⍝ condition for exact cover.⍞000D1⍞000D⍞000D    M←⍉⍪ 0 0 1 0 1 1 0⍞000D    M ⍪← 1 0 0 1 0 0 1⍞000D    M ⍪← 0 1 1 0 0 1 0⍞000D    M ⍪← 1 0 0 1 0 0 0⍞000D    M ⍪← 0 1 0 0 0 0 1⍞000D    M ⍪← 0 0 0 1 1 0 1⍞000D⍞000D    X M⍞000D1 0 0 1 1 0⍞000D⍞000D    (X M)⌿M                 ⍝ exact cover⍞000D0 0 1 0 1 1 0⍞000D1 0 0 1 0 0 0⍞000D0 1 0 0 0 0 1⍞000D⍞000D    1∧.=+⌿(X M)⌿M           ⍝ condition for exact cover.⍞000D1⍞000D    1 disp X¨((⍳2 2)-⍳1)⍴¨1 ⍝ edge cases.⍞000D┌→┬─┐⍞000D↓0│0│⍞000D├⊖┼⊖┤⍞000D│0│1│⍞000D└→┴→┘⍞000D⍞000D    X 3 4↑=/¨⍳3 3           ⍝ too wide: uncovered columns.⍞000D0⍞000D    X 4 3↑=/¨⍳3 3           ⍝ too tall: not all rows needed.⍞000D1 1 1 0⍞000D⍞000D    X=/¨⍳3 3                ⍝ identity: just right.⍞000D1 1 1⍞000D⍞000D⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝ Exact cover Sudoku solver:⍞000D⍞000D    smat←{                              ⍝ Matrix for ⍵ ⍵-Sudoku puzzle.⍞000D        z←,[⍳6],[6+⍳4]⍳10⍴⍵*÷2          ⍝ cell coordinate properties.⍞000D        row←↓1 1 0 0 1 1 1 1 1 1/↑z     ⍝ each row must contain each number.⍞000D        col←↓0 0 1 1 1 1 1 1 1 1/↑z     ⍝   .. col  ..  ..  ..  ..  ..  ..⍞000D        box←↓1 0 1 0 1 1 1 1 1 1/↑z     ⍝   .. box  ..  ..  ..  ..  ..  ..⍞000D        all←↓1 1 1 1 0 0 1 1 1 1/↑z     ⍝ each cell must contain a number.⍞000D        same←≡/∘(1 0 0 0 1 0 0 0∘⊂)     ⍝ matching pairs.⍞000D        same¨row,col,box,all            ⍝ constraints matrix for ⍵ ⍵-puzzle.⍞000D    }⍞000D⍞000D    sudokuX←{⎕ML ⎕IO←1      ⍝ Exact cover Sudoku solver.⍞000D        n n←⍴⍵              ⍝ n×n puzzle.⍞000D        ⍺←smat n            ⍝ generic ⍵×⍵ constraint matrix.⍞000D        r←∊(⍵≠0)>(⊂⍳n)∊¨⍵   ⍝ already placed rows.⍞000D        m←(~r)⌿⍺            ⍝ reduced matrix.⍞000D        f←X m               ⍝ exact cover.⍞000D        z←(~r)\f            ⍝ merge of placements.⍞000D        n n⍴z/(⍴z)⍴⍳n       ⍝ solution matrix.⍞000D    }⍞000D⍞000D    s44 ← 4 4⍴ 0 0 0 0, 0 0 2 1, 3 0 0 4, 0 0 0 0⍞000D⍞000D    s44                     ⍝ puzzle.⍞000D0 0 0 0⍞000D0 0 2 1⍞000D3 0 0 4⍞000D0 0 0 0⍞000D⍞000D    sudokuX s44             ⍝ solution.⍞000D2 1 4 3⍞000D4 3 2 1⍞000D3 2 1 4⍞000D1 4 3 2⍞000D⍞000D⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝ Exact cover N-Queens:⍞000D⍞000D    queensX←{               ⍝ Exact cover N-Queens.⍞000D        m←⍳3/⍵              ⍝ cell coordinate properties.⍞000D        r←=/¨1 0 1∘/¨m      ⍝ each rank must contain one queen.⍞000D        f←=/¨0 1 1∘/¨m      ⍝  ..  file  ..     ..      ..⍞000D⍞000D        dm←-/¨⍳2/⍵          ⍝ diagonals.⍞000D        du←{⍵[⍋⍵]}∪,dm      ⍝ unique diagnonals.⍞000D        x←dm∘.=du           ⍝ left diagonals.⍞000D        y←(⊖dm)∘.=du        ⍝ right diagonals.⍞000D⍞000D        m←,[⍳2]x,y,r,f      ⍝ constraints matrix.⍞000D        d←~(⍳1↓⍴m)∊⍳2×⍴du   ⍝ mask of required cols.⍞000D        ⍵ ⍵⍴d X m           ⍝ exact cover - matrix of queens.⍞000D    }⍞000D⍞000D    disp queensX¨ 0 to 8⍞000D┌┬─┬───┬─────┬───────┬─────────┬───────────┬─────────────┬───────────────┐⍞000D││1│0 0│0 0 0│0 1 0 0│0 0 0 0 1│0 0 0 0 1 0│0 0 0 0 0 0 1│0 0 0 0 0 0 0 1│⍞000D││ │0 0│0 0 0│0 0 0 1│0 1 0 0 0│0 0 1 0 0 0│0 0 0 0 1 0 0│0 0 0 1 0 0 0 0│⍞000D││ │   │0 0 0│1 0 0 0│0 0 0 1 0│1 0 0 0 0 0│0 0 1 0 0 0 0│1 0 0 0 0 0 0 0│⍞000D││ │   │     │0 0 1 0│1 0 0 0 0│0 0 0 0 0 1│1 0 0 0 0 0 0│0 0 1 0 0 0 0 0│⍞000D││ │   │     │       │0 0 1 0 0│0 0 0 1 0 0│0 0 0 0 0 1 0│0 0 0 0 0 1 0 0│⍞000D││ │   │     │       │         │0 1 0 0 0 0│0 0 0 1 0 0 0│0 1 0 0 0 0 0 0│⍞000D││ │   │     │       │         │           │0 1 0 0 0 0 0│0 0 0 0 0 0 1 0│⍞000D││ │   │     │       │         │           │             │0 0 0 0 1 0 0 0│⍞000D└┴─┴───┴─────┴───────┴─────────┴───────────┴─────────────┴───────────────┘⍞000D⍞000D    Alpha test '' ##.scripts.pentominos ''        ⍝ pentomino-tiling tutorial⍞000D1⍞000D⍞000D    PX←{⍵{⍉(⍵⍴2)⊤{⍵/⍳⍴⍵}1∧.=(⍉⍺)+.∧(⍵⍴2)⊤⍳2*⍵}⍬⍴⍴⍵}     ⍝ Phil''s coding⍞000D⍞000D    1∧.=+⌿(,PX M)⌿M             ⍝ condition for exact cover.⍞000D1' 
