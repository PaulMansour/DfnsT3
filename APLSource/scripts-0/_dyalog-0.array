'⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝ Categories:⍞000D⍝   ┌──── sample tokens ────┐   ⍝ ┌ First-class (from V14) nameable items⍞000DA   1 2 3 4 5 6 # ⍺ ⍵ a b c d   ⍝ * Array⍞000DF   + - × ÷ ⌊ ↓ ⍳ ⍴ ⊂ ≢ , f g   ⍝ * Function⍞000DH   / ⌿ \ ⍀                 ←   ⍝ * Hybrid function/operator⍞000DAF                              ⍝   bound left argument⍞000DMOP  ¨ ⍨ &                      ⍝ * Monadic operator⍞000DDOP  ⍣                          ⍝   Dyadic operator⍞000DJOT  ∘                          ⍝   Jot: compose / null operand⍞000DDOT  .                          ⍝   Dot: ref / product⍞000DREF                             ⍝   ref:dot⍞000DIDX                             ⍝   index/axis⍞000DERR                             ⍝   error⍞000D() [IDX]                        ⍝   brackets⍞000D⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝ Macros:⍞000Dfunc=F.H                        ⍝   function⍞000Drand=A.func                     ⍝   operand⍞000D1st=rand.MOP                    ⍝   first-class item⍞000Ditem=1st.DOP                    ⍝   dottable item⍞000D⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝ Bindings:⍞000D                                ⍝ ┌ strength⍞000DA:DOT→REF REF:item→item         ⍝ 7 ref to dot to item⍞000D                                ⍝⍞000DA:A→A                           ⍝ 6 array to array: vector (strand)⍞000DDOT:A.DOP→ERR                   ⍝   prevents: #.a+b → #.(a+b)⍞000D                                ⍝⍞000DDOP.JOT:rand→MOP                ⍝ 5 dyadic operator (inc ∘) to right operand⍞000DDOT:func→MOP                    ⍝   inner product (with dot as operator)⍞000D                                ⍝⍞000Drand.JOT:MOP→F                  ⍝ 4 left operand (inc ∘) to monadic operator⍞000Dfunc:H→F                        ⍝   hybrid as operator⍞000Drand:IDX→rand                   ⍝   axis / index⍞000DMOP:H→ERR                       ⍝   prevents: +¨/¨ → (+¨)(/¨)⍞000D                                ⍝⍞000DA:func→AF                       ⍝ 3 left argument to function (inc hybrid)⍞000DIDX:A.func→ERR                  ⍝   prevents: v[0]+1 → v[0](+1)⍞000D                                ⍝⍞000DAF.F:A→A                        ⍝ 2 function to its right argument⍞000D                                ⍝⍞000DAF.func:F→F                     ⍝ 1 function to function (train)⍞000D                                ⍝⍞000D⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝' 
