'⍝ Solution vector for Sudoku problem ⍵:⍞000D⍞000D    s33←0 9⍴0                       ⍝ sample problem⍞000D    s33⍪←0 0 1 6 9 0 5 0 0⍞000D    s33⍪←4 0 0 2 7 0 0 0 1⍞000D    s33⍪←0 7 0 0 0 0 0 9 0⍞000D    s33⍪←0 0 0 0 0 0 0 3 0⍞000D    s33⍪←0 0 0 4 3 0 0 0 7⍞000D    s33⍪←0 0 0 7 8 0 6 0 0⍞000D    s33⍪←0 0 6 0 0 0 8 0 0⍞000D    s33⍪←0 2 0 1 4 0 0 6 0⍞000D    s33⍪←0 1 0 3 5 0 0 4 0⍞000D⍞000D    sbox←{⎕IO ⎕ML←0 1                       ⍝ Box sudoku grids.⍞000D        ⍺←(⍴⍵)*÷2                           ⍝ default square cells.⍞000D        vp hp←0=⍺|⍳¨⍴⍵                      ⍝ vert and horiz partition vectors.⍞000D        numbs←⍉↑vp∘(⊂[0])¨hp⊂⍵              ⍝ numeric sub-areas.⍞000D        width←2+⌊10⍟⌈/1,,⍵                  ⍝ digits per number.⍞000D        fmt←width∘{⍵=0:⌽⍺↑''·'' ⋄ ⍺ 0⍕⍵}      ⍝ dots for zeros.⍞000D        cells←0 1∘↓¨↑∘(,/)¨fmt¨¨numbs       ⍝ char matrix sub-areas.⍞000D        hv←⍺⍴¨⊂¨⌽(⍴⊃cells)/¨''│─''            ⍝ vert and horiz boundaries.⍞000D        in←{↑⍺{⍺,⍺⍺,⍵}/⍵}                   ⍝ ⍺ separates ⍵.⍞000D        (t m b)lr←''┬┼┴'' ''├┤''in¨∘⊂¨hv        ⍝ bordering lines.⍞000D        body←m in⍉¨⊂[1 2]''│''in cells        ⍝ collected cells.⍞000D        (⍉body in t b)in lr in¨''┌└'' ''┐┘''    ⍝ boxed grid.⍞000D    }⍞000D⍞000D    sbox s33                        ⍝ show sample problem.⍞000D┌─────┬─────┬─────┐⍞000D│· · 1│6 9 ·│5 · ·│⍞000D│4 · ·│2 7 ·│· · 1│⍞000D│· 7 ·│· · ·│· 9 ·│⍞000D├─────┼─────┼─────┤⍞000D│· · ·│· · ·│· 3 ·│⍞000D│· · ·│4 3 ·│· · 7│⍞000D│· · ·│7 8 ·│6 · ·│⍞000D├─────┼─────┼─────┤⍞000D│· · 6│· · ·│8 · ·│⍞000D│· 2 ·│1 4 ·│· 6 ·│⍞000D│· 1 ·│3 5 ·│· 4 ·│⍞000D└─────┴─────┴─────┘⍞000D⍞000D    sbox¨sudoku s33                 ⍝ display all solutions.⍞000D ┌─────┬─────┬─────┐  ┌─────┬─────┬─────┐  ┌─────┬─────┬─────┐ ⍞000D │3 8 1│6 9 4│5 7 2│  │2 8 1│6 9 3│5 7 4│  │2 8 1│6 9 3│5 7 4│ ⍞000D │4 6 9│2 7 5│3 8 1│  │4 6 9│2 7 5│3 8 1│  │4 6 9│2 7 5│3 8 1│ ⍞000D │2 7 5│8 1 3│4 9 6│  │3 7 5│8 1 4│2 9 6│  │5 7 3│8 1 4│2 9 6│ ⍞000D ├─────┼─────┼─────┤  ├─────┼─────┼─────┤  ├─────┼─────┼─────┤ ⍞000D │7 9 4│5 6 2│1 3 8│  │7 9 2│5 6 1│4 3 8│  │7 9 2│5 6 1│4 3 8│ ⍞000D │6 5 8│4 3 1│9 2 7│  │6 5 8│4 3 9│1 2 7│  │6 5 8│4 3 9│1 2 7│ ⍞000D │1 3 2│7 8 9│6 5 4│  │1 3 4│7 8 2│6 5 9│  │1 3 4│7 8 2│6 5 9│ ⍞000D ├─────┼─────┼─────┤  ├─────┼─────┼─────┤  ├─────┼─────┼─────┤ ⍞000D │5 4 6│9 2 7│8 1 3│  │5 4 6│9 2 7│8 1 3│  │3 4 6│9 2 7│8 1 5│ ⍞000D │9 2 3│1 4 8│7 6 5│  │9 2 3│1 4 8│7 6 5│  │9 2 5│1 4 8│7 6 3│ ⍞000D │8 1 7│3 5 6│2 4 9│  │8 1 7│3 5 6│9 4 2│  │8 1 7│3 5 6│9 4 2│ ⍞000D └─────┴─────┴─────┘  └─────┴─────┴─────┘  └─────┴─────┴─────┘ ⍞000D⍞000D    s22←0 4⍴0                       ⍝ sample 2×2 problem⍞000D    s22⍪←0 2 3 4⍞000D    s22⍪←3 0 0 0⍞000D    s22⍪←2 0 0 0⍞000D    s22⍪←4 0 0 0⍞000D⍞000D    sbox¨sudoku s22                 ⍝ display all solutions.⍞000D ┌───┬───┐  ┌───┬───┐  ┌───┬───┐ ⍞000D │1 2│3 4│  │1 2│3 4│  │1 2│3 4│ ⍞000D │3 4│2 1│  │3 4│1 2│  │3 4│1 2│ ⍞000D ├───┼───┤  ├───┼───┤  ├───┼───┤ ⍞000D │2 1│4 3│  │2 1│4 3│  │2 3│4 1│ ⍞000D │4 3│1 2│  │4 3│2 1│  │4 1│2 3│ ⍞000D └───┴───┘  └───┴───┘  └───┴───┘ ⍞000D⍞000D    s44←0 16⍴0                      ⍝ sample 4×4 problem⍞000D    s44⍪← 3  6  0  0  0  0  4 15 12 11 13  2  8  0  5 0⍞000D    s44⍪← 0  0 15  0  1  0 14  0  0  0  8  0 13  0  0 0⍞000D    s44⍪← 0 14 13  0  0  8 10  0  0 16  5  0  0  0  0 0⍞000D    s44⍪← 0  5  4  0  0  0  0  0  0  0  0  7  3 11  0 2⍞000D    s44⍪← 0  0  9  0  0  7  0  0  0  0  3 10  6  4  0 0⍞000D    s44⍪← 0 11  0  0  4 13  0  0  0  0  0  0  7 15 10 8⍞000D    s44⍪← 0  0  0  0 15  0  0  0  0  0  6  4 11  0 14 0⍞000D    s44⍪← 0 15  0  0  0  0  6  0 13  2  0  0  9 12  0 0⍞000D    s44⍪←12  1  0  0  0  3  0  6  9  4 14  8  5  0  0 0⍞000D    s44⍪← 0  0  0  0 13  2  0 12  0  5 10  3  1 14  9 0⍞000D    s44⍪← 2  0  0  9  0  5  0  0 11 12  7  0  0  8 15 0⍞000D    s44⍪← 0  0  8 14  0  4  7 11  1 13  0  0  0  0  0 0⍞000D    s44⍪← 4  0  0  0  3  0 16  0  0  6  0  0  0  0  0 0⍞000D    s44⍪←16  7 12 13 14  9  0  2  8  0  0  0  0 10  0 0⍞000D    s44⍪←11  0  1  0  0 15  0  0  0  0  0  0  0  5  0 0⍞000D    s44⍪←15  8  0  0  6  0  5 10  3  0  0  0  0  7 11 0⍞000D⍞000D      sbox¨ sudoku s44              ⍝ display all solutions.⍞000D ┌───────────┬───────────┬───────────┬───────────┐ ⍞000D │ 3  6 10  1│ 7 16  4 15│12 11 13  2│ 8  9  5 14│ ⍞000D │ 7  2 15 12│ 1 11 14  5│ 6  3  8  9│13 16  4 10│ ⍞000D │ 9 14 13 11│ 2  8 10  3│ 4 16  5  1│15  6  7 12│ ⍞000D │ 8  5  4 16│12  6  9 13│14 10 15  7│ 3 11  1  2│ ⍞000D ├───────────┼───────────┼───────────┼───────────┤ ⍞000D │13 16  9  8│11  7 12  1│15 14  3 10│ 6  4  2  5│ ⍞000D │14 11  6  3│ 4 13  2 16│ 5  1  9 12│ 7 15 10  8│ ⍞000D │ 1 12  2  5│15 10  3  9│ 7  8  6  4│11 13 14 16│ ⍞000D │10 15  7  4│ 5 14  6  8│13  2 16 11│ 9 12  3  1│ ⍞000D ├───────────┼───────────┼───────────┼───────────┤ ⍞000D │12  1 16  7│10  3 15  6│ 9  4 14  8│ 5  2 13 11│ ⍞000D │ 6  4 11 15│13  2  8 12│16  5 10  3│ 1 14  9  7│ ⍞000D │ 2 13  3  9│16  5  1 14│11 12  7  6│10  8 15  4│ ⍞000D │ 5 10  8 14│ 9  4  7 11│ 1 13  2 15│16  3 12  6│ ⍞000D ├───────────┼───────────┼───────────┼───────────┤ ⍞000D │ 4  9  5 10│ 3 12 16  7│ 2  6 11 13│14  1  8 15│ ⍞000D │16  7 12 13│14  9 11  2│ 8 15  1  5│ 4 10  6  3│ ⍞000D │11  3  1  6│ 8 15 13  4│10  7 12 14│ 2  5 16  9│ ⍞000D │15  8 14  2│ 6  1  5 10│ 3  9  4 16│12  7 11 13│ ⍞000D └───────────┴───────────┴───────────┴───────────┘ ⍞000D⍞000D    s34←0 12⍴0                      ⍝ sample 3×4 problem⍞000D    s34⍪←9  6  0  0 10  0  0  8  2  0 0  4⍞000D    s34⍪←0  1  0 11  0 12  0  0  0  0 3  5⍞000D    s34⍪←0  0  0  0  6  0  7 11 12  0 0  0⍞000D    s34⍪←0  0 10  7  0  0  0  0  4  0 9  0⍞000D    s34⍪←1  0  6  0 12 11  0  4  0  3 0  0⍞000D    s34⍪←0  0  9  0  0 10  8  1  0  0 6  0⍞000D    s34⍪←0  7  0  0 11  2  1  0  0 12 0  0⍞000D    s34⍪←2  0 12  0  4  0  6  5  0  1 0 11⍞000D    s34⍪←0 10  0  5  0  0  0  0  3  4 0  0⍞000D    s34⍪←0  0  0 10  5  8  0  7  0  0 0  0⍞000D    s34⍪←5  3  0  0  0  0 11  0  9  0 0  0⍞000D    s34⍪←7  0  0  0  3  0  0  6  0  0 4  2⍞000D⍞000D      3 4∘sbox¨3 4 sudoku s34       ⍝ display all solutions.⍞000D ┌───────────┬───────────┬───────────┐  ┌───────────┬───────────┬───────────┐ ⍞000D │ 9  6  5 12│10  1  3  8│ 2  7 11  4│  │ 9  6  5 12│10  1  3  8│ 2  7 11  4│ ⍞000D │ 8  1  7 11│ 9 12  4  2│ 6 10  3  5│  │ 8  1  7 11│ 9 12  4  2│ 6 10  3  5│ ⍞000D │10  4  2  3│ 6  5  7 11│12  9  1  8│  │10  4  2  3│ 6  5  7 11│12  9  1  8│ ⍞000D ├───────────┼───────────┼───────────┤  ├───────────┼───────────┼───────────┤ ⍞000D │12 11 10  7│ 2  6  5  3│ 4  8  9  1│  │12 11 10  7│ 2  6  5  3│ 4  8  9  1│ ⍞000D │ 1  2  6  8│12 11  9  4│ 7  3  5 10│  │ 1  2  6  8│12 11  9  4│10  3  5  7│ ⍞000D │ 3  5  9  4│ 7 10  8  1│11  2  6 12│  │ 3  5  9  4│ 7 10  8  1│11  2  6 12│ ⍞000D ├───────────┼───────────┼───────────┤  ├───────────┼───────────┼───────────┤ ⍞000D │ 4  7  3  6│11  2  1 10│ 5 12  8  9│  │ 4  7  3  6│11  2  1 10│ 5 12  8  9│ ⍞000D │ 2  8 12  9│ 4  3  6  5│10  1  7 11│  │ 2  8 12  9│ 4  3  6  5│ 7  1 10 11│ ⍞000D │11 10  1  5│ 8  7 12  9│ 3  4  2  6│  │11 10  1  5│ 8  7 12  9│ 3  4  2  6│ ⍞000D ├───────────┼───────────┼───────────┤  ├───────────┼───────────┼───────────┤ ⍞000D │ 6  9  4 10│ 5  8  2  7│ 1 11 12  3│  │ 6  9  4 10│ 5  8  2  7│ 1 11 12  3│ ⍞000D │ 5  3  8  2│ 1  4 11 12│ 9  6 10  7│  │ 5  3  8  2│ 1  4 11 12│ 9  6  7 10│ ⍞000D │ 7 12 11  1│ 3  9 10  6│ 8  5  4  2│  │ 7 12 11  1│ 3  9 10  6│ 8  5  4  2│ ⍞000D └───────────┴───────────┴───────────┘  └───────────┴───────────┴───────────┘ ⍞000D⍞000D⍝ Another coding (ADC):⍞000D⍞000D    sudoku←{⎕IO ⎕ML←0 1⍞000D        ⍝ Sudoku - ⍵: N×N setup where box size N*÷2 is integral⍞000D        ⍝ The setup is a valid arrangement in some cells of numbers from 1-N; the rest are 0´s.⍞000D        ⍝ Each row, column and the N boxes of each result must contain all numbers 1 to N.⍞000D⍞000D        valid←{                                 ⍝ Validate.  ⍵ be...⍞000D            (2≠⍴⍴⍵)∨(≠/2↑⍴⍵)∨0≠1|(⊃⍴⍵)*÷2:1     ⍝ a square matrix with an integral box size⍞000D            ((⍴⍵)⍴0)≢⊃1↑0⍴⊂⍵:1                  ⍝ numeric N×N matrix⍞000D            1∊~⍵∊⍳1+⊃⍴⍵:1                       ⍝ numbers 0-N only⍞000D            0=+/,⍵                              ⍝ at least one number⍞000D        }⍞000D        box←{⍵⌿(⍵×⍳⍵)∘.+⍵/⍳⍵}                   ⍝ Box template ⍵:sq root of size⍞000D        chk←{1∊1<+⌿(1+⍳⊃⍴⍵)∘.=⍵}                ⍝ Check for duplicates of 1-9 in ⍵⍞000D        sets←{⍉⍺{(⍺=+⌿⍵)/⍵}(⍵⍴2)⊤⍳2*⍵}          ⍝ LM sets of ⍺ unique nrs from 1 to ⍵⍞000D        iv←{⍵/⍳⍴⍵}                              ⍝ idiom⍞000D        un←{(⍳⍴⍵)=⍵⍳⍵}                          ⍝ LV of first unique items in vector⍞000D        indx←{⍺[⍵]}                             ⍝ index ⍺ by ⍵⍞000D        search←{                                ⍝ Search possibilities for a cell⍞000D            r p←⍵⍞000D            p←⍺ adjust p                        ⍝ adjust possibles for current cell⍞000D            ~0∊⊃(r p)←rules r p:r               ⍝ resolve using logical tests⍞000D            (next p)∇¨⊂r p                      ⍝ search cell with minimum possibilities⍞000D        }⍞000D        adjust←{                                ⍝ Adjust cell to single value⍞000D            0>⊃⍺:⍵                              ⍝ no cell⍞000D            p←⍵ ⋄ p[;⊃⍺]←⍺[1]=⍳⊃⍴⍵ ⋄ p          ⍝ item ⍺ in to 1, rest of cell to 0⍞000D        }⍞000D        next←{                                  ⍝ Cell-value pairs for possible values⍞000D            ⍵{⍵,¨iv ⍺[;⍵]                       ⍝ in the cell with the minimum nr of⍞000D            }{1⍳⍨⍺\{⍵=⌊/⍵}⍺/⍵}/{(⍵>1)⍵}+⌿⍵      ⍝ possibilities (2 or more)⍞000D        }⍞000D        rules←{                                 ⍝ Apply logic tests to resolve cells⍞000D            ~0∊⊃z←sole ⍵:z                      ⍝ detect single-value possibilities⍞000D            ~0∊⊃z←↑singles/(⍳⊃⍴RCB),⊂z:z        ⍝ single-valued cells in row/col/box⍞000D            ~0∊⊃z←↑uniques/(⍳(⍴⊃z)*÷2),⊂z:z     ⍝ values unique to one row/col of a box⍞000D            ~0∊⊃z←↑NinN/4 3 2,⊂z:z              ⍝ detect N vals in N cells⍞000D            ~0∊⊃z←↑matches/4 3 2,⊂z:z           ⍝ matches of N vals in N cells of r/c/b⍞000D            z≡⍵:⍵                               ⍝ finish if no state change⍞000D            ∇ z                                 ⍝ otherwise repeat rules⍞000D        }⍞000D        sole←{                                  ⍝ Resolve sole value cells. ⍺:soln, ⍵:possibles⍞000D            ~0∊⊃r p←⍵:⍵                         ⍝ pass through⍞000D            0∊n←+⌿p:⍬ ⍬                         ⍝ no go⍞000D            (⍴r)=i←1⍳⍨n×r=0:⍵                   ⍝ no remaining single value cells⍞000D            r[i]←1+p[;i]⍳1                      ⍝ set result value⍞000D            p[¯1+i⊃r;i~⍨iv i⊃Masks]←0           ⍝ remove as possible value in related cells⍞000D            ∇ r p                               ⍝ check for further single-value cells⍞000D        }⍞000D        singles←{                               ⍝ Fix box cells that resolve to single value⍞000D            ~0∊⊃r p←⍵:⍵                         ⍝ pass through⍞000D            i←RCB[⍺;]                           ⍝ cells in row, col or box⍞000D            b←i/p                               ⍝ possibles for cells⍞000D            ~1∊l←(1=+/b)∧~(1+⍳⊃⍴p)∊i/r:⍵        ⍝ values that occur just once ex result values⍞000D            c←(iv i)[(↓l⌿b)⍳¨1]                 ⍝ cells where they occur⍞000D            p[;c]←(⍳⊃⍴p)∘.=iv l                 ⍝ modify to just the single value⍞000D            sole r p                            ⍝ resolve the sole values⍞000D        }⍞000D        uniques←{                               ⍝ Unique to one row/col of the ⍺´th box⍞000D            ~0∊⊃r p←⍵:⍵                         ⍝ pass through⍞000D            b←p[;⍺⊃Box]                         ⍝ box cell values⍞000D            i←(⍴i)⊤iv,(i>1)∧i=⍉(⌽⍴i)⍴+/i←+/b    ⍝ 2 or more unique to a row⍞000D            j←(⍴j)⊤iv,(j>1)∧j=⍉(⌽⍴j)⍴+/j←+/[1]b ⍝ 2 or more unique to a column⍞000D            (0∊⍴i)∧0∊⍴j:⍵                       ⍝ none found⍞000D            s←⊃⌽⍴b                              ⍝ box size⍞000D            p[(s(⍺ rinds)↓i),s(⍺ cinds)↓j]←0    ⍝ remove vals from cols of other boxes⍞000D            sole r p                            ⍝ resolve sole values⍞000D        }⍞000D        rinds←{                                 ⍝ uniques: row pick inds to update⍞000D            0=⍴⊃⍵:0⍴⊂0 0⍞000D            ↑,/(0⊃⍵),¨¨((⍺*2)×(1⊃⍵)+¨⍺×⌊⍺⍺÷⍺)+⊂(⍳⍺*2)~(⍺×⍺|⍺⍺)+⍳⍺⍞000D        }⍞000D        cinds←{                                 ⍝ uniques: column pick inds to update⍞000D            0=⍴⊃⍵:0⍴⊂0 0⍞000D            ↑,/(0⊃⍵),¨¨((1⊃⍵)+¨⍺×⍺|⍺⍺)+⊂(⍺*2)×(⍳⍺*2)~(⍺×⌊⍺⍺÷⍺)+⍳⍺⍞000D        }⍞000D        matches←{                               ⍝ Resolve exact matches on ⍺ possible values⍞000D            ~0∊⊃r p←⍵:⍵                         ⍝ pass through⍞000D            0∊n←+⌿p:⍬ ⍬                         ⍝ no go if no possibilities for a cell⍞000D            i←(n=⍺){iv ⍺\un 2⊥⍺/⍵}p             ⍝ cells with ⍺ possible values⍞000D            sole↑(⍺ match)/i,⊂⍵                 ⍝ resolve each ⍺-set then sole values⍞000D        }⍞000D        match←{                                 ⍝ Resolve exact matches in row/col/box⍞000D            ~0∊⊃r p←⍵:⍵                         ⍝ pass through⍞000D            ⍺⍺≠+/p[;⍺]:⍵                        ⍝ cell no longer has ⍺⍺ values⍞000D            ⍺⍺>+/l←p[;⍺]∧.=p:⍵                  ⍝ occurrences of matches with the ⍺´th cell⍞000D            1∊⍺⍺<n←+/l/RCB:⍬ ⍬                  ⍝ no go if >⍺⍺ matches in any row/col/box⍞000D            ~1∊n=⍺⍺:⍵                           ⍝ no r/c/b´s with exactly ⍺⍺ matches⍞000D            p←↑(l do_matches)/(iv n=⍺⍺),⊂p      ⍝ remove matched vals from related cells⍞000D            sole r p                            ⍝ resolve singles then sole values⍞000D        }⍞000D        do_matches←{                            ⍝ Remove vals from other row/col/box cells⍞000D            p←⍵                                 ⍝ ⍺⍺ marks all occurrences of match⍞000D            p[iv p[;⍺⍺⍳1];iv RCB[⍺;]∧~⍺⍺]←0     ⍝ filter occurrences in the ⍺´th row/col/box⍞000D            p⍞000D        }⍞000D        NinN←{                                  ⍝ Reduce ⍺-sets in exactly ⍺ cells of a row/col/box⍞000D            ~0∊⊃r p←⍵:⍵                         ⍝ pass through⍞000D            s←⍺ sets(⍴r)*÷2                     ⍝ all combns of sets of ⍺ values⍞000D            l←r=0                               ⍝ non-singular cells⍞000D            n←(⍺=(s∨.∧p)+.∧⍉RCB)∧⍺=(s∨.∧l\l/p)+.∧⍉RCB ⍝ set-RCB combinations with ⍺ occurrences⍞000D            i←↓[0](⍴n)⊤iv,n                     ⍝ indices of set-RCB combns⍞000D            sole↑(s do_NinN)/i,⊂⍵               ⍝ reduce non-set values from cells then sole values⍞000D        }⍞000D        do_NinN←{                               ⍝ Remove values not in set ⊃⍺ from identified cells⍞000D            i←⍺⍺[0⊃⍺;] ⋄ j←RCB[1⊃⍺;]            ⍝ set values / row-col-box mask⍞000D            r p←⍵ ⋄ p[iv~i;iv j∧i∨.∧p]←0 ⋄ r p  ⍝ [vals not in set;cells in set and in row/col/box]⍞000D        }⍞000D        setup←{                                 ⍝ Setup LM possibilities per cell⍞000D            p←(⊂1+⍳⊃⍴⍵)~¨Masks/¨⊂,⍵             ⍝ possibles per cell, except...⍞000D            ((0≠,⍵)/p)←0~⍨,⍵                    ⍝ adjust given cells to single value⍞000D            (1+⍳⊃⍴⍵)∘.∊p                        ⍝ convert to LM vals×cells⍞000D        }⍞000D        res←(⍴⍵)∘{⍺∘⍴¨((⍴⍵)⍴(×/⍺)↑1)⊂⍵}         ⍝ Shape result(s)⍞000D⍞000D        valid ⍵:''Invalid setup''                 ⍝ Validate⍞000D        RCB←{,¨(⍵/⍳⍵)(⍵ ⍵⍴⍳⍵)(box ⍵*÷2)}⊃⍴⍵     ⍝ Rows-Columns-Boxes⍞000D        Masks←↓↑∨/{⍵∘.=⍵}¨RCB                   ⍝ Sets per cell of related row/col/box cells⍞000D        RCB←↑⍪/(⊂⍳⊃⍴⍵)∘.=¨RCB                   ⍝ Selection vectors for rows,columns,boxes⍞000D        Box←((⍴⍵)*÷2)∘⍴¨(↓RCB[(2×⊃⍴⍵)+⍳⊃⍴⍵;])/¨⊂⍳×/⍴⍵ ⍝ Box indices⍞000D        1∊chk¨Masks/¨⊂,⍵:''Invalid setup''        ⍝ Duplicates in row/column/box⍞000D⍞000D        res∊¯1 0 search(,⍵)(setup ⍵)⍞000D    ⍝:  ADC 5Jun2005⍞000D    }⍞000D⍞000D    sbox¨sudoku s33                 ⍝ display all solutions.⍞000D ┌─────┬─────┬─────┐  ┌─────┬─────┬─────┐  ┌─────┬─────┬─────┐ ⍞000D │2 8 1│6 9 3│5 7 4│  │2 8 1│6 9 3│5 7 4│  │3 8 1│6 9 4│5 7 2│ ⍞000D │4 6 9│2 7 5│3 8 1│  │4 6 9│2 7 5│3 8 1│  │4 6 9│2 7 5│3 8 1│ ⍞000D │3 7 5│8 1 4│2 9 6│  │5 7 3│8 1 4│2 9 6│  │2 7 5│8 1 3│4 9 6│ ⍞000D ├─────┼─────┼─────┤  ├─────┼─────┼─────┤  ├─────┼─────┼─────┤ ⍞000D │7 9 2│5 6 1│4 3 8│  │7 9 2│5 6 1│4 3 8│  │7 9 4│5 6 2│1 3 8│ ⍞000D │6 5 8│4 3 9│1 2 7│  │6 5 8│4 3 9│1 2 7│  │6 5 8│4 3 1│9 2 7│ ⍞000D │1 3 4│7 8 2│6 5 9│  │1 3 4│7 8 2│6 5 9│  │1 3 2│7 8 9│6 5 4│ ⍞000D ├─────┼─────┼─────┤  ├─────┼─────┼─────┤  ├─────┼─────┼─────┤ ⍞000D │5 4 6│9 2 7│8 1 3│  │3 4 6│9 2 7│8 1 5│  │5 4 6│9 2 7│8 1 3│ ⍞000D │9 2 3│1 4 8│7 6 5│  │9 2 5│1 4 8│7 6 3│  │9 2 3│1 4 8│7 6 5│ ⍞000D │8 1 7│3 5 6│9 4 2│  │8 1 7│3 5 6│9 4 2│  │8 1 7│3 5 6│2 4 9│ ⍞000D └─────┴─────┴─────┘  └─────┴─────┴─────┘  └─────┴─────┴─────┘ ⍞000D⍞000D⍝ Another coding (JMS):⍞000D⍞000D    sudoku←{⎕IO ⎕ML←0                       ⍝ Solution vector for Sudoku ⍵.⍞000D⍞000D        ⍺←(⍴⍵)*÷2                           ⍝ default square cells.⍞000D⍞000D        search←{                            ⍝ vector of solution vectors.⍞000D            opts←+⌿⍵                        ⍝ number of options for each unit.⍞000D            ~0∊1=opts:⍺,⊂⍵                  ⍝ one per unit: accumulate solution.⍞000D            poss←opts=⌊/(,opts)~1           ⍝ mask of remaining fewest choices.⍞000D            next←(⍴poss)⍴<\,poss            ⍝ first choice.⍞000D            vals←{(⍵=⊂⍵)∘.∧¨⊂next}⍳⊃⍴⍵      ⍝ all values at next position.⍞000D            more←(vals∧⊂⍵)~⊂0∧⍵             ⍝ next placements vector.⍞000D            pvec←⊃,/⍵∘set¨more              ⍝ plays vector.⍞000D            ↑∇⍨/pvec,⊂⍺                     ⍝ accumulated solutions.⍞000D        }                                   ⍝ svec ← svec :: posn⍞000D⍞000D        set←{                               ⍝ set ⍵ in state ⍺.⍞000D            this←⍵∨[1 2]~∨⌿⍵                ⍝ mask removes choices from ⍵ units.⍞000D            that←⍉∧/[2]∧/[3]ex⍲[2 3 4]⍉⍵    ⍝ mask removes conflicting choices.⍞000D            0∊∨⌿⍺∧that:⍬                    ⍝ stitched: quit.⍞000D            next←⍺∧⍵∨this∧that              ⍝ next state.⍞000D            more←<⌿1=+⌿⍺,[0.5]next>⍵        ⍝ units reduced to single option.⍞000D            ~1∊more:⊂next                   ⍝ none: done.⍞000D            next ∇ more∧[1 2]next           ⍝ place forced moves in grid.⍞000D        }                                   ⍝ state ← state :: moves⍞000D⍞000D        ex←{⍵∘.∨1∧0×⍳⊃⍴⍵}⍺{                 ⍝ rank-5 boolean exclusion array.⍞000D            a←⍉⍺∘⊥¨⌊(⍳⍵)÷⊂⍺                 ⍝ cell colours.⍞000D            v h←+/¨1⊂↑⍳⍵                    ⍝ vert and horiz colours.⍞000D            i←~↑{⍵=⊂⍵}⍵∘⊥¨⍳⍵                ⍝ id array.⍞000D            i∧3 2 0 1⍉{(⍉⍵)∨.=⍵}↑a v h      ⍝ exclusion array.⍞000D        }⍴⍵⍞000D⍞000D        nums←{+⌿¨⍵×+⍀¨1+⍵×0}                ⍝ numeric from bool solutions.⍞000D        show←{(⍉↓⍉⍵)/¨⊂(⊃⍴⍵)↑1↓⎕D}          ⍝ debug: show state of play.⍞000D        init←⊃(1∨⍵∘.=⊃↓⍵)set(1+⍳⍴↓⍵)∘.=⍵    ⍝ initial position.⍞000D        nums(0⍴⊂⍵)search init               ⍝ boxed solutions.⍞000D    }⍞000D⍞000D    sbox¨sudoku s33                 ⍝ display all solutions.⍞000D ┌─────┬─────┬─────┐  ┌─────┬─────┬─────┐  ┌─────┬─────┬─────┐ ⍞000D │3 8 1│6 9 4│5 7 2│  │2 8 1│6 9 3│5 7 4│  │2 8 1│6 9 3│5 7 4│ ⍞000D │4 6 9│2 7 5│3 8 1│  │4 6 9│2 7 5│3 8 1│  │4 6 9│2 7 5│3 8 1│ ⍞000D │2 7 5│8 1 3│4 9 6│  │5 7 3│8 1 4│2 9 6│  │3 7 5│8 1 4│2 9 6│ ⍞000D ├─────┼─────┼─────┤  ├─────┼─────┼─────┤  ├─────┼─────┼─────┤ ⍞000D │7 9 4│5 6 2│1 3 8│  │7 9 2│5 6 1│4 3 8│  │7 9 2│5 6 1│4 3 8│ ⍞000D │6 5 8│4 3 1│9 2 7│  │6 5 8│4 3 9│1 2 7│  │6 5 8│4 3 9│1 2 7│ ⍞000D │1 3 2│7 8 9│6 5 4│  │1 3 4│7 8 2│6 5 9│  │1 3 4│7 8 2│6 5 9│ ⍞000D ├─────┼─────┼─────┤  ├─────┼─────┼─────┤  ├─────┼─────┼─────┤ ⍞000D │5 4 6│9 2 7│8 1 3│  │3 4 6│9 2 7│8 1 5│  │5 4 6│9 2 7│8 1 3│ ⍞000D │9 2 3│1 4 8│7 6 5│  │9 2 5│1 4 8│7 6 3│  │9 2 3│1 4 8│7 6 5│ ⍞000D │8 1 7│3 5 6│2 4 9│  │8 1 7│3 5 6│9 4 2│  │8 1 7│3 5 6│9 4 2│ ⍞000D └─────┴─────┴─────┘  └─────┴─────┴─────┘  └─────┴─────┴─────┘ ⍞000D⍞000D⍝ Another nother coding (JMS):⍞000D⍞000D    sudoku←{⎕IO ⎕ML←0                       ⍝ Solution vector for Sudoku ⍵.⍞000D⍞000D        ⍺←(⍴⍵)*÷2                           ⍝ default square areas.⍞000D⍞000D        search←{                            ⍝ vector of solution vectors.⍞000D            1∊⍴↑⍵:⍺,⊂⍵                      ⍝ solution: accumulate.⍞000D            cell←,(1<,↑⍴¨⍵)⍳1               ⍝ next cell to visit.⍞000D            next←cell∘(⍵ set)∘,¨cell⊃⍵      ⍝ vector of next positions.⍞000D            ↑∇⍨/(next~⊂⍬),⊂⍺                ⍝ recursively explore subtrees.⍞000D        }                                   ⍝ svec ← svec :: posn⍞000D⍞000D        set←{                               ⍝ set ⍵ @ ⍺ in state ⍺⍺.⍞000D            that←,⌿↑cvx[⍺]/¨¨⍵              ⍝ remove option ⍵ from these cells.⍞000D            this←(((1↑all)~¨⍵),⊂⍬)[⍺⍳sx]    ⍝ remove these options from cells ⍺.⍞000D            next←⍺⍺~¨,⌿↑that this           ⍝ new state.⍞000D            opts←↑,∘↑∘(⍴¨)¨⍺⍺ next          ⍝ number options remaining per cell.⍞000D            0∊opts:⍬                        ⍝ stitched: quit.⍞000D            mask←(0 1∧.=1=opts)>sx∊⍺        ⍝ mask of forced moves.⍞000D            ~1∊mask:next                    ⍝ no forced moves: done.⍞000D            (mask/sx)(next ∇∇),↑mask/next   ⍝ apply forced moves.⍞000D        }                                   ⍝ state ← posns (state ::) values⍞000D⍞000D        indx←{                              ⍝ bool connection vectors.⍞000D            a←⍺∘⊥¨⌊(⍳⍵)÷⊂⍺                  ⍝ area colours.⍞000D            v h←+/¨1⊂↑⍳⍵                    ⍝ vert and horiz colours.⍞000D            cm←,[1↓⍳3]↑a v h                ⍝ characteristic matrix.⍞000D            x←⍳×/⍵                          ⍝ linear index vector.⍞000D            ↓(x∘.≠x)∧(⍉cm)∨.=cm             ⍝ connection vectors.⍞000D        }                                   ⍝ cvx ← area_size :: grid_size⍞000D⍞000D        cvx←⍺ indx⍴⍵                        ⍝ bool connection vectors.⍞000D        all←,(⍵×0)+⊂1+⍳⊃⍴⍵                  ⍝ complete set of values.⍞000D        sx←⍳⍴,⍵                             ⍝ index vector for state.⍞000D        init←((×,⍵)/sx)(all set)(,⍵)~0      ⍝ initial state.⍞000D⍞000D        (⍴⍵)∘⍴∘↑¨⍬ search init              ⍝ all solutions.⍞000D    }⍞000D⍞000D    sbox¨sudoku s33                 ⍝ display all solutions.⍞000D ┌─────┬─────┬─────┐  ┌─────┬─────┬─────┐  ┌─────┬─────┬─────┐ ⍞000D │3 8 1│6 9 4│5 7 2│  │2 8 1│6 9 3│5 7 4│  │2 8 1│6 9 3│5 7 4│ ⍞000D │4 6 9│2 7 5│3 8 1│  │4 6 9│2 7 5│3 8 1│  │4 6 9│2 7 5│3 8 1│ ⍞000D │2 7 5│8 1 3│4 9 6│  │5 7 3│8 1 4│2 9 6│  │3 7 5│8 1 4│2 9 6│ ⍞000D ├─────┼─────┼─────┤  ├─────┼─────┼─────┤  ├─────┼─────┼─────┤ ⍞000D │7 9 4│5 6 2│1 3 8│  │7 9 2│5 6 1│4 3 8│  │7 9 2│5 6 1│4 3 8│ ⍞000D │6 5 8│4 3 1│9 2 7│  │6 5 8│4 3 9│1 2 7│  │6 5 8│4 3 9│1 2 7│ ⍞000D │1 3 2│7 8 9│6 5 4│  │1 3 4│7 8 2│6 5 9│  │1 3 4│7 8 2│6 5 9│ ⍞000D ├─────┼─────┼─────┤  ├─────┼─────┼─────┤  ├─────┼─────┼─────┤ ⍞000D │5 4 6│9 2 7│8 1 3│  │3 4 6│9 2 7│8 1 5│  │5 4 6│9 2 7│8 1 3│ ⍞000D │9 2 3│1 4 8│7 6 5│  │9 2 5│1 4 8│7 6 3│  │9 2 3│1 4 8│7 6 5│ ⍞000D │8 1 7│3 5 6│2 4 9│  │8 1 7│3 5 6│9 4 2│  │8 1 7│3 5 6│9 4 2│ ⍞000D └─────┴─────┴─────┘  └─────┴─────┴─────┘  └─────┴─────┴─────┘ ⍞000D⍞000D⍝ Phil''s translation of Arthur''s K code:⍞000D⍞000D    sudoku←{⎕io←0      ⍝ Whitney/Last⍞000D        p←{(↑⍵)∘{(⍺∨.=⍵)/⍳n×n}¨,⍵},(n*÷2){⍵,⍺⊥⌊⍵÷⍺}¨⍳n n←⍴⍵⍞000D        m←{(⊂⍵)⌈(⊂⍺=⍳⍴⍵)×(1+⍳n)~⍵[⍺⊃p]}⍞000D        (⍴⍵)∘⍴¨⊃{⊃,/⍺ m¨⍵}/{((⍵=0)/⍳⍴⍵),⊂⊂⍵},⍵⍞000D    }⍞000D⍞000D    sbox¨sudoku s33                 ⍝ display all solutions.⍞000D ┌─────┬─────┬─────┐  ┌─────┬─────┬─────┐  ┌─────┬─────┬─────┐ ⍞000D │2 8 1│6 9 3│5 7 4│  │2 8 1│6 9 3│5 7 4│  │3 8 1│6 9 4│5 7 2│ ⍞000D │4 6 9│2 7 5│3 8 1│  │4 6 9│2 7 5│3 8 1│  │4 6 9│2 7 5│3 8 1│ ⍞000D │5 7 3│8 1 4│2 9 6│  │3 7 5│8 1 4│2 9 6│  │2 7 5│8 1 3│4 9 6│ ⍞000D ├─────┼─────┼─────┤  ├─────┼─────┼─────┤  ├─────┼─────┼─────┤ ⍞000D │7 9 2│5 6 1│4 3 8│  │7 9 2│5 6 1│4 3 8│  │7 9 4│5 6 2│1 3 8│ ⍞000D │6 5 8│4 3 9│1 2 7│  │6 5 8│4 3 9│1 2 7│  │6 5 8│4 3 1│9 2 7│ ⍞000D │1 3 4│7 8 2│6 5 9│  │1 3 4│7 8 2│6 5 9│  │1 3 2│7 8 9│6 5 4│ ⍞000D ├─────┼─────┼─────┤  ├─────┼─────┼─────┤  ├─────┼─────┼─────┤ ⍞000D │3 4 6│9 2 7│8 1 5│  │5 4 6│9 2 7│8 1 3│  │5 4 6│9 2 7│8 1 3│ ⍞000D │9 2 5│1 4 8│7 6 3│  │9 2 3│1 4 8│7 6 5│  │9 2 3│1 4 8│7 6 5│ ⍞000D │8 1 7│3 5 6│9 4 2│  │8 1 7│3 5 6│9 4 2│  │8 1 7│3 5 6│2 4 9│ ⍞000D └─────┴─────┴─────┘  └─────┴─────┴─────┘  └─────┴─────┴─────┘ ⍞000D⍞000D⍝ Morten''s coding:⍞000D⍞000D    sudoku←{⎕io←0⍞000D    ⍝ Define one k fn and one op missing from APL⍞000D         wh←{(⍵≠0)/⍳⍴⍵}             ⍝ k ''&'' function⍞000D         at←{a←⍺ ⋄ a[⍺⍺]←⍵ ⋄ a}     ⍝ k ''@'': r←old (indexes at) new⍞000D ⍞000D         rcq←(↑,⍳9 9),3/,3⌿3 3⍴⍳9   ⍝ Row, Column, Quadrant⍞000D         p←{wh rcq∨.=⍵}¨↓rcq        ⍝ Cells in same row, col or quadrant⍞000D         nzd←1+⍳9                   ⍝ Non-zero digits to gain a little more speed⍞000D         ⊃{⊃,/⍺{⍵∘(⍺ at)¨nzd~⍵[⍺⊃p]}¨⍵}/(wh ⍵=0),⊂⊂⍵ ⍝ kapow!⍞000D    }⍞000D⍞000D    sbox∘(9 9∘⍴)¨ sudoku ,s33⍞000D ┌─────┬─────┬─────┐  ┌─────┬─────┬─────┐  ┌─────┬─────┬─────┐ ⍞000D │2 8 1│6 9 3│5 7 4│  │2 8 1│6 9 3│5 7 4│  │3 8 1│6 9 4│5 7 2│ ⍞000D │4 6 9│2 7 5│3 8 1│  │4 6 9│2 7 5│3 8 1│  │4 6 9│2 7 5│3 8 1│ ⍞000D │5 7 3│8 1 4│2 9 6│  │3 7 5│8 1 4│2 9 6│  │2 7 5│8 1 3│4 9 6│ ⍞000D ├─────┼─────┼─────┤  ├─────┼─────┼─────┤  ├─────┼─────┼─────┤ ⍞000D │7 9 2│5 6 1│4 3 8│  │7 9 2│5 6 1│4 3 8│  │7 9 4│5 6 2│1 3 8│ ⍞000D │6 5 8│4 3 9│1 2 7│  │6 5 8│4 3 9│1 2 7│  │6 5 8│4 3 1│9 2 7│ ⍞000D │1 3 4│7 8 2│6 5 9│  │1 3 4│7 8 2│6 5 9│  │1 3 2│7 8 9│6 5 4│ ⍞000D ├─────┼─────┼─────┤  ├─────┼─────┼─────┤  ├─────┼─────┼─────┤ ⍞000D │3 4 6│9 2 7│8 1 5│  │5 4 6│9 2 7│8 1 3│  │5 4 6│9 2 7│8 1 3│ ⍞000D │9 2 5│1 4 8│7 6 3│  │9 2 3│1 4 8│7 6 5│  │9 2 3│1 4 8│7 6 5│ ⍞000D │8 1 7│3 5 6│9 4 2│  │8 1 7│3 5 6│9 4 2│  │8 1 7│3 5 6│2 4 9│ ⍞000D └─────┴─────┴─────┘  └─────┴─────┴─────┘  └─────┴─────┴─────┘ ⍞000D⍞000D⍝ Roger''s revamp:⍞000D⍞000D    sudoku←{⍺←(⍴⍵)*÷2                   ⍝ Solutions of shape-⍺ Sudoku puzzle ⍵.⍞000D        svec ← {⊃pvex/(emt ⍵),⊂⊂⍵}      ⍝ solution vector⍞000D        pvex ← {⊃,/⍺∘pvec¨⍵}            ⍝ vector of placements⍞000D        pvec ← {(⍺ avl ⍵)(⍺ at)¨⊂⍵}     ⍝ placements⍞000D        avl  ← {(⍳⊃⍴⍵)~⍵×⊃⍺⌷CMAP}       ⍝ list of available numbers⍞000D        at   ← {⍵+⍺×(⍳⍴⍵)∊⊂⍺⍺}          ⍝ ⍺ at cell ⍺⍺ in ⍵⍞000D        emt  ← {(,⍵=0)/,⍳⍴⍵}            ⍝ row & column indices of empty cells⍞000D⍞000D        rcb  ← {(⍳⍴⍵),¨⍺ box(⍴⍵)÷⍺}     ⍝ row/column/box numbers⍞000D        box  ← {(⊃⍺)⌿(⊃⌽⍺)/⍵⍴⍳×/⍵}      ⍝ box numbers for a puzzle of size ⍵*2⍞000D        cmap ← {⊂[⍳2]1∊¨⍵∘.=⍵}          ⍝ contention map for puzzle ⍵⍞000D        CMAP ← cmap ⍺ rcb ⍵             ⍝ contention map for puzzle⍞000D⍞000D        svec ⍵                          ⍝ vector of solutions.⍞000D    }⍞000D⍞000D    sbox¨sudoku s22⍞000D ┌───┬───┐  ┌───┬───┐  ┌───┬───┐ ⍞000D │1 2│3 4│  │1 2│3 4│  │1 2│3 4│ ⍞000D │3 4│1 2│  │3 4│2 1│  │3 4│1 2│ ⍞000D ├───┼───┤  ├───┼───┤  ├───┼───┤ ⍞000D │2 1│4 3│  │2 1│4 3│  │2 3│4 1│ ⍞000D │4 3│2 1│  │4 3│1 2│  │4 1│2 3│ ⍞000D └───┴───┘  └───┴───┘  └───┴───┘ ' 
